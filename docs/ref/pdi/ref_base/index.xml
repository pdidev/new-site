<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PDI â€“ PDI::Ref_base class reference</title>
    <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/ref_base/</link>
    <description>Recent content in PDI::Ref_base class reference on PDI</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/ref_base/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: PDI::Ref_base::Referenced struct reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/ref_base/referenced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/ref_base/referenced/</guid>
      <description>
        
        
        &lt;p&gt;Manipulate and grant access to a buffer depending on the remaining right access (read/write).&lt;/p&gt;
&lt;h2 id=&#34;member-functions-list&#34;&gt;Member Functions&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#referenced&#34;&gt;&lt;code&gt; Referenced ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#referenced-const-referenced-&#34;&gt;&lt;code&gt; Referenced ( const Referenced &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#referenced-referenced-&#34;&gt;&lt;code&gt; Referenced ( Referenced &amp;&amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#referenced-void--stdfunction-voidvoid--bool-datatype_uptr-bool&#34;&gt;&lt;code&gt; Referenced ( void *, std::function&lt; void(void *)&gt;, bool, Datatype_uptr, bool )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Constructs the content. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#referenced&#34;&gt;&lt;code&gt; ~Referenced ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;referenced&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Referenced&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;referenced-const-referenced-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Referenced&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Referenced &amp;amp;&lt;/span&gt; &lt;a href=&#34;#referenced-const-referenced--_-&#34;&gt;&lt;var class=&#34;nv&#34;&gt;&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;referenced-const-referenced--_-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;referenced-referenced-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Referenced&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Referenced &amp;amp;&amp;amp;&lt;/span&gt; &lt;a href=&#34;#referenced-referenced--_-&#34;&gt;&lt;var class=&#34;nv&#34;&gt;&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;referenced-referenced--_-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;referenced-void--stdfunction-voidvoid--bool-datatype_uptr-bool&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Referenced&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#referenced-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-buffer&#34;&gt;&lt;var class=&#34;nv&#34;&gt;buffer&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void(void *)&amp;gt;&lt;/span&gt; &lt;a href=&#34;#referenced-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-deleter&#34;&gt;&lt;var class=&#34;nv&#34;&gt;deleter&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;a href=&#34;#referenced-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-readable&#34;&gt;&lt;var class=&#34;nv&#34;&gt;readable&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;a href=&#34;#referenced-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-type&#34;&gt;&lt;var class=&#34;nv&#34;&gt;type&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;a href=&#34;#referenced-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-writable&#34;&gt;&lt;var class=&#34;nv&#34;&gt;writable&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Constructs the content.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;referenced-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-buffer&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;buffer&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the actual content&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;referenced-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-deleter&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;deleter&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the function to use to deallocate the buffer memory&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;referenced-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-readable&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;readable&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;whether it is allowed to read the content&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;referenced-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-type&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;type&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the content type, this takes ownership of the type&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;referenced-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-writable&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;writable&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;whether it is allowed to write the content&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;referenced&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;~Referenced&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;/article&gt;

      </description>
    </item>
    
  </channel>
</rss>
