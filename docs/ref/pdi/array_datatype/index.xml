<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PDI â€“ PDI::Array_datatype class reference</title>
    <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/array_datatype/</link>
    <description>Recent content in PDI::Array_datatype class reference on PDI</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/array_datatype/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: PDI::Array_datatype::Index_accessor class reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/array_datatype/index_accessor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/array_datatype/index_accessor/</guid>
      <description>
        
        
        &lt;h2 id=&#34;member-types-list&#34;&gt;Member Types&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;pdi_errhandler_t&#34;&gt;&lt;code&gt;struct PDI_errhandler_t&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Definition of an error handler.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;p&gt;Accessor to get single element from array.&lt;/p&gt;
&lt;h2 id=&#34;member-functions-list&#34;&gt;Member Functions&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#index_accessor-size_t&#34;&gt;&lt;code&gt; Index_accessor ( size_t )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Construct a new index accessor. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype-&#34;&gt;&lt;code&gt;std::pair&amp;lt; void *, Datatype_uptr &amp;gt; access ( void *, std::vector&lt; std::unique_ptr&lt; Accessor_base &gt;&gt;::const_iterator, std::vector&lt; std::unique_ptr&lt; Accessor_base &gt;&gt;::const_iterator, const Array_datatype &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Access function for array datatype. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#clone&#34;&gt;&lt;code&gt;std::unique_ptr&amp;lt; Accessor_base &amp;gt; clone ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates and returns clone of accessor. &lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;index_accessor-size_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Index_accessor&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;a href=&#34;#index_accessor-size_t-_-index&#34;&gt;&lt;var class=&#34;nv&#34;&gt;index&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Construct a new index accessor.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;index_accessor-size_t-_-index&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;index&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;index of element that will be returned&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::pair&amp;lt; void *, Datatype_uptr &amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;access&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype--_-from&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;std::vector&amp;lt; std::unique_ptr&amp;lt; Accessor_base &amp;gt;&amp;gt;::const_iterator&lt;/span&gt; &lt;a href=&#34;#access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype--_-remaining_begin&#34;&gt;&lt;var class=&#34;nv&#34;&gt;remaining_begin&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;std::vector&amp;lt; std::unique_ptr&amp;lt; Accessor_base &amp;gt;&amp;gt;::const_iterator&lt;/span&gt; &lt;a href=&#34;#access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype--_-remaining_end&#34;&gt;&lt;var class=&#34;nv&#34;&gt;remaining_end&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;const Array_datatype &amp;amp;&lt;/span&gt; &lt;a href=&#34;#access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype--_-type&#34;&gt;&lt;var class=&#34;nv&#34;&gt;type&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Access function for array datatype.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype--_-from&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;pointer to data of type datatype&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype--_-remaining_begin&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;remaining_begin&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;iterator to the beginning of remaining accessors&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype--_-remaining_end&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;remaining_end&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;iterator to the end of remaining accessors&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype--_-type&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;type&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;a datatype to get access&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;string that inform what access is made&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;clone&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::unique_ptr&amp;lt; Accessor_base &amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;clone&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates and returns clone of accessor.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;clone of accessor&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Array_datatype::Slice_accessor class reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/array_datatype/slice_accessor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/array_datatype/slice_accessor/</guid>
      <description>
        
        
        &lt;h2 id=&#34;member-types-list&#34;&gt;Member Types&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;pdi_errhandler_t&#34;&gt;&lt;code&gt;struct PDI_errhandler_t&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Definition of an error handler.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;p&gt;Accessor to get a slice of an array, returns array of the same subtype.&lt;/p&gt;
&lt;h2 id=&#34;member-functions-list&#34;&gt;Member Functions&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#slice_accessor-size_t-size_t&#34;&gt;&lt;code&gt; Slice_accessor ( size_t, size_t )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Construct a new slice accessor. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype-&#34;&gt;&lt;code&gt;std::pair&amp;lt; void *, Datatype_uptr &amp;gt; access ( void *, std::vector&lt; std::unique_ptr&lt; Accessor_base &gt;&gt;::const_iterator, std::vector&lt; std::unique_ptr&lt; Accessor_base &gt;&gt;::const_iterator, const Array_datatype &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Access function for array datatype. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#clone&#34;&gt;&lt;code&gt;std::unique_ptr&amp;lt; Accessor_base &amp;gt; clone ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates and returns clone of accessor. &lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;slice_accessor-size_t-size_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Slice_accessor&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;a href=&#34;#slice_accessor-size_t-size_t-_-end&#34;&gt;&lt;var class=&#34;nv&#34;&gt;end&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;a href=&#34;#slice_accessor-size_t-size_t-_-start&#34;&gt;&lt;var class=&#34;nv&#34;&gt;start&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Construct a new slice accessor.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;slice_accessor-size_t-size_t-_-end&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;end&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;end index of the slice&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;slice_accessor-size_t-size_t-_-start&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;start&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;start index of the slice&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::pair&amp;lt; void *, Datatype_uptr &amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;access&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype--_-from&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;std::vector&amp;lt; std::unique_ptr&amp;lt; Accessor_base &amp;gt;&amp;gt;::const_iterator&lt;/span&gt; &lt;a href=&#34;#access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype--_-remaining_begin&#34;&gt;&lt;var class=&#34;nv&#34;&gt;remaining_begin&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;std::vector&amp;lt; std::unique_ptr&amp;lt; Accessor_base &amp;gt;&amp;gt;::const_iterator&lt;/span&gt; &lt;a href=&#34;#access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype--_-remaining_end&#34;&gt;&lt;var class=&#34;nv&#34;&gt;remaining_end&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;const Array_datatype &amp;amp;&lt;/span&gt; &lt;a href=&#34;#access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype--_-type&#34;&gt;&lt;var class=&#34;nv&#34;&gt;type&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Access function for array datatype.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype--_-from&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;pointer to data of type datatype&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype--_-remaining_begin&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;remaining_begin&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;iterator to the beginning of remaining accessors&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype--_-remaining_end&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;remaining_end&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;iterator to the end of remaining accessors&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;access-void--stdvector-stdunique_ptr-accessor_base-const_iterator-stdvector-stdunique_ptr-accessor_base-const_iterator-const-array_datatype--_-type&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;type&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;a datatype to get access&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;string that inform what access is made&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;clone&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::unique_ptr&amp;lt; Accessor_base &amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;clone&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates and returns clone of accessor.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;clone of accessor&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;

      </description>
    </item>
    
  </channel>
</rss>
