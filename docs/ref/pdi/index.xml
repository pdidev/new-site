<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PDI – PDI namespace reference</title>
    <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/</link>
    <description>Recent content in PDI namespace reference on PDI</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: PDI::Array_datatype class reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/array_datatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/array_datatype/</guid>
      <description>
        
        
        &lt;p&gt;an &lt;a href=&#34;compound:classPDI_1_1Array__datatype&#34;&gt;Array_datatype&lt;/a&gt; is a &lt;a href=&#34;compound:classPDI_1_1Datatype&#34;&gt;Datatype&lt;/a&gt; that represents an array: i.e storage of multiple elements of the same type continuously in memory.&lt;/p&gt;
&lt;h2 id=&#34;member-functions-list&#34;&gt;Member Functions&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#array_datatype-size_t-size_t-size_t-datatype_uptr&#34;&gt;&lt;code&gt; Array_datatype ( size_t, size_t, size_t, Datatype_uptr )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Construct a new partially filled &lt;a href=&#34;compound:classPDI_1_1Array__datatype&#34;&gt;Array_datatype&lt;/a&gt;. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#array_datatype-size_t-datatype_uptr&#34;&gt;&lt;code&gt; Array_datatype ( size_t, Datatype_uptr )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Construct a new completely filled &lt;a href=&#34;compound:classPDI_1_1Array__datatype&#34;&gt;Array_datatype&lt;/a&gt;. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#alignment&#34;&gt;&lt;code&gt;size_t alignment ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the required alignment for a type. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#buffersize&#34;&gt;&lt;code&gt;size_t buffersize ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Computes the data size of a type, including potentially unused memory from a sparse type. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#clone&#34;&gt;&lt;code&gt;Datatype_template_uptr clone ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype as an exact copy of this one. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#clone_type&#34;&gt;&lt;code&gt;Datatype_uptr clone_type ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype as an exact copy of this one. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#data_from_dense_copy-const-void--void-&#34;&gt;&lt;code&gt;void * data_from_dense_copy ( const void *, void * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a sparse deep copy of dense data. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#data_to_dense_copy-const-void--void-&#34;&gt;&lt;code&gt;void * data_to_dense_copy ( const void *, void * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a dense deep copy of data. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#datasize&#34;&gt;&lt;code&gt;size_t datasize ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Computes the data size of a type, excluding potentially unused memory from a sparse type. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#debug_string&#34;&gt;&lt;code&gt;std::string debug_string ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the datatype yaml representation as a string. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#dense&#34;&gt;&lt;code&gt;bool dense ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Indicate if the datatype is dense or not. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#densify&#34;&gt;&lt;code&gt;Datatype_uptr densify ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype as the dense copy of this one. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#destroy_data-void-&#34;&gt;&lt;code&gt;void destroy_data ( void * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Function used to delete the data behind the datatype. &lt;a href=&#34;#destroy_data-void-&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#evaluate-context-&#34;&gt;&lt;code&gt;Datatype_uptr evaluate ( Context &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype by resolving the value of all metadata references. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-const-datatype-&#34;&gt;&lt;code&gt;bool operator== ( const Datatype &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Test for equality. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#simple&#34;&gt;&lt;code&gt;bool simple ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Tells if data can be copied as bytes (if type is dense) and doesn&#39;t need a destroyer. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#size&#34;&gt;&lt;code&gt;size_t size ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Number of elements the array can store. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#start&#34;&gt;&lt;code&gt;size_t start ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;id of the first actual element of the array &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#subsize&#34;&gt;&lt;code&gt;size_t subsize ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Number of actual elements in the array. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#subtype&#34;&gt;&lt;code&gt;const Datatype &amp;amp; subtype ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Type of the elements contained in the array. &lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;array_datatype-size_t-size_t-size_t-datatype_uptr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Array_datatype&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;a href=&#34;#array_datatype-size_t-size_t-size_t-datatype_uptr-_-size&#34;&gt;&lt;var class=&#34;nv&#34;&gt;size&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;a href=&#34;#array_datatype-size_t-size_t-size_t-datatype_uptr-_-start&#34;&gt;&lt;var class=&#34;nv&#34;&gt;start&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;a href=&#34;#array_datatype-size_t-size_t-size_t-datatype_uptr-_-subsize&#34;&gt;&lt;var class=&#34;nv&#34;&gt;subsize&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;a href=&#34;#array_datatype-size_t-size_t-size_t-datatype_uptr-_-subtype&#34;&gt;&lt;var class=&#34;nv&#34;&gt;subtype&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Construct a new partially filled &lt;a href=&#34;compound:classPDI_1_1Array__datatype&#34;&gt;Array_datatype&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;array_datatype-size_t-size_t-size_t-datatype_uptr-_-size&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;size&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the number of elements the array can store&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;array_datatype-size_t-size_t-size_t-datatype_uptr-_-start&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;start&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the id of the first actual element of the array&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;array_datatype-size_t-size_t-size_t-datatype_uptr-_-subsize&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;subsize&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the number of actual elements in the array&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;array_datatype-size_t-size_t-size_t-datatype_uptr-_-subtype&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;subtype&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the type of the elements contained in the array&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;array_datatype-size_t-datatype_uptr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Array_datatype&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;a href=&#34;#array_datatype-size_t-datatype_uptr-_-size&#34;&gt;&lt;var class=&#34;nv&#34;&gt;size&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;a href=&#34;#array_datatype-size_t-datatype_uptr-_-subtype&#34;&gt;&lt;var class=&#34;nv&#34;&gt;subtype&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Construct a new completely filled &lt;a href=&#34;compound:classPDI_1_1Array__datatype&#34;&gt;Array_datatype&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;array_datatype-size_t-datatype_uptr-_-size&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;size&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the number of elements the array can store&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;array_datatype-size_t-datatype_uptr-_-subtype&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;subtype&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the type of the elements contained in the array&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;alignment&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;alignment&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Returns the required alignment for a type.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the size in bytes&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;buffersize&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;buffersize&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Computes the data size of a type, including potentially unused memory from a sparse type.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the size in bytes&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;clone&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_template_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;clone&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype as an exact copy of this one.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the dense type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;clone_type&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;clone_type&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype as an exact copy of this one.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the dense type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;data_from_dense_copy-const-void--void-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;data_from_dense_copy&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const void *&lt;/span&gt; &lt;a href=&#34;#data_from_dense_copy-const-void--void--_-from&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#data_from_dense_copy-const-void--void--_-to&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a sparse deep copy of dense data.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_from_dense_copy-const-void--void--_-from&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the copied data (dense data)&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_from_dense_copy-const-void--void--_-to&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the allocated memory to fill (size of buffersize)&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;updated ‘to’ pointer&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;data_to_dense_copy-const-void--void-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;data_to_dense_copy&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const void *&lt;/span&gt; &lt;a href=&#34;#data_to_dense_copy-const-void--void--_-from&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#data_to_dense_copy-const-void--void--_-to&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a dense deep copy of data.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_to_dense_copy-const-void--void--_-from&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the copied data (size of buffersize)&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_to_dense_copy-const-void--void--_-to&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the allocated memory to fill (dense data)&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;updated ‘to’ pointer&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;datasize&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;datasize&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Computes the data size of a type, excluding potentially unused memory from a sparse type.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the size in bytes&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;debug_string&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::string&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;debug_string&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Returns the datatype yaml representation as a string.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the datatype yaml representation as a string&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;dense&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dense&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Indicate if the datatype is dense or not.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;whether the datatype is dense&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;densify&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;densify&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype as the dense copy of this one.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;destroy_data-void-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;destroy_data&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#destroy_data-void--_-ptr&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ptr&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Function used to delete the data behind the datatype.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;destroy_data-void--_-ptr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ptr&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;to the data to free&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;section class=&#34;description&#34;&gt;
Function used to delete the data behind the datatype.
This should not deallocate the memory.
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;evaluate-context-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;evaluate&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Context &amp;amp;&lt;/span&gt; &lt;a href=&#34;#evaluate-context--_-ctx&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype by resolving the value of all metadata references.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;evaluate-context--_-ctx&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the context in which to evaluate this template&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the evaluated type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-const-datatype-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator==&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Datatype &amp;amp;&lt;/span&gt; &lt;a href=&#34;#operator-const-datatype--_-other&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Test for equality.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-const-datatype--_-other&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the &lt;a href=&#34;compound:classPDI_1_1Datatype&#34;&gt;Datatype&lt;/a&gt; to compare&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;true if the &lt;a href=&#34;compound:classPDI_1_1Datatype&#34;&gt;Datatype&lt;/a&gt;&#39;s are equal&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;simple&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;simple&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Tells if data can be copied as bytes (if type is dense) and doesn&amp;rsquo;t need a destroyer.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;true if data has trivial copier and destroyer, false otherwise&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;size&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;size&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Number of elements the array can store.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the number of elements the array can store&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;start&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;start&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;id of the first actual element of the array&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the id of the first actual element of the array&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;subsize&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;subsize&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Number of actual elements in the array.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the number of actual elements in the array&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;subtype&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;const Datatype &amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;subtype&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Type of the elements contained in the array.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the type of the elements contained in the array&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Context class reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/context/</guid>
      <description>
        
        
        &lt;h2 id=&#34;member-types-list&#34;&gt;Member Types&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;datatype_template_parser&#34;&gt;&lt;code&gt;typedef Datatype_template_parser&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A function that parses a PC\_tree\_t to create a datatype\_template\.
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;iterator&#34;&gt;&lt;code&gt;class Iterator&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;An iterator used to go through the descriptor store\.
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;member-functions-list&#34;&gt;Member Functions&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#add_data_callback-const-stdfunction-voidconst-stdstring--ref--const-stdstring-&#34;&gt;&lt;code&gt;std::function&amp;lt; void()&amp;gt; add_data_callback ( const std::function&lt; void(const std::string &amp;, Ref)&gt; &amp;, const std::string &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Adds new data callback to context. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#add_datatype-const-stdstring--datatype_template_parser&#34;&gt;&lt;code&gt;void add_datatype ( const std::string &amp;, Datatype_template_parser )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Adds new datatype parser to the context. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#add_empty_desc_access_callback-const-stdfunction-voidconst-stdstring---const-stdstring-&#34;&gt;&lt;code&gt;std::function&amp;lt; void()&amp;gt; add_empty_desc_access_callback ( const std::function&lt; void(const std::string &amp;)&gt; &amp;, const std::string &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Adds new empty desc access callback to context. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#add_event_callback-const-stdfunction-voidconst-stdstring---const-stdstring-&#34;&gt;&lt;code&gt;std::function&amp;lt; void()&amp;gt; add_event_callback ( const std::function&lt; void(const std::string &amp;)&gt; &amp;, const std::string &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Adds new event callback to context. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#add_init_callback-const-stdfunction-void-&#34;&gt;&lt;code&gt;std::function&amp;lt; void()&amp;gt; add_init_callback ( const std::function&lt; void()&gt; &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Adds new init callback to context. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#begin&#34;&gt;&lt;code&gt;Iterator begin ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns an iterator on the first descriptor. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#datatype-pc_tree_t&#34;&gt;&lt;code&gt;Datatype_template_uptr datatype ( PC_tree_t )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype template from a paraconf-style config. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#desc-const-stdstring-&#34;&gt;&lt;code&gt;Data_descriptor &amp;amp; desc ( const std::string &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Accesses the descriptor for a specific name. &lt;a href=&#34;#desc-const-stdstring-&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#desc-const-char-&#34;&gt;&lt;code&gt;Data_descriptor &amp;amp; desc ( const char * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Accesses the descriptor for a specific name. &lt;a href=&#34;#desc-const-char-&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#end&#34;&gt;&lt;code&gt;Iterator end ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns an iterator past the last descriptor. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#event-const-char-&#34;&gt;&lt;code&gt;void event ( const char * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Triggers a &lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt; &amp;quot;event&amp;quot;. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#finalize_and_exit&#34;&gt;&lt;code&gt;void finalize_and_exit ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#logger&#34;&gt;&lt;code&gt;Logger_sptr logger ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-const-stdstring-&#34;&gt;&lt;code&gt;Data_descriptor &amp;amp; operator[] ( const std::string &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Accesses the descriptor for a specific name. &lt;a href=&#34;#operator-const-stdstring-&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-const-char-&#34;&gt;&lt;code&gt;Data_descriptor &amp;amp; operator[] ( const char * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Accesses the descriptor for a specific name. &lt;a href=&#34;#operator-const-char-&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#context&#34;&gt;&lt;code&gt; ~Context ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;add_data_callback-const-stdfunction-voidconst-stdstring--ref--const-stdstring-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void()&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add_data_callback&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const std::function&amp;lt; void(const std::string &amp;amp;, Ref)&amp;gt; &amp;amp;&lt;/span&gt; &lt;a href=&#34;#add_data_callback-const-stdfunction-voidconst-stdstring--ref--const-stdstring--_-callback&#34;&gt;&lt;var class=&#34;nv&#34;&gt;callback&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;const std::string &amp;amp;&lt;/span&gt; &lt;a href=&#34;#add_data_callback-const-stdfunction-voidconst-stdstring--ref--const-stdstring--_-name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Adds new data callback to context.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;add_data_callback-const-stdfunction-voidconst-stdstring--ref--const-stdstring--_-callback&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;callback&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;function to call when data is being available&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;add_data_callback-const-stdfunction-voidconst-stdstring--ref--const-stdstring--_-name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the name of the data on which call the callback, if not specified it&#39;s called on any data&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;function that removes callback&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;add_datatype-const-stdstring--datatype_template_parser&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add_datatype&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const std::string &amp;amp;&lt;/span&gt; &lt;a href=&#34;#add_datatype-const-stdstring--datatype_template_parser-_-name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;Datatype_template_parser&lt;/span&gt; &lt;a href=&#34;#add_datatype-const-stdstring--datatype_template_parser-_-parser&#34;&gt;&lt;var class=&#34;nv&#34;&gt;parser&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Adds new datatype parser to the context.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;add_datatype-const-stdstring--datatype_template_parser-_-name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;name of the datatype to add&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;add_datatype-const-stdstring--datatype_template_parser-_-parser&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;parser&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;function that creates new datatype_template from PC_tree_t&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;add_empty_desc_access_callback-const-stdfunction-voidconst-stdstring---const-stdstring-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void()&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add_empty_desc_access_callback&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const std::function&amp;lt; void(const std::string &amp;amp;)&amp;gt; &amp;amp;&lt;/span&gt; &lt;a href=&#34;#add_empty_desc_access_callback-const-stdfunction-voidconst-stdstring---const-stdstring--_-callback&#34;&gt;&lt;var class=&#34;nv&#34;&gt;callback&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;const std::string &amp;amp;&lt;/span&gt; &lt;a href=&#34;#add_empty_desc_access_callback-const-stdfunction-voidconst-stdstring---const-stdstring--_-name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Adds new empty desc access callback to context.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;add_empty_desc_access_callback-const-stdfunction-voidconst-stdstring---const-stdstring--_-callback&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;callback&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;function to call when event is called&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;add_empty_desc_access_callback-const-stdfunction-voidconst-stdstring---const-stdstring--_-name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the name of the data on which call the callback, if not specified it&#39;s called on any data&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;function that removes callback&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;add_event_callback-const-stdfunction-voidconst-stdstring---const-stdstring-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void()&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add_event_callback&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const std::function&amp;lt; void(const std::string &amp;amp;)&amp;gt; &amp;amp;&lt;/span&gt; &lt;a href=&#34;#add_event_callback-const-stdfunction-voidconst-stdstring---const-stdstring--_-callback&#34;&gt;&lt;var class=&#34;nv&#34;&gt;callback&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;const std::string &amp;amp;&lt;/span&gt; &lt;a href=&#34;#add_event_callback-const-stdfunction-voidconst-stdstring---const-stdstring--_-name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Adds new event callback to context.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;add_event_callback-const-stdfunction-voidconst-stdstring---const-stdstring--_-callback&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;callback&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;function to call when event is called&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;add_event_callback-const-stdfunction-voidconst-stdstring---const-stdstring--_-name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the name of the event on which call the callback, if not specified it&#39;s called on any event&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;function that removes callback&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;add_init_callback-const-stdfunction-void-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void()&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add_init_callback&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const std::function&amp;lt; void()&amp;gt; &amp;amp;&lt;/span&gt; &lt;a href=&#34;#add_init_callback-const-stdfunction-void--_-callback&#34;&gt;&lt;var class=&#34;nv&#34;&gt;callback&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Adds new init callback to context.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;add_init_callback-const-stdfunction-void--_-callback&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;callback&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;function to call when data and metadata are loaded&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;function that removes callback&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;begin&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Iterator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;begin&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Returns an iterator on the first descriptor.&lt;/p&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;datatype-pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_template_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;datatype&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#datatype-pc_tree_t-_-node&#34;&gt;&lt;var class=&#34;nv&#34;&gt;node&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype template from a paraconf-style config.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;datatype-pc_tree_t-_-node&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;node&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the configuration to read&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the type generated&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;desc-const-stdstring-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Data_descriptor &amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;desc&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const std::string &amp;amp;&lt;/span&gt; &lt;a href=&#34;#desc-const-stdstring--_-name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Accesses the descriptor for a specific name.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;desc-const-stdstring--_-name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;section class=&#34;description&#34;&gt;
Accesses the descriptor for a specific name.
Might be uninitialized
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;desc-const-char-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Data_descriptor &amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;desc&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const char *&lt;/span&gt; &lt;a href=&#34;#desc-const-char--_-name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Accesses the descriptor for a specific name.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;desc-const-char--_-name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;section class=&#34;description&#34;&gt;
Accesses the descriptor for a specific name.
Might be uninitialized
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;end&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Iterator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;end&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Returns an iterator past the last descriptor.&lt;/p&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;event-const-char-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;event&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const char *&lt;/span&gt; &lt;a href=&#34;#event-const-char--_-name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Triggers a &lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt; &amp;quot;event&amp;quot;.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;event-const-char--_-name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the event name&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;finalize_and_exit&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;finalize_and_exit&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;logger&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Logger_sptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;logger&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-const-stdstring-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Data_descriptor &amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator[]&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const std::string &amp;amp;&lt;/span&gt; &lt;a href=&#34;#operator-const-stdstring--_-name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Accesses the descriptor for a specific name.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-const-stdstring--_-name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;section class=&#34;description&#34;&gt;
Accesses the descriptor for a specific name.
Might be uninitialized
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-const-char-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Data_descriptor &amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator[]&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const char *&lt;/span&gt; &lt;a href=&#34;#operator-const-char--_-name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Accesses the descriptor for a specific name.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-const-char--_-name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;section class=&#34;description&#34;&gt;
Accesses the descriptor for a specific name.
Might be uninitialized
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;context&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;~Context&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;/article&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Context_proxy class reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/context_proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/context_proxy/</guid>
      <description>
        
        
        &lt;h2 id=&#34;member-functions-list&#34;&gt;Member Functions&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#context_proxy-context--pc_tree_t-stdstring&#34;&gt;&lt;code&gt; Context_proxy ( Context &amp;, PC_tree_t, std::string )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#add_data_callback-const-stdfunction-voidconst-stdstring--ref--const-stdstring-&#34;&gt;&lt;code&gt;std::function&amp;lt; void()&amp;gt; add_data_callback ( const std::function&lt; void(const std::string &amp;, Ref)&gt; &amp;, const std::string &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Adds new data callback to context. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#add_datatype-const-stdstring--datatype_template_parser&#34;&gt;&lt;code&gt;void add_datatype ( const std::string &amp;, Datatype_template_parser )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&#34;member:classPDI_1_1Context_1a49ae5a3b3cb8d97b0f61e6a3dd9b0fd6&#34;&gt;Context::add_datatype&lt;/a&gt; proxy for plugins. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#add_empty_desc_access_callback-const-stdfunction-voidconst-stdstring---const-stdstring-&#34;&gt;&lt;code&gt;std::function&amp;lt; void()&amp;gt; add_empty_desc_access_callback ( const std::function&lt; void(const std::string &amp;)&gt; &amp;, const std::string &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Adds new empty desc access callback to context. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#add_event_callback-const-stdfunction-voidconst-stdstring---const-stdstring-&#34;&gt;&lt;code&gt;std::function&amp;lt; void()&amp;gt; add_event_callback ( const std::function&lt; void(const std::string &amp;)&gt; &amp;, const std::string &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Adds new event callback to context. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#add_init_callback-const-stdfunction-void-&#34;&gt;&lt;code&gt;std::function&amp;lt; void()&amp;gt; add_init_callback ( const std::function&lt; void()&gt; &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Adds new init callback to context. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#begin&#34;&gt;&lt;code&gt;Iterator begin ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&#34;member:classPDI_1_1Context_1af3cc6b4e8ecd9bc50b933527ccd5af19&#34;&gt;Context::begin&lt;/a&gt; proxy for plugins. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#datatype-pc_tree_t&#34;&gt;&lt;code&gt;Datatype_template_uptr datatype ( PC_tree_t )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&#34;member:classPDI_1_1Context_1af30302419766a7e4d302663c5d91636b&#34;&gt;Context::datatype&lt;/a&gt; proxy for plugins. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#desc-const-stdstring-&#34;&gt;&lt;code&gt;Data_descriptor &amp;amp; desc ( const std::string &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&#34;member:classPDI_1_1Context_1ad9cc865b0a004cf218c2633d3907e231&#34;&gt;Context::desc&lt;/a&gt; proxy for plugins. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#desc-const-char-&#34;&gt;&lt;code&gt;Data_descriptor &amp;amp; desc ( const char * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&#34;member:classPDI_1_1Context_1ad9cc865b0a004cf218c2633d3907e231&#34;&gt;Context::desc&lt;/a&gt; proxy for plugins. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#end&#34;&gt;&lt;code&gt;Iterator end ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&#34;member:classPDI_1_1Context_1ac987d27496498d563359f97ea9ec5416&#34;&gt;Context::end&lt;/a&gt; proxy for plugins. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#event-const-char-&#34;&gt;&lt;code&gt;void event ( const char * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&#34;member:classPDI_1_1Context_1afb530384d29404ab88a3c4210d03f19d&#34;&gt;Context::event&lt;/a&gt; proxy for plugins. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#finalize_and_exit&#34;&gt;&lt;code&gt;void finalize_and_exit ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#logger&#34;&gt;&lt;code&gt;Logger_sptr logger ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns local logger. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-const-stdstring-&#34;&gt;&lt;code&gt;Data_descriptor &amp;amp; operator[] ( const std::string &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&#34;member:classPDI_1_1Context_1af6b22d500d77d171fea9b5eb66b02c80&#34;&gt;Context::operator[]&lt;/a&gt; proxy for plugins. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-const-char-&#34;&gt;&lt;code&gt;Data_descriptor &amp;amp; operator[] ( const char * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&#34;member:classPDI_1_1Context_1af6b22d500d77d171fea9b5eb66b02c80&#34;&gt;Context::operator[]&lt;/a&gt; proxy for plugins. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#pdi_core_logger&#34;&gt;&lt;code&gt;Logger_sptr pdi_core_logger ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&#34;member:classPDI_1_1Context_1a5e78992507def6399403ab6fe3704320&#34;&gt;Context::logger&lt;/a&gt; proxy for plugins. &lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;context_proxy-context--pc_tree_t-stdstring&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Context_proxy&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Context &amp;amp;&lt;/span&gt; &lt;a href=&#34;#context_proxy-context--pc_tree_t-stdstring-_-ctx&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#context_proxy-context--pc_tree_t-stdstring-_-logging_tree&#34;&gt;&lt;var class=&#34;nv&#34;&gt;logging_tree&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;std::string&lt;/span&gt; &lt;a href=&#34;#context_proxy-context--pc_tree_t-stdstring-_-plugin_name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;plugin_name&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;context_proxy-context--pc_tree_t-stdstring-_-ctx&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;context_proxy-context--pc_tree_t-stdstring-_-logging_tree&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;logging_tree&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;context_proxy-context--pc_tree_t-stdstring-_-plugin_name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;plugin_name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;add_data_callback-const-stdfunction-voidconst-stdstring--ref--const-stdstring-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void()&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add_data_callback&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const std::function&amp;lt; void(const std::string &amp;amp;, Ref)&amp;gt; &amp;amp;&lt;/span&gt; &lt;a href=&#34;#add_data_callback-const-stdfunction-voidconst-stdstring--ref--const-stdstring--_-callback&#34;&gt;&lt;var class=&#34;nv&#34;&gt;callback&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;const std::string &amp;amp;&lt;/span&gt; &lt;a href=&#34;#add_data_callback-const-stdfunction-voidconst-stdstring--ref--const-stdstring--_-name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Adds new data callback to context.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;add_data_callback-const-stdfunction-voidconst-stdstring--ref--const-stdstring--_-callback&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;callback&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;function to call when data is being available&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;add_data_callback-const-stdfunction-voidconst-stdstring--ref--const-stdstring--_-name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the name of the data on which call the callback, if not specified it&#39;s called on any data&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;function that removes callback&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;add_datatype-const-stdstring--datatype_template_parser&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add_datatype&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const std::string &amp;amp;&lt;/span&gt; &lt;a href=&#34;#add_datatype-const-stdstring--datatype_template_parser-_-name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;Datatype_template_parser&lt;/span&gt; &lt;a href=&#34;#add_datatype-const-stdstring--datatype_template_parser-_-parser&#34;&gt;&lt;var class=&#34;nv&#34;&gt;parser&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;member:classPDI_1_1Context_1a49ae5a3b3cb8d97b0f61e6a3dd9b0fd6&#34;&gt;Context::add_datatype&lt;/a&gt; proxy for plugins.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;add_datatype-const-stdstring--datatype_template_parser-_-name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;add_datatype-const-stdstring--datatype_template_parser-_-parser&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;parser&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;add_empty_desc_access_callback-const-stdfunction-voidconst-stdstring---const-stdstring-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void()&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add_empty_desc_access_callback&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const std::function&amp;lt; void(const std::string &amp;amp;)&amp;gt; &amp;amp;&lt;/span&gt; &lt;a href=&#34;#add_empty_desc_access_callback-const-stdfunction-voidconst-stdstring---const-stdstring--_-callback&#34;&gt;&lt;var class=&#34;nv&#34;&gt;callback&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;const std::string &amp;amp;&lt;/span&gt; &lt;a href=&#34;#add_empty_desc_access_callback-const-stdfunction-voidconst-stdstring---const-stdstring--_-name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Adds new empty desc access callback to context.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;add_empty_desc_access_callback-const-stdfunction-voidconst-stdstring---const-stdstring--_-callback&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;callback&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;function to call when event is called&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;add_empty_desc_access_callback-const-stdfunction-voidconst-stdstring---const-stdstring--_-name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the name of the data on which call the callback, if not specified it&#39;s called on any data&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;function that removes callback&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;add_event_callback-const-stdfunction-voidconst-stdstring---const-stdstring-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void()&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add_event_callback&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const std::function&amp;lt; void(const std::string &amp;amp;)&amp;gt; &amp;amp;&lt;/span&gt; &lt;a href=&#34;#add_event_callback-const-stdfunction-voidconst-stdstring---const-stdstring--_-callback&#34;&gt;&lt;var class=&#34;nv&#34;&gt;callback&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;const std::string &amp;amp;&lt;/span&gt; &lt;a href=&#34;#add_event_callback-const-stdfunction-voidconst-stdstring---const-stdstring--_-name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Adds new event callback to context.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;add_event_callback-const-stdfunction-voidconst-stdstring---const-stdstring--_-callback&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;callback&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;function to call when event is called&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;add_event_callback-const-stdfunction-voidconst-stdstring---const-stdstring--_-name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the name of the event on which call the callback, if not specified it&#39;s called on any event&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;function that removes callback&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;add_init_callback-const-stdfunction-void-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void()&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add_init_callback&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const std::function&amp;lt; void()&amp;gt; &amp;amp;&lt;/span&gt; &lt;a href=&#34;#add_init_callback-const-stdfunction-void--_-callback&#34;&gt;&lt;var class=&#34;nv&#34;&gt;callback&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Adds new init callback to context.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;add_init_callback-const-stdfunction-void--_-callback&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;callback&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;function to call when data and metadata are loaded&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;function that removes callback&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;begin&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Iterator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;begin&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;member:classPDI_1_1Context_1af3cc6b4e8ecd9bc50b933527ccd5af19&#34;&gt;Context::begin&lt;/a&gt; proxy for plugins.&lt;/p&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;datatype-pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_template_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;datatype&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#datatype-pc_tree_t-_-node&#34;&gt;&lt;var class=&#34;nv&#34;&gt;node&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;member:classPDI_1_1Context_1af30302419766a7e4d302663c5d91636b&#34;&gt;Context::datatype&lt;/a&gt; proxy for plugins.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;datatype-pc_tree_t-_-node&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;node&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;desc-const-stdstring-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Data_descriptor &amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;desc&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const std::string &amp;amp;&lt;/span&gt; &lt;a href=&#34;#desc-const-stdstring--_-name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;member:classPDI_1_1Context_1ad9cc865b0a004cf218c2633d3907e231&#34;&gt;Context::desc&lt;/a&gt; proxy for plugins.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;desc-const-stdstring--_-name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;desc-const-char-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Data_descriptor &amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;desc&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const char *&lt;/span&gt; &lt;a href=&#34;#desc-const-char--_-name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;member:classPDI_1_1Context_1ad9cc865b0a004cf218c2633d3907e231&#34;&gt;Context::desc&lt;/a&gt; proxy for plugins.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;desc-const-char--_-name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;end&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Iterator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;end&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;member:classPDI_1_1Context_1ac987d27496498d563359f97ea9ec5416&#34;&gt;Context::end&lt;/a&gt; proxy for plugins.&lt;/p&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;event-const-char-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;event&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const char *&lt;/span&gt; &lt;a href=&#34;#event-const-char--_-name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;member:classPDI_1_1Context_1afb530384d29404ab88a3c4210d03f19d&#34;&gt;Context::event&lt;/a&gt; proxy for plugins.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;event-const-char--_-name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;finalize_and_exit&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;finalize_and_exit&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;logger&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Logger_sptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;logger&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Returns local logger.&lt;/p&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-const-stdstring-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Data_descriptor &amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator[]&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const std::string &amp;amp;&lt;/span&gt; &lt;a href=&#34;#operator-const-stdstring--_-name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;member:classPDI_1_1Context_1af6b22d500d77d171fea9b5eb66b02c80&#34;&gt;Context::operator[]&lt;/a&gt; proxy for plugins.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-const-stdstring--_-name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-const-char-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Data_descriptor &amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator[]&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const char *&lt;/span&gt; &lt;a href=&#34;#operator-const-char--_-name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;member:classPDI_1_1Context_1af6b22d500d77d171fea9b5eb66b02c80&#34;&gt;Context::operator[]&lt;/a&gt; proxy for plugins.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-const-char--_-name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;pdi_core_logger&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Logger_sptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;pdi_core_logger&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;member:classPDI_1_1Context_1a5e78992507def6399403ab6fe3704320&#34;&gt;Context::logger&lt;/a&gt; proxy for plugins.&lt;/p&gt;
&lt;/article&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Data_descriptor class reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/data_descriptor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/data_descriptor/</guid>
      <description>
        
        
        &lt;h2 id=&#34;member-functions-list&#34;&gt;Member Functions&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#default_type-datatype_template_uptr&#34;&gt;&lt;code&gt;void default_type ( Datatype_template_uptr )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Set the datatype template used to type raw pointers shared through this descriptor. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#default_type&#34;&gt;&lt;code&gt;Datatype_template_uptr default_type ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Access the datatype template used to type raw pointers shared through this descriptor. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#empty&#34;&gt;&lt;code&gt;bool empty ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Checks whether this descriptor is empty (contains no reference) &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#metadata&#34;&gt;&lt;code&gt;bool metadata ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Return true if the data is a metadata. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#metadata-bool&#34;&gt;&lt;code&gt;void metadata ( bool )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Sets whether this describes a metadata or not. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#name&#34;&gt;&lt;code&gt;const std::string &amp;amp; name ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Access the name of the descriptor. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#reclaim&#34;&gt;&lt;code&gt;void * reclaim ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Reclaims ownership of a data buffer shared with &lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt;. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#ref&#34;&gt;&lt;code&gt;Ref ref ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Return a reference to the value of the data behind this descriptor. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#release&#34;&gt;&lt;code&gt;void release ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Releases ownership of a data shared with &lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt;. &lt;a href=&#34;#release&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#share-void--bool-bool&#34;&gt;&lt;code&gt;void share ( void *, bool, bool )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Shares some data with &lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt;. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#share-bool-ref-bool&#34;&gt;&lt;code&gt;void * share ( bool, Ref, bool )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Shares some data with &lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt;. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#data_descriptor&#34;&gt;&lt;code&gt; ~Data_descriptor ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;default_type-datatype_template_uptr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;default_type&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Datatype_template_uptr&lt;/span&gt; &lt;a href=&#34;#default_type-datatype_template_uptr-_-type&#34;&gt;&lt;var class=&#34;nv&#34;&gt;type&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Set the datatype template used to type raw pointers shared through this descriptor.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;default_type-datatype_template_uptr-_-type&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;type&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the datatype template attached to the descriptor&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;default_type&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_template_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;default_type&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Access the datatype template used to type raw pointers shared through this descriptor.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the datatype template attached to the descriptor&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;empty&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;empty&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Checks whether this descriptor is empty (contains no reference)&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;true if empty.&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;metadata&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;metadata&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return true if the data is a metadata.&lt;/p&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;metadata-bool&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;metadata&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;a href=&#34;#metadata-bool-_-metadata&#34;&gt;&lt;var class=&#34;nv&#34;&gt;metadata&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Sets whether this describes a metadata or not.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;metadata-bool-_-metadata&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;metadata&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;whether data shared through this descriptor should behave as a metadata&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;const std::string &amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;name&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Access the name of the descriptor.&lt;/p&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;reclaim&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;reclaim&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Reclaims ownership of a data buffer shared with &lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the address of the buffer&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;ref&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Ref&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ref&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Return a reference to the value of the data behind this descriptor.&lt;/p&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;release&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;release&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Releases ownership of a data shared with &lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;section class=&#34;description&#34;&gt;
Releases ownership of a data shared with &lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt;.
&lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt; is then responsible to free the associated memory whenever necessary.
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;share-void--bool-bool&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;share&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#share-void--bool-bool-_-data&#34;&gt;&lt;var class=&#34;nv&#34;&gt;data&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;a href=&#34;#share-void--bool-bool-_-read&#34;&gt;&lt;var class=&#34;nv&#34;&gt;read&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;a href=&#34;#share-void--bool-bool-_-write&#34;&gt;&lt;var class=&#34;nv&#34;&gt;write&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Shares some data with &lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;share-void--bool-bool-_-data&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;data&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the shared data&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;share-void--bool-bool-_-read&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;read&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;whether read access is granted to other references&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;share-void--bool-bool-_-write&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;write&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;whether write access is granted to other references&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;share-bool-ref-bool&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;share&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;a href=&#34;#share-bool-ref-bool-_-read&#34;&gt;&lt;var class=&#34;nv&#34;&gt;read&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;Ref&lt;/span&gt; &lt;a href=&#34;#share-bool-ref-bool-_-ref&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ref&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;a href=&#34;#share-bool-ref-bool-_-write&#34;&gt;&lt;var class=&#34;nv&#34;&gt;write&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Shares some data with &lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;share-bool-ref-bool-_-read&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;read&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;whether the stored reference should have read access&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;share-bool-ref-bool-_-ref&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ref&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;a reference to the shared data&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;share-bool-ref-bool-_-write&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;write&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;whether the stored reference should have write access&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the just shared buffer&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;data_descriptor&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;~Data_descriptor&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;/article&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Datatype class reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/datatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/datatype/</guid>
      <description>
        
        
        &lt;p&gt;A &lt;a href=&#34;compound:classPDI_1_1Datatype&#34;&gt;Datatype&lt;/a&gt; is a &lt;a href=&#34;compound:classPDI_1_1Datatype__template&#34;&gt;Datatype_template&lt;/a&gt; that accepts no argument.&lt;/p&gt;
&lt;p&gt;It represents the memory layout of data and supports some simple operations on it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;accessing its content&lt;/li&gt;
&lt;li&gt;cloning and destruction&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;member-functions-list&#34;&gt;Member Functions&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#alignment&#34;&gt;&lt;code&gt;size_t alignment ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the required alignment for a type. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#buffersize&#34;&gt;&lt;code&gt;size_t buffersize ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Computes the data size of a type, including potentially unused memory from a sparse type. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#clone_type&#34;&gt;&lt;code&gt;Datatype_uptr clone_type ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype as an exact copy of this one. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#data_from_dense_copy-const-void--void-&#34;&gt;&lt;code&gt;void * data_from_dense_copy ( const void *, void * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a sparse deep copy of dense data. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#data_to_dense_copy-const-void--void-&#34;&gt;&lt;code&gt;void * data_to_dense_copy ( const void *, void * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a dense deep copy of data. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#datasize&#34;&gt;&lt;code&gt;size_t datasize ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Computes the data size of a type, excluding potentially unused memory from a sparse type. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#debug_string&#34;&gt;&lt;code&gt;std::string debug_string ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the datatype yaml representation as a string. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#dense&#34;&gt;&lt;code&gt;bool dense ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Indicate if the datatype is dense or not. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#densify&#34;&gt;&lt;code&gt;Datatype_uptr densify ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype as the dense copy of this one. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#destroy_data-void-&#34;&gt;&lt;code&gt;void destroy_data ( void * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Function used to delete the data behind the datatype. &lt;a href=&#34;#destroy_data-void-&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-const-datatype-&#34;&gt;&lt;code&gt;bool operator!= ( const Datatype &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Test for inequality. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-const-datatype-&#34;&gt;&lt;code&gt;bool operator== ( const Datatype &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Test for equality. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#simple&#34;&gt;&lt;code&gt;bool simple ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Tells if data can be copied as bytes (if type is dense) and doesn&#39;t need a destroyer. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#datatype&#34;&gt;&lt;code&gt; ~Datatype ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;alignment&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;alignment&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Returns the required alignment for a type.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the size in bytes&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;buffersize&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;buffersize&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Computes the data size of a type, including potentially unused memory from a sparse type.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the size in bytes&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;clone_type&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;clone_type&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype as an exact copy of this one.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the dense type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;data_from_dense_copy-const-void--void-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;data_from_dense_copy&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const void *&lt;/span&gt; &lt;a href=&#34;#data_from_dense_copy-const-void--void--_-from&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#data_from_dense_copy-const-void--void--_-to&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a sparse deep copy of dense data.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_from_dense_copy-const-void--void--_-from&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the copied data (dense data)&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_from_dense_copy-const-void--void--_-to&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the allocated memory to fill (size of buffersize)&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;updated ‘to’ pointer&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;data_to_dense_copy-const-void--void-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;data_to_dense_copy&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const void *&lt;/span&gt; &lt;a href=&#34;#data_to_dense_copy-const-void--void--_-from&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#data_to_dense_copy-const-void--void--_-to&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a dense deep copy of data.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_to_dense_copy-const-void--void--_-from&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the copied data (size of buffersize)&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_to_dense_copy-const-void--void--_-to&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the allocated memory to fill (dense data)&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;updated ‘to’ pointer&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;datasize&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;datasize&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Computes the data size of a type, excluding potentially unused memory from a sparse type.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the size in bytes&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;debug_string&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::string&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;debug_string&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Returns the datatype yaml representation as a string.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the datatype yaml representation as a string&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;dense&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dense&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Indicate if the datatype is dense or not.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;whether the datatype is dense&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;densify&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;densify&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype as the dense copy of this one.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;destroy_data-void-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;destroy_data&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#destroy_data-void--_-ptr&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ptr&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Function used to delete the data behind the datatype.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;destroy_data-void--_-ptr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ptr&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;to the data to free&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;section class=&#34;description&#34;&gt;
Function used to delete the data behind the datatype.
This should not deallocate the memory.
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-const-datatype-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator!=&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Datatype &amp;amp;&lt;/span&gt; &lt;a href=&#34;#operator-const-datatype--_-other&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Test for inequality.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-const-datatype--_-other&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the &lt;a href=&#34;compound:classPDI_1_1Datatype&#34;&gt;Datatype&lt;/a&gt; to compare&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;true if the &lt;a href=&#34;compound:classPDI_1_1Datatype&#34;&gt;Datatype&lt;/a&gt;&#39;s are different&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-const-datatype-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator==&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Datatype &amp;amp;&lt;/span&gt; &lt;a href=&#34;#operator-const-datatype--_-other&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Test for equality.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-const-datatype--_-other&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the &lt;a href=&#34;compound:classPDI_1_1Datatype&#34;&gt;Datatype&lt;/a&gt; to compare&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;true if the &lt;a href=&#34;compound:classPDI_1_1Datatype&#34;&gt;Datatype&lt;/a&gt;&#39;s are equal&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;simple&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;simple&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Tells if data can be copied as bytes (if type is dense) and doesn&amp;rsquo;t need a destroyer.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;true if data has trivial copier and destroyer, false otherwise&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;datatype&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;~Datatype&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;/article&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Datatype_template class reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/datatype_template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/datatype_template/</guid>
      <description>
        
        
        &lt;h2 id=&#34;member-functions-list&#34;&gt;Member Functions&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#clone&#34;&gt;&lt;code&gt;Datatype_template_uptr clone ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype as an exact copy of this one. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#evaluate-context-&#34;&gt;&lt;code&gt;Datatype_uptr evaluate ( Context &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype by resolving the value of all metadata references. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#load_basic_datatypes-context-&#34;&gt;&lt;code&gt;void load_basic_datatypes ( Context &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Adds to the context the basic Array, Record, C and Fortran datatypes. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#datatype_template&#34;&gt;&lt;code&gt; ~Datatype_template ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Destroys the template. &lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;clone&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_template_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;clone&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype as an exact copy of this one.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the dense type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;evaluate-context-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;evaluate&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Context &amp;amp;&lt;/span&gt; &lt;a href=&#34;#evaluate-context--_-ctx&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype by resolving the value of all metadata references.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;evaluate-context--_-ctx&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the context in which to evaluate this template&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the evaluated type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;load_basic_datatypes-context-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;load_basic_datatypes&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Context &amp;amp;&lt;/span&gt; &lt;a href=&#34;#load_basic_datatypes-context--_-ctx&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Adds to the context the basic Array, Record, C and Fortran datatypes.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;load_basic_datatypes-context--_-ctx&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the context where to add the datatypes&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;datatype_template&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;~Datatype_template&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Destroys the template.&lt;/p&gt;
&lt;/article&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Datatype_template_uptr typedef reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/datatype_template_uptr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/datatype_template_uptr/</guid>
      <description>
        
        
        &lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Datatype_uptr typedef reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/datatype_uptr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/datatype_uptr/</guid>
      <description>
        
        
        &lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Error class reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/error/</guid>
      <description>
        
        
        &lt;h2 id=&#34;member-functions-list&#34;&gt;Member Functions&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#error-const-args--pdi_status_t-const-char-&#34;&gt;&lt;code&gt; Error ( const Args &amp;..., PDI_status_t, const char * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a &lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt; error. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#error-pdi_status_t-const-char-&#34;&gt;&lt;code&gt; Error ( PDI_status_t, const char * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#status&#34;&gt;&lt;code&gt;PDI_status_t status ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#what&#34;&gt;&lt;code&gt;const char * what ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;error-const-args--pdi_status_t-const-char-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Error&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Args &amp;amp;...&lt;/span&gt; &lt;a href=&#34;#error-const-args--pdi_status_t-const-char--_-args&#34;&gt;&lt;var class=&#34;nv&#34;&gt;args&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;PDI_status_t&lt;/span&gt; &lt;a href=&#34;#error-const-args--pdi_status_t-const-char--_-errcode&#34;&gt;&lt;var class=&#34;nv&#34;&gt;errcode&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;const char *&lt;/span&gt; &lt;a href=&#34;#error-const-args--pdi_status_t-const-char--_-fmt&#34;&gt;&lt;var class=&#34;nv&#34;&gt;fmt&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a &lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt; error.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;error-const-args--pdi_status_t-const-char--_-args&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;args&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the python-style parameters for the message&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;error-const-args--pdi_status_t-const-char--_-errcode&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;errcode&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the error code of the error to create&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;error-const-args--pdi_status_t-const-char--_-fmt&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;fmt&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;an errror message as a python-style format&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;error-pdi_status_t-const-char-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Error&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;PDI_status_t&lt;/span&gt; &lt;a href=&#34;#error-pdi_status_t-const-char--_-errcode&#34;&gt;&lt;var class=&#34;nv&#34;&gt;errcode&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;const char *&lt;/span&gt; &lt;a href=&#34;#error-pdi_status_t-const-char--_-fmt&#34;&gt;&lt;var class=&#34;nv&#34;&gt;fmt&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;error-pdi_status_t-const-char--_-errcode&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;errcode&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;error-pdi_status_t-const-char--_-fmt&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;fmt&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;status&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;PDI_status_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;status&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;what&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;const char *&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;what&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;/article&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Expression class reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/expression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/expression/</guid>
      <description>
        
        
        &lt;h2 id=&#34;member-functions-list&#34;&gt;Member Functions&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#expression&#34;&gt;&lt;code&gt; Expression ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Builds an empty expression. &lt;a href=&#34;#expression&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#expression-const-expression-&#34;&gt;&lt;code&gt; Expression ( const Expression &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Copies an expression. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#expression-expression-&#34;&gt;&lt;code&gt; Expression ( Expression &amp;&amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Moves an expression. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#expression-const-char-&#34;&gt;&lt;code&gt; Expression ( const char * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Builds (i.e. &lt;a href=&#34;#expression-const-char-&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#expression-const-stdstring-&#34;&gt;&lt;code&gt; Expression ( const std::string &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Builds (i.e. &lt;a href=&#34;#expression-const-stdstring-&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#expression-long&#34;&gt;&lt;code&gt; Expression ( long )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Builds an expression that represents an integer. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#expression-double&#34;&gt;&lt;code&gt; Expression ( double )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Builds an expression that represents a float. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#expression-pc_tree_t&#34;&gt;&lt;code&gt; Expression ( PC_tree_t )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Builds an expression that is parsed from PC_tree_t. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-bool&#34;&gt;&lt;code&gt; operator bool ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Checks whether this is an empty expression. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-const-expression-&#34;&gt;&lt;code&gt;Expression &amp;amp; operator= ( const Expression &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Copies an expression. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-expression-&#34;&gt;&lt;code&gt;Expression &amp;amp; operator= ( Expression &amp;&amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Moves an expression. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#to_double-context-&#34;&gt;&lt;code&gt;double to_double ( Context &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Evaluates an expression as a float. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#to_long-context-&#34;&gt;&lt;code&gt;long to_long ( Context &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Evaluates an expression as an integer. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#to_ref-context-&#34;&gt;&lt;code&gt;Ref to_ref ( Context &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Evaluates an expression as a data reference. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#to_ref-context--const-datatype-&#34;&gt;&lt;code&gt;Ref to_ref ( Context &amp;, const Datatype &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Evaluates an expression as a data reference. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#to_string-context-&#34;&gt;&lt;code&gt;std::string to_string ( Context &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Evaluates an expression as a string. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#expression&#34;&gt;&lt;code&gt; ~Expression ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Destroys an expression. &lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;expression&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Expression&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Builds an empty expression.&lt;/p&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;section class=&#34;description&#34;&gt;
Builds an empty expression.
No operation can be used on an empty expression, it can only be assigned to
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;expression-const-expression-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Expression&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Expression &amp;amp;&lt;/span&gt; &lt;a href=&#34;#expression-const-expression--_-expr&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expr&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Copies an expression.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;expression-const-expression--_-expr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expr&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the expression to copy&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;expression-expression-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Expression&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Expression &amp;amp;&amp;amp;&lt;/span&gt; &lt;a href=&#34;#expression-expression--_-expr&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expr&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Moves an expression.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;expression-expression--_-expr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expr&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the expression to move&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;expression-const-char-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Expression&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const char *&lt;/span&gt; &lt;a href=&#34;#expression-const-char--_-expr&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expr&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Builds (i.e.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;expression-const-char--_-expr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expr&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the string to parse&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;section class=&#34;description&#34;&gt;
Builds (i.e.
&lt;p&gt;parse) an expression from a string&lt;/p&gt;
&lt;p&gt;The grammar of an expression is as follow:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* parsing as a REFERENCE is preferred over OPERATION
   parsing as an OPERATION is preferred over STRING_LITERAL
*/
EXPRESSION     := REFERENCE | OPERATION | STRING_LITERAL
&lt;p&gt;STRING_LITERAL := ( CHAR | &amp;lsquo;&#39; &amp;lsquo;&#39; | &amp;lsquo;&#39; &amp;lsquo;$&amp;rsquo;
| REFERENCE
| &amp;lsquo;$&amp;rsquo; &amp;lsquo;(&amp;rsquo; OPERATION &amp;lsquo;)&amp;rsquo;
)*&lt;/p&gt;
&lt;p&gt;/* The operator descending precedence order is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;*, /, %: multiplication, division and modulo,&lt;/li&gt;
&lt;li&gt;+, -: addition and subtraction,&lt;/li&gt;
&lt;li&gt;&amp;lt;, &amp;gt;: less than and greater than,&lt;/li&gt;
&lt;li&gt;=: equality,&lt;/li&gt;
&lt;li&gt;&amp;amp;: logical AND,&lt;/li&gt;
&lt;li&gt;|: logical OR.
&lt;em&gt;/
OPERATION      := TERM ( OPERATOR TERM )&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;TERM           := ( INT_LITERAL | REFERENCE | &amp;lsquo;(&amp;rsquo; OPERATION &amp;lsquo;)&amp;rsquo; )&lt;/p&gt;
&lt;p&gt;REFERENCE      := &amp;lsquo;$&amp;rsquo; ( IREFERENCE | &amp;lsquo;{&amp;rsquo; IREFERENCE &amp;lsquo;}&amp;rsquo; )&lt;/p&gt;
&lt;p&gt;IREFERENCE     := ID ( &amp;lsquo;[&amp;rsquo; OPERATION &amp;lsquo;]&amp;rsquo; )*&lt;/p&gt;
&lt;p&gt;INT_LITERAL ~= (0x)? [0-9]+ ( .  )
ID          ~= [a-zA-Z_][a-zA-Z0-9_]*
CHAR        ~= [^$\]
OPERATOR    ~= [|&amp;amp;=&amp;lt;&amp;gt;+-*/%]
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;expression-const-stdstring-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Expression&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const std::string &amp;amp;&lt;/span&gt; &lt;a href=&#34;#expression-const-stdstring--_-expr&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expr&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Builds (i.e.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;expression-const-stdstring--_-expr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expr&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the string to parse&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;section class=&#34;description&#34;&gt;
Builds (i.e.
&lt;p&gt;parse) an expression from a string&lt;/p&gt;
&lt;p&gt;The grammar of an expression is as follow:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* parsing as a REFERENCE is preferred over OPERATION
   parsing as an OPERATION is preferred over STRING_LITERAL
*/
EXPRESSION     := REFERENCE | OPERATION | STRING_LITERAL
&lt;p&gt;STRING_LITERAL := ( CHAR | &amp;lsquo;&#39; &amp;lsquo;&#39; | &amp;lsquo;&#39; &amp;lsquo;$&amp;rsquo;
| REFERENCE
| &amp;lsquo;$&amp;rsquo; &amp;lsquo;(&amp;rsquo; OPERATION &amp;lsquo;)&amp;rsquo;
)*&lt;/p&gt;
&lt;p&gt;/* The operator descending precedence order is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;*, /, %: multiplication, division and modulo,&lt;/li&gt;
&lt;li&gt;+, -: addition and subtraction,&lt;/li&gt;
&lt;li&gt;&amp;lt;, &amp;gt;: less than and greater than,&lt;/li&gt;
&lt;li&gt;=: equality,&lt;/li&gt;
&lt;li&gt;&amp;amp;: logical AND,&lt;/li&gt;
&lt;li&gt;|: logical OR.
&lt;em&gt;/
OPERATION      := TERM ( OPERATOR TERM )&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;TERM           := ( INT_LITERAL | REFERENCE | &amp;lsquo;(&amp;rsquo; OPERATION &amp;lsquo;)&amp;rsquo; )&lt;/p&gt;
&lt;p&gt;REFERENCE      := &amp;lsquo;$&amp;rsquo; ( IREFERENCE | &amp;lsquo;{&amp;rsquo; IREFERENCE &amp;lsquo;}&amp;rsquo; )&lt;/p&gt;
&lt;p&gt;IREFERENCE     := ID ( &amp;lsquo;[&amp;rsquo; OPERATION &amp;lsquo;]&amp;rsquo; )*&lt;/p&gt;
&lt;p&gt;INT_LITERAL ~= (0x)? [0-9]+ ( .  )
ID          ~= [a-zA-Z_][a-zA-Z0-9_]*
CHAR        ~= [^$\]
OPERATOR    ~= [|&amp;amp;=&amp;lt;&amp;gt;+-*/%]
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;expression-long&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Expression&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;a href=&#34;#expression-long-_-expr&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expr&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Builds an expression that represents an integer.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;expression-long-_-expr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expr&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the integer value&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;expression-double&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Expression&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;a href=&#34;#expression-double-_-expr&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expr&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Builds an expression that represents a float.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;expression-double-_-expr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expr&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the flaot value&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;expression-pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Expression&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#expression-pc_tree_t-_-expr&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expr&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Builds an expression that is parsed from PC_tree_t.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;expression-pc_tree_t-_-expr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expr&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the PC_tree_t value&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-bool&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator bool&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Checks whether this is an empty expression.&lt;/p&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-const-expression-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Expression &amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator=&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Expression &amp;amp;&lt;/span&gt; &lt;a href=&#34;#operator-const-expression--_-expr&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expr&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Copies an expression.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-const-expression--_-expr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expr&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the expression to copy&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;*this&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-expression-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Expression &amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator=&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Expression &amp;amp;&amp;amp;&lt;/span&gt; &lt;a href=&#34;#operator-expression--_-expr&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expr&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Moves an expression.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-expression--_-expr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expr&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the expression to move`&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;*this&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;to_double-context-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to_double&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Context &amp;amp;&lt;/span&gt; &lt;a href=&#34;#to_double-context--_-ctx&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Evaluates an expression as a float.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;to_double-context--_-ctx&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the float value&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;to_long-context-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to_long&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Context &amp;amp;&lt;/span&gt; &lt;a href=&#34;#to_long-context--_-ctx&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Evaluates an expression as an integer.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;to_long-context--_-ctx&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the integer value&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;to_ref-context-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Ref&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to_ref&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Context &amp;amp;&lt;/span&gt; &lt;a href=&#34;#to_ref-context--_-ctx&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Evaluates an expression as a data reference.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;to_ref-context--_-ctx&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the context in which to evaluate the expression&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the data reference&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;to_ref-context--const-datatype-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Ref&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to_ref&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Context &amp;amp;&lt;/span&gt; &lt;a href=&#34;#to_ref-context--const-datatype--_-ctx&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;const Datatype &amp;amp;&lt;/span&gt; &lt;a href=&#34;#to_ref-context--const-datatype--_-type&#34;&gt;&lt;var class=&#34;nv&#34;&gt;type&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Evaluates an expression as a data reference.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;to_ref-context--const-datatype--_-ctx&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the context in which to evaluate the expression&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;to_ref-context--const-datatype--_-type&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;type&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the type of the created Ref&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the data reference&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;to_string-context-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::string&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to_string&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Context &amp;amp;&lt;/span&gt; &lt;a href=&#34;#to_string-context--_-ctx&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Evaluates an expression as a string.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;to_string-context--_-ctx&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the string value&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;expression&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;~Expression&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Destroys an expression.&lt;/p&gt;
&lt;/article&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Logger_sptr typedef reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/logger_sptr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/logger_sptr/</guid>
      <description>
        
        
        &lt;p&gt;A shared pointer to a logger instance.&lt;/p&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Paraconf_wrapper struct reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/paraconf_wrapper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/paraconf_wrapper/</guid>
      <description>
        
        
        &lt;p&gt;Automatically installs a paraconf error-handler that ignores errors and uninstalls it on destruction.&lt;/p&gt;
&lt;h2 id=&#34;member-functions-list&#34;&gt;Member Functions&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#paraconf_wrapper&#34;&gt;&lt;code&gt; Paraconf_wrapper ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#paraconf_wrapper&#34;&gt;&lt;code&gt; ~Paraconf_wrapper ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;paraconf_wrapper&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Paraconf_wrapper&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;paraconf_wrapper&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;~Paraconf_wrapper&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;/article&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Plugin class reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/plugin/</guid>
      <description>
        
        
        &lt;p&gt;The class &lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt; plugins should implement.&lt;/p&gt;
&lt;h2 id=&#34;member-functions-list&#34;&gt;Member Functions&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#plugin-const-plugin-&#34;&gt;&lt;code&gt; Plugin ( const Plugin &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#plugin-plugin-&#34;&gt;&lt;code&gt; Plugin ( Plugin &amp;&amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#plugin-context-&#34;&gt;&lt;code&gt; Plugin ( Context &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Initialization of the plugin. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#context&#34;&gt;&lt;code&gt;Context &amp;amp; context ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Provides access to the &lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt; context for this plugin instance. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#plugin&#34;&gt;&lt;code&gt; ~Plugin ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;plugin-const-plugin-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Plugin&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Plugin &amp;amp;&lt;/span&gt; &lt;a href=&#34;#plugin-const-plugin--_-&#34;&gt;&lt;var class=&#34;nv&#34;&gt;&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;plugin-const-plugin--_-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;plugin-plugin-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Plugin&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Plugin &amp;amp;&amp;amp;&lt;/span&gt; &lt;a href=&#34;#plugin-plugin--_-&#34;&gt;&lt;var class=&#34;nv&#34;&gt;&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;plugin-plugin--_-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;plugin-context-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Plugin&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Context &amp;amp;&lt;/span&gt; &lt;a href=&#34;#plugin-context--_-ctx&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Initialization of the plugin.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;plugin-context--_-ctx&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the &lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt; context for this plugin instance&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;context&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Context &amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;context&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Provides access to the &lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt; context for this plugin instance.&lt;/p&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;plugin&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;~Plugin&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;/article&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Pointer_datatype class reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/pointer_datatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/pointer_datatype/</guid>
      <description>
        
        
        &lt;h2 id=&#34;member-functions-list&#34;&gt;Member Functions&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#pointer_datatype-datatype_uptr&#34;&gt;&lt;code&gt; Pointer_datatype ( Datatype_uptr )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#pointer_datatype-stdfunction-void-void--const-void--stdfunction-voidvoid--datatype_uptr&#34;&gt;&lt;code&gt; Pointer_datatype ( std::function&lt; void *(void *, const void *)&gt;, std::function&lt; void(void *)&gt;, Datatype_uptr )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#alignment&#34;&gt;&lt;code&gt;size_t alignment ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the required alignment for a type. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#buffersize&#34;&gt;&lt;code&gt;size_t buffersize ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Computes the data size of a type, including potentially unused memory from a sparse type. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#clone&#34;&gt;&lt;code&gt;Datatype_template_uptr clone ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype as an exact copy of this one. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#clone_type&#34;&gt;&lt;code&gt;Datatype_uptr clone_type ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype as an exact copy of this one. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#data_from_dense_copy-const-void--void-&#34;&gt;&lt;code&gt;void * data_from_dense_copy ( const void *, void * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a sparse deep copy of dense data. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#data_to_dense_copy-const-void--void-&#34;&gt;&lt;code&gt;void * data_to_dense_copy ( const void *, void * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a dense deep copy of data. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#datasize&#34;&gt;&lt;code&gt;size_t datasize ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Computes the data size of a type, excluding potentially unused memory from a sparse type. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#debug_string&#34;&gt;&lt;code&gt;std::string debug_string ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the datatype yaml representation as a string. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#dense&#34;&gt;&lt;code&gt;bool dense ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Indicate if the datatype is dense or not. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#densify&#34;&gt;&lt;code&gt;Datatype_uptr densify ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype as the dense copy of this one. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#dereference&#34;&gt;&lt;code&gt;Datatype_uptr dereference ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#destroy_data-void-&#34;&gt;&lt;code&gt;void destroy_data ( void * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Function used to delete the data behind the datatype. &lt;a href=&#34;#destroy_data-void-&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#evaluate-context-&#34;&gt;&lt;code&gt;Datatype_uptr evaluate ( Context &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype by resolving the value of all metadata references. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-const-datatype-&#34;&gt;&lt;code&gt;bool operator== ( const Datatype &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Test for equality. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#simple&#34;&gt;&lt;code&gt;bool simple ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Tells if data can be copied as bytes (if type is dense) and doesn&#39;t need a destroyer. &lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;pointer_datatype-datatype_uptr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Pointer_datatype&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;a href=&#34;#pointer_datatype-datatype_uptr-_-subtype&#34;&gt;&lt;var class=&#34;nv&#34;&gt;subtype&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;pointer_datatype-datatype_uptr-_-subtype&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;subtype&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;pointer_datatype-stdfunction-void-void--const-void--stdfunction-voidvoid--datatype_uptr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Pointer_datatype&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void *(void *, const void *)&amp;gt;&lt;/span&gt; &lt;a href=&#34;#pointer_datatype-stdfunction-void-void--const-void--stdfunction-voidvoid--datatype_uptr-_-copy&#34;&gt;&lt;var class=&#34;nv&#34;&gt;copy&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void(void *)&amp;gt;&lt;/span&gt; &lt;a href=&#34;#pointer_datatype-stdfunction-void-void--const-void--stdfunction-voidvoid--datatype_uptr-_-destroy&#34;&gt;&lt;var class=&#34;nv&#34;&gt;destroy&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;a href=&#34;#pointer_datatype-stdfunction-void-void--const-void--stdfunction-voidvoid--datatype_uptr-_-subtype&#34;&gt;&lt;var class=&#34;nv&#34;&gt;subtype&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;pointer_datatype-stdfunction-void-void--const-void--stdfunction-voidvoid--datatype_uptr-_-copy&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;copy&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;pointer_datatype-stdfunction-void-void--const-void--stdfunction-voidvoid--datatype_uptr-_-destroy&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;destroy&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;pointer_datatype-stdfunction-void-void--const-void--stdfunction-voidvoid--datatype_uptr-_-subtype&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;subtype&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;alignment&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;alignment&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Returns the required alignment for a type.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the size in bytes&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;buffersize&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;buffersize&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Computes the data size of a type, including potentially unused memory from a sparse type.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the size in bytes&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;clone&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_template_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;clone&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype as an exact copy of this one.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the dense type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;clone_type&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;clone_type&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype as an exact copy of this one.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the dense type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;data_from_dense_copy-const-void--void-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;data_from_dense_copy&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const void *&lt;/span&gt; &lt;a href=&#34;#data_from_dense_copy-const-void--void--_-from&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#data_from_dense_copy-const-void--void--_-to&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a sparse deep copy of dense data.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_from_dense_copy-const-void--void--_-from&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the copied data (dense data)&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_from_dense_copy-const-void--void--_-to&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the allocated memory to fill (size of buffersize)&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;updated ‘to’ pointer&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;data_to_dense_copy-const-void--void-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;data_to_dense_copy&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const void *&lt;/span&gt; &lt;a href=&#34;#data_to_dense_copy-const-void--void--_-from&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#data_to_dense_copy-const-void--void--_-to&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a dense deep copy of data.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_to_dense_copy-const-void--void--_-from&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the copied data (size of buffersize)&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_to_dense_copy-const-void--void--_-to&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the allocated memory to fill (dense data)&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;updated ‘to’ pointer&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;datasize&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;datasize&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Computes the data size of a type, excluding potentially unused memory from a sparse type.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the size in bytes&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;debug_string&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::string&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;debug_string&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Returns the datatype yaml representation as a string.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the datatype yaml representation as a string&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;dense&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dense&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Indicate if the datatype is dense or not.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;whether the datatype is dense&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;densify&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;densify&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype as the dense copy of this one.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;dereference&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dereference&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;destroy_data-void-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;destroy_data&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#destroy_data-void--_-ptr&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ptr&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Function used to delete the data behind the datatype.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;destroy_data-void--_-ptr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ptr&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;to the data to free&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;section class=&#34;description&#34;&gt;
Function used to delete the data behind the datatype.
This should not deallocate the memory.
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;evaluate-context-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;evaluate&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Context &amp;amp;&lt;/span&gt; &lt;a href=&#34;#evaluate-context--_-ctx&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype by resolving the value of all metadata references.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;evaluate-context--_-ctx&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the context in which to evaluate this template&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the evaluated type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-const-datatype-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator==&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Datatype &amp;amp;&lt;/span&gt; &lt;a href=&#34;#operator-const-datatype--_-other&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Test for equality.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-const-datatype--_-other&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the &lt;a href=&#34;compound:classPDI_1_1Datatype&#34;&gt;Datatype&lt;/a&gt; to compare&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;true if the &lt;a href=&#34;compound:classPDI_1_1Datatype&#34;&gt;Datatype&lt;/a&gt;&#39;s are equal&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;simple&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;simple&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Tells if data can be copied as bytes (if type is dense) and doesn&amp;rsquo;t need a destroyer.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;true if data has trivial copier and destroyer, false otherwise&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Record_datatype class reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/record_datatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/record_datatype/</guid>
      <description>
        
        
        &lt;p&gt;A &lt;a href=&#34;compound:classPDI_1_1Record__datatype&#34;&gt;Record_datatype&lt;/a&gt; is a &lt;a href=&#34;compound:classPDI_1_1Datatype&#34;&gt;Datatype&lt;/a&gt; that represents a fixed number of elements of potentially different types layed out in a specific way in memory.&lt;/p&gt;
&lt;p&gt;Each element is given a name to access it.&lt;/p&gt;
&lt;h2 id=&#34;member-types-list&#34;&gt;Member Types&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;member&#34;&gt;&lt;code&gt;class Member&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A [Member]( &amp;lt;compound:classPDI_1_1Record__datatype_1_1Member&amp;gt; ) is one of the elements inside a [Record\_datatype]( &amp;lt;compound:classPDI_1_1Record__datatype&amp;gt; )\.
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;member-functions-list&#34;&gt;Member Functions&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#record_datatype-stdvector-member---size_t&#34;&gt;&lt;code&gt; Record_datatype ( std::vector&lt; Member &gt; &amp;&amp;, size_t )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Constructs a new &lt;a href=&#34;compound:classPDI_1_1Record__datatype&#34;&gt;Record_datatype&lt;/a&gt;. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#alignment&#34;&gt;&lt;code&gt;size_t alignment ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the required alignment for a type. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#buffersize&#34;&gt;&lt;code&gt;size_t buffersize ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Computes the data size of a type, including potentially unused memory from a sparse type. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#clone&#34;&gt;&lt;code&gt;Datatype_template_uptr clone ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype as an exact copy of this one. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#clone_type&#34;&gt;&lt;code&gt;Datatype_uptr clone_type ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype as an exact copy of this one. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#data_from_dense_copy-const-void--void-&#34;&gt;&lt;code&gt;void * data_from_dense_copy ( const void *, void * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a sparse deep copy of dense data. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#data_to_dense_copy-const-void--void-&#34;&gt;&lt;code&gt;void * data_to_dense_copy ( const void *, void * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a dense deep copy of data. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#datasize&#34;&gt;&lt;code&gt;size_t datasize ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Computes the data size of a type, excluding potentially unused memory from a sparse type. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#debug_string&#34;&gt;&lt;code&gt;std::string debug_string ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the datatype yaml representation as a string. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#dense&#34;&gt;&lt;code&gt;bool dense ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Indicate if the datatype is dense or not. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#densify&#34;&gt;&lt;code&gt;Datatype_uptr densify ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype as the dense copy of this one. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#destroy_data-void-&#34;&gt;&lt;code&gt;void destroy_data ( void * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Function used to delete the data behind the datatype. &lt;a href=&#34;#destroy_data-void-&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#evaluate-context-&#34;&gt;&lt;code&gt;Datatype_uptr evaluate ( Context &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype by resolving the value of all metadata references. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#members&#34;&gt;&lt;code&gt;const std::vector&amp;lt; Member &amp;gt; &amp;amp; members ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Accesses the members in increasing displacement order. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-const-datatype-&#34;&gt;&lt;code&gt;bool operator== ( const Datatype &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Test for equality. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#simple&#34;&gt;&lt;code&gt;bool simple ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Tells if data can be copied as bytes (if type is dense) and doesn&#39;t need a destroyer. &lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;record_datatype-stdvector-member---size_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Record_datatype&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;std::vector&amp;lt; Member &amp;gt; &amp;amp;&amp;amp;&lt;/span&gt; &lt;a href=&#34;#record_datatype-stdvector-member---size_t-_-members&#34;&gt;&lt;var class=&#34;nv&#34;&gt;members&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;a href=&#34;#record_datatype-stdvector-member---size_t-_-size&#34;&gt;&lt;var class=&#34;nv&#34;&gt;size&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Constructs a new &lt;a href=&#34;compound:classPDI_1_1Record__datatype&#34;&gt;Record_datatype&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;record_datatype-stdvector-member---size_t-_-members&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;members&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the members for the newly created &lt;a href=&#34;compound:classPDI_1_1Record__datatype&#34;&gt;Record_datatype&lt;/a&gt; in increasing displacement order&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;record_datatype-stdvector-member---size_t-_-size&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;size&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the total size of the buffer containing all members&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;alignment&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;alignment&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Returns the required alignment for a type.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the size in bytes&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;buffersize&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;buffersize&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Computes the data size of a type, including potentially unused memory from a sparse type.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the size in bytes&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;clone&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_template_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;clone&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype as an exact copy of this one.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the dense type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;clone_type&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;clone_type&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype as an exact copy of this one.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the dense type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;data_from_dense_copy-const-void--void-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;data_from_dense_copy&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const void *&lt;/span&gt; &lt;a href=&#34;#data_from_dense_copy-const-void--void--_-from&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#data_from_dense_copy-const-void--void--_-to&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a sparse deep copy of dense data.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_from_dense_copy-const-void--void--_-from&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the copied data (dense data)&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_from_dense_copy-const-void--void--_-to&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the allocated memory to fill (size of buffersize)&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;updated ‘to’ pointer&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;data_to_dense_copy-const-void--void-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;data_to_dense_copy&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const void *&lt;/span&gt; &lt;a href=&#34;#data_to_dense_copy-const-void--void--_-from&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#data_to_dense_copy-const-void--void--_-to&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a dense deep copy of data.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_to_dense_copy-const-void--void--_-from&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the copied data (size of buffersize)&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_to_dense_copy-const-void--void--_-to&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the allocated memory to fill (dense data)&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;updated ‘to’ pointer&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;datasize&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;datasize&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Computes the data size of a type, excluding potentially unused memory from a sparse type.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the size in bytes&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;debug_string&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::string&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;debug_string&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Returns the datatype yaml representation as a string.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the datatype yaml representation as a string&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;dense&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dense&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Indicate if the datatype is dense or not.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;whether the datatype is dense&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;densify&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;densify&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype as the dense copy of this one.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;destroy_data-void-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;destroy_data&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#destroy_data-void--_-ptr&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ptr&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Function used to delete the data behind the datatype.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;destroy_data-void--_-ptr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ptr&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;to the data to free&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;section class=&#34;description&#34;&gt;
Function used to delete the data behind the datatype.
This should not deallocate the memory.
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;evaluate-context-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;evaluate&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Context &amp;amp;&lt;/span&gt; &lt;a href=&#34;#evaluate-context--_-ctx&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype by resolving the value of all metadata references.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;evaluate-context--_-ctx&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the context in which to evaluate this template&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the evaluated type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;members&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;const std::vector&amp;lt; Member &amp;gt; &amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;members&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Accesses the members in increasing displacement order.&lt;/p&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-const-datatype-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator==&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Datatype &amp;amp;&lt;/span&gt; &lt;a href=&#34;#operator-const-datatype--_-other&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Test for equality.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-const-datatype--_-other&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the &lt;a href=&#34;compound:classPDI_1_1Datatype&#34;&gt;Datatype&lt;/a&gt; to compare&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;true if the &lt;a href=&#34;compound:classPDI_1_1Datatype&#34;&gt;Datatype&lt;/a&gt;&#39;s are equal&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;simple&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;simple&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Tells if data can be copied as bytes (if type is dense) and doesn&amp;rsquo;t need a destroyer.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;true if data has trivial copier and destroyer, false otherwise&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Ref typedef reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/ref/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/ref/</guid>
      <description>
        
        
        &lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Ref_any class reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/ref_any/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/ref_any/</guid>
      <description>
        
        
        &lt;p&gt;A dynamically typed reference to data with automatic memory management and read/write locking semantic.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;compound:classPDI_1_1Ref__any&#34;&gt;Ref_any&lt;/a&gt; is a smart pointer that features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a dynamic type system,&lt;/li&gt;
&lt;li&gt;garbage collection mechanism similar to std::shared_ptr,&lt;/li&gt;
&lt;li&gt;a read/write locking mechanism similar to std::shared_mutex,&lt;/li&gt;
&lt;li&gt;a release system that nullifies all existing references to the raw data,&lt;/li&gt;
&lt;li&gt;a notification system to be notified when a reference is going to be nullified.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;{{% alert %}}
As of now, and unlike std::shared_ptr, the lock system can not be relied upon in a multithreaded environment.
{{% /alert %}}&lt;/p&gt;
&lt;h2 id=&#34;member-functions-list&#34;&gt;Member Functions&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#ref_any&#34;&gt;&lt;code&gt; Ref_any ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Constructs a null reference. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#ref_any-const-ref_any-&#34;&gt;&lt;code&gt; Ref_any ( const Ref_any &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Copies an existing reference. &lt;a href=&#34;#ref_any-const-ref_any-&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#ref_any-const-ref_any-or-ow--&#34;&gt;&lt;code&gt; Ref_any ( const Ref_any&lt; OR, OW &gt; &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Copies an existing reference with different privileges. &lt;a href=&#34;#ref_any-const-ref_any-or-ow--&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#ref_any-ref_any-&#34;&gt;&lt;code&gt; Ref_any ( Ref_any &amp;&amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Moves an existing reference. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#ref_any-void--stdfunction-voidvoid--bool-datatype_uptr-bool&#34;&gt;&lt;code&gt; Ref_any ( void *, std::function&lt; void(void *)&gt;, bool, Datatype_uptr, bool )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a reference to currently unreferenced data. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#ref_any-size_t-ref-datatype_uptr&#34;&gt;&lt;code&gt; Ref_any ( size_t, Ref, Datatype_uptr )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a subreference from reference. &lt;a href=&#34;#ref_any-size_t-ref-datatype_uptr&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#copy&#34;&gt;&lt;code&gt;Ref copy ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Makes a copy of the raw content behind this reference and returns a new reference. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#get&#34;&gt;&lt;code&gt;Ref_access&amp;lt; R, W &amp;gt;::type get ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Offers access to the referenced raw data, throws on null references. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#get-stdnothrow_t&#34;&gt;&lt;code&gt;Ref_access&amp;lt; R, W &amp;gt;::type get ( std::nothrow_t )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Offers access to the referenced raw data, returns null for null references. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#on_nullify-stdfunction-voidref&#34;&gt;&lt;code&gt;void on_nullify ( std::function&lt; void(Ref)&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Registers a nullification callback. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-bool&#34;&gt;&lt;code&gt; operator bool ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Checks whether this is a null reference. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-typename-ref_access-r-w-type&#34;&gt;&lt;code&gt; operator typename Ref_access&amp;lt; R, W &amp;gt;::type ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Offers access to the referenced raw data. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-const-reference_base-&#34;&gt;&lt;code&gt;bool operator!= ( const Reference_base &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-const-reference_base-&#34;&gt;&lt;code&gt;bool operator&amp;lt; ( const Reference_base &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-const-reference_base-&#34;&gt;&lt;code&gt;bool operator&amp;lt;= ( const Reference_base &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-ref_any-&#34;&gt;&lt;code&gt;Ref_any &amp;amp; operator= ( Ref_any &amp;&amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-const-ref_any-&#34;&gt;&lt;code&gt;Ref_any &amp;amp; operator= ( const Ref_any &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-const-reference_base-&#34;&gt;&lt;code&gt;bool operator== ( const Reference_base &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-const-reference_base-&#34;&gt;&lt;code&gt;bool operator&amp;gt; ( const Reference_base &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-const-reference_base-&#34;&gt;&lt;code&gt;bool operator&amp;gt;= ( const Reference_base &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#release&#34;&gt;&lt;code&gt;void * release ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Releases ownership of the referenced raw data by nullifying all existing references. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#reset&#34;&gt;&lt;code&gt;void reset ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Nullify the reference. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#ref_any&#34;&gt;&lt;code&gt; ~Ref_any ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Destructor. &lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;ref_any&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Ref_any&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Constructs a null reference.&lt;/p&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;ref_any-const-ref_any-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Ref_any&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Ref_any &amp;amp;&lt;/span&gt; &lt;a href=&#34;#ref_any-const-ref_any--_-other&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Copies an existing reference.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;ref_any-const-ref_any--_-other&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the ref to copy&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;section class=&#34;description&#34;&gt;
Copies an existing reference.
if the requested rights can not be granted, the reference is made null
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;ref_any-const-ref_any-or-ow--&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Ref_any&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Ref_any&amp;lt; OR, OW &amp;gt; &amp;amp;&lt;/span&gt; &lt;a href=&#34;#ref_any-const-ref_any-or-ow---_-other&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Copies an existing reference with different privileges.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;ref_any-const-ref_any-or-ow---_-other&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the ref to copy&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;section class=&#34;description&#34;&gt;
Copies an existing reference with different privileges.
if the requested rights can not be granted, the reference is made null
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;ref_any-ref_any-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Ref_any&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Ref_any &amp;amp;&amp;amp;&lt;/span&gt; &lt;a href=&#34;#ref_any-ref_any--_-other&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Moves an existing reference.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;ref_any-ref_any--_-other&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the ref to copy&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;ref_any-void--stdfunction-voidvoid--bool-datatype_uptr-bool&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Ref_any&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#ref_any-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-data&#34;&gt;&lt;var class=&#34;nv&#34;&gt;data&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void(void *)&amp;gt;&lt;/span&gt; &lt;a href=&#34;#ref_any-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-freefunc&#34;&gt;&lt;var class=&#34;nv&#34;&gt;freefunc&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;a href=&#34;#ref_any-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-readable&#34;&gt;&lt;var class=&#34;nv&#34;&gt;readable&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;a href=&#34;#ref_any-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-type&#34;&gt;&lt;var class=&#34;nv&#34;&gt;type&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;a href=&#34;#ref_any-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-writable&#34;&gt;&lt;var class=&#34;nv&#34;&gt;writable&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a reference to currently unreferenced data.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;ref_any-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-data&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;data&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the raw data to reference&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;ref_any-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-freefunc&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;freefunc&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the function to use to free the data buffer&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;ref_any-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-readable&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;readable&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the maximum allowed access to the underlying content&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;ref_any-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-type&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;type&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the type of the referenced data, ownership will be taken&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;ref_any-void--stdfunction-voidvoid--bool-datatype_uptr-bool-_-writable&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;writable&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the maximum allowed access to the underlying content&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;ref_any-size_t-ref-datatype_uptr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Ref_any&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;a href=&#34;#ref_any-size_t-ref-datatype_uptr-_-offset&#34;&gt;&lt;var class=&#34;nv&#34;&gt;offset&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;Ref&lt;/span&gt; &lt;a href=&#34;#ref_any-size_t-ref-datatype_uptr-_-other&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;a href=&#34;#ref_any-size_t-ref-datatype_uptr-_-type&#34;&gt;&lt;var class=&#34;nv&#34;&gt;type&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a subreference from reference.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;ref_any-size_t-ref-datatype_uptr-_-offset&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;offset&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;_dataoffset of the new memory address&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;ref_any-size_t-ref-datatype_uptr-_-other&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;source reference&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;ref_any-size_t-ref-datatype_uptr-_-type&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;type&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the type of the subreferenced data&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;section class=&#34;description&#34;&gt;
Creates a subreference from reference.
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;copy&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Ref&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;copy&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Makes a copy of the raw content behind this reference and returns a new reference.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;a new reference to a copy of the raw data this references&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;get&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Ref_access&amp;lt; R, W &amp;gt;::type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Offers access to the referenced raw data, throws on null references.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;a pointer to the referenced raw data&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;get-stdnothrow_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Ref_access&amp;lt; R, W &amp;gt;::type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;std::nothrow_t&lt;/span&gt; &lt;a href=&#34;#get-stdnothrow_t-_-&#34;&gt;&lt;var class=&#34;nv&#34;&gt;&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Offers access to the referenced raw data, returns null for null references.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;get-stdnothrow_t-_-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;a pointer to the referenced raw data&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;on_nullify-stdfunction-voidref&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;on_nullify&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void(Ref)&amp;gt;&lt;/span&gt; &lt;a href=&#34;#on_nullify-stdfunction-voidref-_-notifier&#34;&gt;&lt;var class=&#34;nv&#34;&gt;notifier&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Registers a nullification callback.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;on_nullify-stdfunction-voidref-_-notifier&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;notifier&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the function to call when this reference becomes null&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-bool&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator bool&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Checks whether this is a null reference.&lt;/p&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-typename-ref_access-r-w-type&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator typename Ref_access&amp;lt; R, W &amp;gt;::type&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Offers access to the referenced raw data.&lt;/p&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-const-reference_base-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator!=&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Reference_base &amp;amp;&lt;/span&gt; &lt;a href=&#34;#operator-const-reference_base--_-o&#34;&gt;&lt;var class=&#34;nv&#34;&gt;o&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-const-reference_base--_-o&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;o&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-const-reference_base-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator&amp;lt;&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Reference_base &amp;amp;&lt;/span&gt; &lt;a href=&#34;#operator-const-reference_base--_-o&#34;&gt;&lt;var class=&#34;nv&#34;&gt;o&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-const-reference_base--_-o&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;o&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-const-reference_base-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator&amp;lt;=&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Reference_base &amp;amp;&lt;/span&gt; &lt;a href=&#34;#operator-const-reference_base--_-o&#34;&gt;&lt;var class=&#34;nv&#34;&gt;o&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-const-reference_base--_-o&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;o&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-ref_any-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Ref_any &amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator=&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Ref_any &amp;amp;&amp;amp;&lt;/span&gt; &lt;a href=&#34;#operator-ref_any--_-other&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-ref_any--_-other&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-const-ref_any-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Ref_any &amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator=&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Ref_any &amp;amp;&lt;/span&gt; &lt;a href=&#34;#operator-const-ref_any--_-other&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-const-ref_any--_-other&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-const-reference_base-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator==&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Reference_base &amp;amp;&lt;/span&gt; &lt;a href=&#34;#operator-const-reference_base--_-o&#34;&gt;&lt;var class=&#34;nv&#34;&gt;o&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-const-reference_base--_-o&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;o&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-const-reference_base-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator&amp;gt;&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Reference_base &amp;amp;&lt;/span&gt; &lt;a href=&#34;#operator-const-reference_base--_-o&#34;&gt;&lt;var class=&#34;nv&#34;&gt;o&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-const-reference_base--_-o&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;o&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-const-reference_base-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator&amp;gt;=&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Reference_base &amp;amp;&lt;/span&gt; &lt;a href=&#34;#operator-const-reference_base--_-o&#34;&gt;&lt;var class=&#34;nv&#34;&gt;o&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-const-reference_base--_-o&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;o&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;release&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;release&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Releases ownership of the referenced raw data by nullifying all existing references.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the previously referenced raw data or nullptr if this was a null reference, i.e. the value which would be returned by &lt;a href=&#34;member:classPDI_1_1Ref__any_1ad8d6851233a405e0e1c27d2e762c6cb9&#34;&gt;get()&lt;/a&gt; before the call.&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;reset&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;reset&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Nullify the reference.&lt;/p&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;ref_any&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;~Ref_any&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Destructor.&lt;/p&gt;
&lt;/article&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Ref_r typedef reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/ref_r/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/ref_r/</guid>
      <description>
        
        
        &lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Ref_rw typedef reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/ref_rw/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/ref_rw/</guid>
      <description>
        
        
        &lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Ref_w typedef reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/ref_w/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/ref_w/</guid>
      <description>
        
        
        &lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Reference_base class reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/reference_base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/reference_base/</guid>
      <description>
        
        
        &lt;p&gt;A common base for all references, whatever their access privileges.&lt;/p&gt;
&lt;p&gt;This ensure all reference, even with different type because of differing access privileges, can access the content at this level in each other.&lt;/p&gt;
&lt;h2 id=&#34;member-types-list&#34;&gt;Member Types&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;referenced_buffer&#34;&gt;&lt;code&gt;struct Referenced_buffer&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A descriptor for a buffer in which references can point\.
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;referenced_data&#34;&gt;&lt;code&gt;struct Referenced_data&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A descriptor for data on which references can point\.
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;member-functions-list&#34;&gt;Member Functions&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#hash&#34;&gt;&lt;code&gt;size_t hash ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#type&#34;&gt;&lt;code&gt;const Datatype &amp;amp; type ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;accesses the type of the referenced raw data &lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;hash&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hash&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;type&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;const Datatype &amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;type&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;accesses the type of the referenced raw data&lt;/p&gt;
&lt;/article&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Scalar_datatype class reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/scalar_datatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/scalar_datatype/</guid>
      <description>
        
        
        &lt;h2 id=&#34;member-functions-list&#34;&gt;Member Functions&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#scalar_datatype-scalar_kind-size_t&#34;&gt;&lt;code&gt; Scalar_datatype ( Scalar_kind, size_t )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#scalar_datatype-size_t-scalar_kind-size_t&#34;&gt;&lt;code&gt; Scalar_datatype ( size_t, Scalar_kind, size_t )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#scalar_datatype-size_t-stdfunction-void-void--const-void--size_t-stdfunction-voidvoid--scalar_kind-size_t&#34;&gt;&lt;code&gt; Scalar_datatype ( size_t, std::function&lt; void *(void *, const void *)&gt;, size_t, std::function&lt; void(void *)&gt;, Scalar_kind, size_t )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href=&#34;#alignment&#34;&gt;&lt;code&gt;size_t alignment ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the required alignment for a type. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#buffersize&#34;&gt;&lt;code&gt;size_t buffersize ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Computes the data size of a type, including potentially unused memory from a sparse type. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#clone&#34;&gt;&lt;code&gt;Datatype_template_uptr clone ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype as an exact copy of this one. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#clone_type&#34;&gt;&lt;code&gt;Datatype_uptr clone_type ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype as an exact copy of this one. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#data_from_dense_copy-const-void--void-&#34;&gt;&lt;code&gt;void * data_from_dense_copy ( const void *, void * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a sparse deep copy of dense data. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#data_to_dense_copy-const-void--void-&#34;&gt;&lt;code&gt;void * data_to_dense_copy ( const void *, void * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a dense deep copy of data. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#datasize&#34;&gt;&lt;code&gt;size_t datasize ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Computes the data size of a type, excluding potentially unused memory from a sparse type. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#debug_string&#34;&gt;&lt;code&gt;std::string debug_string ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the datatype yaml representation as a string. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#dense&#34;&gt;&lt;code&gt;bool dense ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Indicate if the datatype is dense or not. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#densify&#34;&gt;&lt;code&gt;Datatype_uptr densify ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype as the dense copy of this one. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#destroy_data-void-&#34;&gt;&lt;code&gt;void destroy_data ( void * )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Function used to delete the data behind the datatype. &lt;a href=&#34;#destroy_data-void-&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#evaluate-context-&#34;&gt;&lt;code&gt;Datatype_uptr evaluate ( Context &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new datatype by resolving the value of all metadata references. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#kind&#34;&gt;&lt;code&gt;Scalar_kind kind ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Interpretation of the content. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#operator-const-datatype-&#34;&gt;&lt;code&gt;bool operator== ( const Datatype &amp; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Test for equality. &lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#simple&#34;&gt;&lt;code&gt;bool simple ()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Tells if data can be copied as bytes (if type is dense) and doesn&#39;t need a destroyer. &lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;scalar_datatype-scalar_kind-size_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Scalar_datatype&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Scalar_kind&lt;/span&gt; &lt;a href=&#34;#scalar_datatype-scalar_kind-size_t-_-kind&#34;&gt;&lt;var class=&#34;nv&#34;&gt;kind&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;a href=&#34;#scalar_datatype-scalar_kind-size_t-_-size&#34;&gt;&lt;var class=&#34;nv&#34;&gt;size&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;scalar_datatype-scalar_kind-size_t-_-kind&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;kind&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;scalar_datatype-scalar_kind-size_t-_-size&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;size&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;scalar_datatype-size_t-scalar_kind-size_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Scalar_datatype&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;a href=&#34;#scalar_datatype-size_t-scalar_kind-size_t-_-align&#34;&gt;&lt;var class=&#34;nv&#34;&gt;align&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;Scalar_kind&lt;/span&gt; &lt;a href=&#34;#scalar_datatype-size_t-scalar_kind-size_t-_-kind&#34;&gt;&lt;var class=&#34;nv&#34;&gt;kind&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;a href=&#34;#scalar_datatype-size_t-scalar_kind-size_t-_-size&#34;&gt;&lt;var class=&#34;nv&#34;&gt;size&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;scalar_datatype-size_t-scalar_kind-size_t-_-align&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;align&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;scalar_datatype-size_t-scalar_kind-size_t-_-kind&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;kind&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;scalar_datatype-size_t-scalar_kind-size_t-_-size&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;size&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;scalar_datatype-size_t-stdfunction-void-void--const-void--size_t-stdfunction-voidvoid--scalar_kind-size_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Scalar_datatype&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;a href=&#34;#scalar_datatype-size_t-stdfunction-void-void--const-void--size_t-stdfunction-voidvoid--scalar_kind-size_t-_-align&#34;&gt;&lt;var class=&#34;nv&#34;&gt;align&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void *(void *, const void *)&amp;gt;&lt;/span&gt; &lt;a href=&#34;#scalar_datatype-size_t-stdfunction-void-void--const-void--size_t-stdfunction-voidvoid--scalar_kind-size_t-_-copy&#34;&gt;&lt;var class=&#34;nv&#34;&gt;copy&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;a href=&#34;#scalar_datatype-size_t-stdfunction-void-void--const-void--size_t-stdfunction-voidvoid--scalar_kind-size_t-_-dense_size&#34;&gt;&lt;var class=&#34;nv&#34;&gt;dense_size&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void(void *)&amp;gt;&lt;/span&gt; &lt;a href=&#34;#scalar_datatype-size_t-stdfunction-void-void--const-void--size_t-stdfunction-voidvoid--scalar_kind-size_t-_-destroy&#34;&gt;&lt;var class=&#34;nv&#34;&gt;destroy&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;Scalar_kind&lt;/span&gt; &lt;a href=&#34;#scalar_datatype-size_t-stdfunction-void-void--const-void--size_t-stdfunction-voidvoid--scalar_kind-size_t-_-kind&#34;&gt;&lt;var class=&#34;nv&#34;&gt;kind&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;a href=&#34;#scalar_datatype-size_t-stdfunction-void-void--const-void--size_t-stdfunction-voidvoid--scalar_kind-size_t-_-size&#34;&gt;&lt;var class=&#34;nv&#34;&gt;size&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;scalar_datatype-size_t-stdfunction-void-void--const-void--size_t-stdfunction-voidvoid--scalar_kind-size_t-_-align&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;align&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;scalar_datatype-size_t-stdfunction-void-void--const-void--size_t-stdfunction-voidvoid--scalar_kind-size_t-_-copy&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;copy&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;scalar_datatype-size_t-stdfunction-void-void--const-void--size_t-stdfunction-voidvoid--scalar_kind-size_t-_-dense_size&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;dense_size&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;scalar_datatype-size_t-stdfunction-void-void--const-void--size_t-stdfunction-voidvoid--scalar_kind-size_t-_-destroy&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;destroy&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;scalar_datatype-size_t-stdfunction-void-void--const-void--size_t-stdfunction-voidvoid--scalar_kind-size_t-_-kind&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;kind&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;scalar_datatype-size_t-stdfunction-void-void--const-void--size_t-stdfunction-voidvoid--scalar_kind-size_t-_-size&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;size&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;alignment&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;alignment&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Returns the required alignment for a type.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the size in bytes&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;buffersize&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;buffersize&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Computes the data size of a type, including potentially unused memory from a sparse type.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the size in bytes&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;clone&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_template_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;clone&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype as an exact copy of this one.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the dense type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;clone_type&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;clone_type&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype as an exact copy of this one.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the dense type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;data_from_dense_copy-const-void--void-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;data_from_dense_copy&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const void *&lt;/span&gt; &lt;a href=&#34;#data_from_dense_copy-const-void--void--_-from&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#data_from_dense_copy-const-void--void--_-to&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a sparse deep copy of dense data.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_from_dense_copy-const-void--void--_-from&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the copied data (dense data)&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_from_dense_copy-const-void--void--_-to&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the allocated memory to fill (size of buffersize)&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;updated ‘to’ pointer&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;data_to_dense_copy-const-void--void-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;data_to_dense_copy&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const void *&lt;/span&gt; &lt;a href=&#34;#data_to_dense_copy-const-void--void--_-from&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#data_to_dense_copy-const-void--void--_-to&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a dense deep copy of data.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_to_dense_copy-const-void--void--_-from&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;from&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the copied data (size of buffersize)&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;data_to_dense_copy-const-void--void--_-to&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;to&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the pointer to the allocated memory to fill (dense data)&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;updated ‘to’ pointer&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;datasize&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;datasize&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Computes the data size of a type, excluding potentially unused memory from a sparse type.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the size in bytes&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;debug_string&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::string&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;debug_string&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Returns the datatype yaml representation as a string.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the datatype yaml representation as a string&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;dense&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dense&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Indicate if the datatype is dense or not.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;whether the datatype is dense&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;densify&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;densify&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype as the dense copy of this one.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;destroy_data-void-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;destroy_data&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;void *&lt;/span&gt; &lt;a href=&#34;#destroy_data-void--_-ptr&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ptr&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Function used to delete the data behind the datatype.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;destroy_data-void--_-ptr&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ptr&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;to the data to free&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;section class=&#34;description&#34;&gt;
Function used to delete the data behind the datatype.
This should not deallocate the memory.
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;evaluate-context-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Datatype_uptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;evaluate&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;Context &amp;amp;&lt;/span&gt; &lt;a href=&#34;#evaluate-context--_-ctx&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Creates a new datatype by resolving the value of all metadata references.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;evaluate-context--_-ctx&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;ctx&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the context in which to evaluate this template&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the evaluated type that is produced&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;kind&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Scalar_kind&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;kind&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Interpretation of the content.&lt;/p&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;operator-const-datatype-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator==&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const Datatype &amp;amp;&lt;/span&gt; &lt;a href=&#34;#operator-const-datatype--_-other&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Test for equality.&lt;/p&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;operator-const-datatype--_-other&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;other&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the &lt;a href=&#34;compound:classPDI_1_1Datatype&#34;&gt;Datatype&lt;/a&gt; to compare&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;true if the &lt;a href=&#34;compound:classPDI_1_1Datatype&#34;&gt;Datatype&lt;/a&gt;&#39;s are equal&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;simple&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;simple&lt;/nf&gt; (  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Tells if data can be copied as bytes (if type is dense) and doesn&amp;rsquo;t need a destroyer.&lt;/p&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;true if data has trivial copier and destroyer, false otherwise&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI::Scalar_kind enum reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/scalar_kind/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/scalar_kind/</guid>
      <description>
        
        
        &lt;p&gt;Different possible interpretations for a scalar.&lt;/p&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;

      </description>
    </item>
    
  </channel>
</rss>
