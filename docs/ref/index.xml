<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PDI – PDI API reference</title>
    <link>http://pdi.julien-bigot.fr/new-site/docs/ref/</link>
    <description>Recent content in PDI API reference on PDI</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="http://pdi.julien-bigot.fr/new-site/docs/ref/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: PDI namespace reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi/</guid>
      <description>
        
        
        &lt;h2 id=&#34;types-list&#34;&gt;Types&lt;/h3&gt;
&lt;dl&gt;
&lt;dt&gt;
&lt;a href=&#34;array_datatype&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Array_datatype&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dd&gt;an &lt;a href=&#34;compound:classPDI_1_1Array__datatype&#34;&gt;Array_datatype&lt;/a&gt; is a &lt;a href=&#34;compound:classPDI_1_1Datatype&#34;&gt;Datatype&lt;/a&gt; that represents an array: i.e storage of multiple elements of the same type continuously in memory.&lt;/dd&gt;
&lt;dt&gt;
&lt;a href=&#34;callbacks&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Callbacks&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;a href=&#34;config_error&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Config_error&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;a href=&#34;context&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Context&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;a href=&#34;context_proxy&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Context_proxy&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;a href=&#34;data_descriptor&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Data_descriptor&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;a href=&#34;datatype&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Datatype&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dd&gt;A &lt;a href=&#34;compound:classPDI_1_1Datatype&#34;&gt;Datatype&lt;/a&gt; is a &lt;a href=&#34;compound:classPDI_1_1Datatype__template&#34;&gt;Datatype_template&lt;/a&gt; that accepts no argument.&lt;/dd&gt;
&lt;dt&gt;
&lt;a href=&#34;datatype_template&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Datatype_template&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;p&gt;&lt;code&gt;typedef PDI::Datatype_template_uptr&lt;/code&gt;&lt;/p&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;p&gt;&lt;code&gt;typedef PDI::Datatype_uptr&lt;/code&gt;&lt;/p&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;a href=&#34;error&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Error&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;a href=&#34;expression&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Expression&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;a href=&#34;impl_error&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Impl_error&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;p&gt;&lt;code&gt;typedef PDI::Logger_sptr&lt;/code&gt;&lt;/p&gt;
&lt;/dt&gt;
&lt;dd&gt;A shared pointer to a logger instance.&lt;/dd&gt;
&lt;dt&gt;
&lt;a href=&#34;paraconf_wrapper&#34;&gt;
&lt;p&gt;&lt;code&gt;struct PDI::Paraconf_wrapper&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dd&gt;Automatically installs a paraconf error-handler that ignores errors and uninstalls it on destruction.&lt;/dd&gt;
&lt;dt&gt;
&lt;a href=&#34;plugin&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Plugin&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dd&gt;The class &lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt; plugins should implement.&lt;/dd&gt;
&lt;dt&gt;
&lt;a href=&#34;plugin_error&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Plugin_error&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;a href=&#34;pointer_datatype&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Pointer_datatype&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;a href=&#34;record_datatype&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Record_datatype&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dd&gt;A &lt;a href=&#34;compound:classPDI_1_1Record__datatype&#34;&gt;Record_datatype&lt;/a&gt; is a &lt;a href=&#34;compound:classPDI_1_1Datatype&#34;&gt;Datatype&lt;/a&gt; that represents a fixed number of elements of potentially different types layed out in a specific way in memory.&lt;/dd&gt;
&lt;dt&gt;
&lt;p&gt;&lt;code&gt;typedef PDI::Ref&lt;/code&gt;&lt;/p&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;a href=&#34;ref_any&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Ref_any&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dd&gt;A dynamically typed reference to data with automatic memory management and read/write locking semantic.&lt;/dd&gt;
&lt;dt&gt;
&lt;p&gt;&lt;code&gt;typedef PDI::Ref_r&lt;/code&gt;&lt;/p&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;p&gt;&lt;code&gt;typedef PDI::Ref_rw&lt;/code&gt;&lt;/p&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;p&gt;&lt;code&gt;typedef PDI::Ref_w&lt;/code&gt;&lt;/p&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;a href=&#34;reference_base&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Reference_base&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dd&gt;A common base for all references, whatever their access privileges.&lt;/dd&gt;
&lt;dt&gt;
&lt;a href=&#34;right_error&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Right_error&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;a href=&#34;scalar_datatype&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Scalar_datatype&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;p&gt;&lt;code&gt;enum PDI::Scalar_kind&lt;/code&gt;&lt;/p&gt;
&lt;/dt&gt;
&lt;dd&gt;Different possible interpretations for a scalar.&lt;/dd&gt;
&lt;dt&gt;
&lt;a href=&#34;state_error&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::State_error&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;a href=&#34;system_error&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::System_error&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;a href=&#34;type_error&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Type_error&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;a href=&#34;unavailable_error&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Unavailable_error&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;dt&gt;
&lt;a href=&#34;value_error&#34;&gt;
&lt;p&gt;&lt;code&gt;class PDI::Value_error&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;types-list&#34;&gt;Functions&lt;/h3&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#configure_logger-pc_tree_t-spdloglevellevel_enum-const-stdstring-&#34;&gt;
&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;Logger_sptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PDI::configure_logger&lt;/span&gt; ( &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt;,  &lt;span class=&#34;kt&#34;&gt;spdlog::level::level_enum&lt;/span&gt;,  &lt;span class=&#34;kt&#34;&gt;const std::string &amp;amp;&lt;/span&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Reads configuration tree and sets up the logger.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#each-stdfunction-voidpc_tree_t-pc_tree_t&#34;&gt;
&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PDI::each&lt;/span&gt; ( &lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void(PC_tree_t)&amp;gt;&lt;/span&gt;,  &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Iterates and apply the provided function to all elements of a PC list.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#each-stdfunction-voidpc_tree_t-pc_tree_t-pc_tree_t&#34;&gt;
&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PDI::each&lt;/span&gt; ( &lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void(PC_tree_t, PC_tree_t)&amp;gt;&lt;/span&gt;,  &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Iterates and apply the provided function to all elements of a PC mapping.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#each_in_omap-stdfunction-voidpc_tree_t-pc_tree_t-pc_tree_t&#34;&gt;
&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PDI::each_in_omap&lt;/span&gt; ( &lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void(PC_tree_t, PC_tree_t)&amp;gt;&lt;/span&gt;,  &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Iterates and apply the provided function to all elements of a PC ordered mapping.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#is_list-pc_tree_t&#34;&gt;
&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PDI::is_list&lt;/span&gt; ( &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Checks if the tree is a list.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#is_map-pc_tree_t&#34;&gt;
&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PDI::is_map&lt;/span&gt; ( &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Checks if the tree is a map.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#is_scalar-pc_tree_t&#34;&gt;
&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PDI::is_scalar&lt;/span&gt; ( &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Checks if the tree is a scalar.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#len-pc_tree_t&#34;&gt;
&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PDI::len&lt;/span&gt; ( &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the length of a node. &lt;a href=&#34;#len-pc_tree_t&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#len-int-pc_tree_t&#34;&gt;
&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PDI::len&lt;/span&gt; ( &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;,  &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the length of a node. &lt;a href=&#34;#len-int-pc_tree_t&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#opt_each-stdfunction-voidpc_tree_t-pc_tree_t&#34;&gt;
&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PDI::opt_each&lt;/span&gt; ( &lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void(PC_tree_t)&amp;gt;&lt;/span&gt;,  &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Iterates and apply the provided function to all elements of a PC list or directly to the provided element if it is not a list.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#plugin_api_version-unsigned-long&#34;&gt;
&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;unsigned long&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PDI::plugin_api_version&lt;/span&gt; ( &lt;span class=&#34;kt&#34;&gt;unsigned long&lt;/span&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Checks compatibility with a plugin API.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#to_bool-pc_tree_t&#34;&gt;
&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PDI::to_bool&lt;/span&gt; ( &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the boolean value of a scalar node. &lt;a href=&#34;#to_bool-pc_tree_t&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#to_bool-bool-pc_tree_t&#34;&gt;
&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PDI::to_bool&lt;/span&gt; ( &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;,  &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the boolean value of a scalar node. &lt;a href=&#34;#to_bool-bool-pc_tree_t&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#to_double-pc_tree_t&#34;&gt;
&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PDI::to_double&lt;/span&gt; ( &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the floating point value of a scalar node. &lt;a href=&#34;#to_double-pc_tree_t&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#to_double-double-pc_tree_t&#34;&gt;
&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PDI::to_double&lt;/span&gt; ( &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;,  &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the floating point value of a scalar node. &lt;a href=&#34;#to_double-double-pc_tree_t&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#to_long-pc_tree_t&#34;&gt;
&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PDI::to_long&lt;/span&gt; ( &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the int value of a scalar node. &lt;a href=&#34;#to_long-pc_tree_t&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#to_long-long-pc_tree_t&#34;&gt;
&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PDI::to_long&lt;/span&gt; ( &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;,  &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the int value of a scalar node. &lt;a href=&#34;#to_long-long-pc_tree_t&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#to_string-pc_tree_t&#34;&gt;
&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;std::string&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PDI::to_string&lt;/span&gt; ( &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the string content of a scalar node. &lt;a href=&#34;#to_string-pc_tree_t&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;#to_string-const-stdstring--pc_tree_t&#34;&gt;
&lt;code&gt;&lt;span class=&#34;kt&#34;&gt;std::string&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PDI::to_string&lt;/span&gt; ( &lt;span class=&#34;kt&#34;&gt;const std::string &amp;amp;&lt;/span&gt;,  &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; )&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the string content of a scalar node. &lt;a href=&#34;#to_string-const-stdstring--pc_tree_t&#34;&gt;More…&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;variables-list&#34;&gt;Variables&lt;/h3&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;#undef_type&#34;&gt;UNDEF_TYPE&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h3&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;configure_logger-pc_tree_t-spdloglevellevel_enum-const-stdstring-&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;Logger_sptr&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;configure_logger&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#configure_logger-pc_tree_t-spdloglevellevel_enum-const-stdstring--_-config&#34;&gt;&lt;var class=&#34;nv&#34;&gt;config&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;spdlog::level::level_enum&lt;/span&gt; &lt;a href=&#34;#configure_logger-pc_tree_t-spdloglevellevel_enum-const-stdstring--_-level&#34;&gt;&lt;var class=&#34;nv&#34;&gt;level&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;const std::string &amp;amp;&lt;/span&gt; &lt;a href=&#34;#configure_logger-pc_tree_t-spdloglevellevel_enum-const-stdstring--_-name&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;section class=&#34;description&#34;&gt;
Reads configuration tree and sets up the logger.
&lt;/section&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;configure_logger-pc_tree_t-spdloglevellevel_enum-const-stdstring--_-config&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;config&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;configuration tree from config file&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;configure_logger-pc_tree_t-spdloglevellevel_enum-const-stdstring--_-level&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;level&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;default level of the logger&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;configure_logger-pc_tree_t-spdloglevellevel_enum-const-stdstring--_-name&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;name&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;name of the module (e.g. global, test, decl_hdf5)&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;a configured logger&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;each-stdfunction-voidpc_tree_t-pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;each&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void(PC_tree_t)&amp;gt;&lt;/span&gt; &lt;a href=&#34;#each-stdfunction-voidpc_tree_t-pc_tree_t-_-operation&#34;&gt;&lt;var class=&#34;nv&#34;&gt;operation&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#each-stdfunction-voidpc_tree_t-pc_tree_t-_-tree&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;section class=&#34;description&#34;&gt;
Iterates and apply the provided function to all elements of a PC list.
&lt;/section&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;each-stdfunction-voidpc_tree_t-pc_tree_t-_-operation&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;operation&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the operation to apply to each element of the tree&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;each-stdfunction-voidpc_tree_t-pc_tree_t-_-tree&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the tree containing the list&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;each-stdfunction-voidpc_tree_t-pc_tree_t-pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;each&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void(PC_tree_t, PC_tree_t)&amp;gt;&lt;/span&gt; &lt;a href=&#34;#each-stdfunction-voidpc_tree_t-pc_tree_t-pc_tree_t-_-operation&#34;&gt;&lt;var class=&#34;nv&#34;&gt;operation&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#each-stdfunction-voidpc_tree_t-pc_tree_t-pc_tree_t-_-tree&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;section class=&#34;description&#34;&gt;
Iterates and apply the provided function to all elements of a PC mapping.
&lt;/section&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;each-stdfunction-voidpc_tree_t-pc_tree_t-pc_tree_t-_-operation&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;operation&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the operation to apply to each element of the tree&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;each-stdfunction-voidpc_tree_t-pc_tree_t-pc_tree_t-_-tree&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the tree containing the mapping&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;each_in_omap-stdfunction-voidpc_tree_t-pc_tree_t-pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;each_in_omap&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void(PC_tree_t, PC_tree_t)&amp;gt;&lt;/span&gt; &lt;a href=&#34;#each_in_omap-stdfunction-voidpc_tree_t-pc_tree_t-pc_tree_t-_-operation&#34;&gt;&lt;var class=&#34;nv&#34;&gt;operation&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#each_in_omap-stdfunction-voidpc_tree_t-pc_tree_t-pc_tree_t-_-tree&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;section class=&#34;description&#34;&gt;
Iterates and apply the provided function to all elements of a PC ordered mapping.
&lt;/section&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;each_in_omap-stdfunction-voidpc_tree_t-pc_tree_t-pc_tree_t-_-operation&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;operation&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the operation to apply to each element of the tree&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;each_in_omap-stdfunction-voidpc_tree_t-pc_tree_t-pc_tree_t-_-tree&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the tree containing the ordered mapping&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;is_list-pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;is_list&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#is_list-pc_tree_t-_-tree&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;section class=&#34;description&#34;&gt;
Checks if the tree is a list.
&lt;/section&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;is_list-pc_tree_t-_-tree&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the node&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;true if tree is a list, false otherwise&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;is_map-pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;is_map&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#is_map-pc_tree_t-_-tree&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;section class=&#34;description&#34;&gt;
Checks if the tree is a map.
&lt;/section&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;is_map-pc_tree_t-_-tree&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the node&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;true if tree is a map, false otherwise&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;is_scalar-pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;is_scalar&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#is_scalar-pc_tree_t-_-tree&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;section class=&#34;description&#34;&gt;
Checks if the tree is a scalar.
&lt;/section&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;is_scalar-pc_tree_t-_-tree&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the node&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;true if tree is a scalar, false otherwise&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;len-pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;len&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#len-pc_tree_t-_-tree&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;section class=&#34;description&#34;&gt;
Returns the length of a node. &lt;ul&gt;
&lt;li&gt;for a sequence: the number of nodes,&lt;/li&gt;
&lt;li&gt;for a mapping: the number of pairs,&lt;/li&gt;
&lt;li&gt;for a scalar: the string length.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;throws an &lt;a href=&#34;compound:classPDI_1_1Error&#34;&gt;Error&lt;/a&gt; if the provided tree is in error
&lt;/section&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;len-pc_tree_t-_-tree&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the sequence or mapping&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the length&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;len-int-pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;len&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;a href=&#34;#len-int-pc_tree_t-_-dflt&#34;&gt;&lt;var class=&#34;nv&#34;&gt;dflt&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#len-int-pc_tree_t-_-tree&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;section class=&#34;description&#34;&gt;
Returns the length of a node. &lt;ul&gt;
&lt;li&gt;for a sequence: the number of nodes,&lt;/li&gt;
&lt;li&gt;for a mapping: the number of pairs,&lt;/li&gt;
&lt;li&gt;for a scalar: the string length.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;returns the default value in case of error
&lt;/section&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;len-int-pc_tree_t-_-dflt&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;dflt&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the default value in case of error&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;len-int-pc_tree_t-_-tree&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the sequence or mapping&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the length&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;opt_each-stdfunction-voidpc_tree_t-pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;opt_each&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;std::function&amp;lt; void(PC_tree_t)&amp;gt;&lt;/span&gt; &lt;a href=&#34;#opt_each-stdfunction-voidpc_tree_t-pc_tree_t-_-operation&#34;&gt;&lt;var class=&#34;nv&#34;&gt;operation&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#opt_each-stdfunction-voidpc_tree_t-pc_tree_t-_-tree&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;section class=&#34;description&#34;&gt;
Iterates and apply the provided function to all elements of a PC list or directly to the provided element if it is not a list.
&lt;/section&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;opt_each-stdfunction-voidpc_tree_t-pc_tree_t-_-operation&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;operation&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the operation to apply to the elements&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;opt_each-stdfunction-voidpc_tree_t-pc_tree_t-_-tree&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the tree containing the list or the single element&lt;/dd&gt;
&lt;/dl&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;plugin_api_version-unsigned-long&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;unsigned long&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;plugin_api_version&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;unsigned long&lt;/span&gt; &lt;a href=&#34;#plugin_api_version-unsigned-long-_-expected_version&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expected_version&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;section class=&#34;description&#34;&gt;
Checks compatibility with a plugin API.
&lt;/section&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;plugin_api_version-unsigned-long-_-expected_version&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;expected_version&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the expected version of the API or 0 for no check&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the version of the API provided by &lt;a href=&#34;compound:namespacePDI&#34;&gt;PDI&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;to_bool-pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to_bool&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#to_bool-pc_tree_t-_-tree&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;section class=&#34;description&#34;&gt;
Returns the boolean value of a scalar node. throws an &lt;a href=&#34;compound:classPDI_1_1Error&#34;&gt;Error&lt;/a&gt; if the provided tree is in error
&lt;/section&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;to_bool-pc_tree_t-_-tree&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the node&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the boolean value of the scalar node&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;to_bool-bool-pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to_bool&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;a href=&#34;#to_bool-bool-pc_tree_t-_-dflt&#34;&gt;&lt;var class=&#34;nv&#34;&gt;dflt&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#to_bool-bool-pc_tree_t-_-tree&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;section class=&#34;description&#34;&gt;
Returns the boolean value of a scalar node. returns the default value in case of error
&lt;/section&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;to_bool-bool-pc_tree_t-_-dflt&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;dflt&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the default value in case of error&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;to_bool-bool-pc_tree_t-_-tree&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the node&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the boolean value of the scalar node&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;to_double-pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to_double&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#to_double-pc_tree_t-_-tree&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;section class=&#34;description&#34;&gt;
Returns the floating point value of a scalar node. throws an &lt;a href=&#34;compound:classPDI_1_1Error&#34;&gt;Error&lt;/a&gt; if the provided tree is in error
&lt;/section&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;to_double-pc_tree_t-_-tree&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the floating-point-valued node&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the floating point value of the scalar node&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;to_double-double-pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to_double&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;a href=&#34;#to_double-double-pc_tree_t-_-dflt&#34;&gt;&lt;var class=&#34;nv&#34;&gt;dflt&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#to_double-double-pc_tree_t-_-tree&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;section class=&#34;description&#34;&gt;
Returns the floating point value of a scalar node. returns the default value in case of error
&lt;/section&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;to_double-double-pc_tree_t-_-dflt&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;dflt&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the default value in case of error&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;to_double-double-pc_tree_t-_-tree&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the floating-point-valued node&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the floating point value of the scalar node&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;to_long-pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to_long&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#to_long-pc_tree_t-_-tree&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;section class=&#34;description&#34;&gt;
Returns the int value of a scalar node. throws an &lt;a href=&#34;compound:classPDI_1_1Error&#34;&gt;Error&lt;/a&gt; if the provided tree is in error
&lt;/section&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;to_long-pc_tree_t-_-tree&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the int-valued node&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the int value of the scalar node&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;to_long-long-pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to_long&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;a href=&#34;#to_long-long-pc_tree_t-_-dflt&#34;&gt;&lt;var class=&#34;nv&#34;&gt;dflt&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#to_long-long-pc_tree_t-_-tree&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;section class=&#34;description&#34;&gt;
Returns the int value of a scalar node. returns the default value in case of error
&lt;/section&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;to_long-long-pc_tree_t-_-dflt&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;dflt&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the default value in case of error&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;to_long-long-pc_tree_t-_-tree&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the int-valued node&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the int value of the scalar node&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;to_string-pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::string&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to_string&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#to_string-pc_tree_t-_-tree&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;section class=&#34;description&#34;&gt;
Returns the string content of a scalar node. throws an &lt;a href=&#34;compound:classPDI_1_1Error&#34;&gt;Error&lt;/a&gt; if the provided tree is in error
&lt;/section&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;to_string-pc_tree_t-_-tree&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the node&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the content of the scalar node&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;article class=&#34;td-content member-function&#34;&gt;
&lt;h3 id=&#34;to_string-const-stdstring--pc_tree_t&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;std::string&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to_string&lt;/nf&gt; (    &lt;span class=&#34;kt&#34;&gt;const std::string &amp;amp;&lt;/span&gt; &lt;a href=&#34;#to_string-const-stdstring--pc_tree_t-_-dflt&#34;&gt;&lt;var class=&#34;nv&#34;&gt;dflt&lt;/var&gt;&lt;/a&gt;,   &lt;span class=&#34;kt&#34;&gt;PC_tree_t&lt;/span&gt; &lt;a href=&#34;#to_string-const-stdstring--pc_tree_t-_-tree&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/a&gt;  )&lt;/code&gt;&lt;/h3&gt;
&lt;section class=&#34;description&#34;&gt;
Returns the string content of a scalar node. returns the default value in case of error
&lt;/section&gt;
&lt;h4&gt;Parameters&lt;/h4&gt;
&lt;dl class=&#34;parameters&#34;&gt;
&lt;dt&gt;&lt;h5 id=&#34;to_string-const-stdstring--pc_tree_t-_-dflt&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;dflt&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the default value in case of error&lt;/dd&gt;
&lt;dt&gt;&lt;h5 id=&#34;to_string-const-stdstring--pc_tree_t-_-tree&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;var class=&#34;nv&#34;&gt;tree&lt;/var&gt;&lt;/code&gt;&lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;the node&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;section class=&#34;result&#34;&gt;
&lt;p&gt;the content of the scalar node&lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PDI_errhandler_t struct reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi_errhandler_t/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/pdi_errhandler_t/</guid>
      <description>
        
        
        &lt;h2 id=&#34;member-types-list&#34;&gt;Member Types&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;pdi_errhandler_t&#34;&gt;&lt;code&gt;struct PDI_errhandler_t&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Definition of an error handler.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;
&lt;p&gt;Definition of an error handler.&lt;/p&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h2&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: spdlog namespace reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/spdlog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/spdlog/</guid>
      <description>
        
        
        &lt;h2 id=&#34;types-list&#34;&gt;Types&lt;/h3&gt;
&lt;dl&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;types-list&#34;&gt;Functions&lt;/h3&gt;
&lt;dl&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h3&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: std namespace reference</title>
      <link>http://pdi.julien-bigot.fr/new-site/docs/ref/std/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pdi.julien-bigot.fr/new-site/docs/ref/std/</guid>
      <description>
        
        
        &lt;h2 id=&#34;types-list&#34;&gt;Types&lt;/h3&gt;
&lt;dl&gt;
&lt;dt&gt;
&lt;a href=&#34;hash__pdi__ref_any__r__w____&#34;&gt;
&lt;p&gt;&lt;code&gt;struct std::hash&amp;lt; PDI::Ref_any&amp;lt; R, W &amp;gt; &amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;/dt&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;types-list&#34;&gt;Functions&lt;/h3&gt;
&lt;dl&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;detailed-documentation&#34;&gt;Detailed Documentation&lt;/h3&gt;

      </description>
    </item>
    
  </channel>
</rss>
