<?xml version="1.0" standalone="yes"?>
<doxygen version="1.8.17"><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classPDI_1_1Array__datatype" kind="class" language="C++" prot="public">
    <compoundname>PDI::Array_datatype</compoundname>
    <basecompoundref refid="classPDI_1_1Datatype" prot="public" virt="non-virtual">PDI::Datatype</basecompoundref>
    <includes refid="array__datatype_8h" local="no">array_datatype.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classPDI_1_1Array__datatype_1a1f7543002ccebbce25b689c57b279929" prot="private" static="no" mutable="no">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>Datatype_uptr PDI::Array_datatype::m_subtype</definition>
        <argsstring/>
        <name>m_subtype</name>
        <briefdescription>
<para>Type of the elements contained in the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="87" column="15" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPDI_1_1Array__datatype_1a271c3b574d671710ea562b216df69ce9" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t PDI::Array_datatype::m_size</definition>
        <argsstring/>
        <name>m_size</name>
        <briefdescription>
<para>Number of elements the array can store. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="90" column="8" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPDI_1_1Array__datatype_1a12eeaa1bcb314f91e47466bdab203b1f" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t PDI::Array_datatype::m_start</definition>
        <argsstring/>
        <name>m_start</name>
        <briefdescription>
<para>id of the first actual element of the array </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="93" column="8" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPDI_1_1Array__datatype_1a1a40db94339f9e78b03dcd3fd1d4ce21" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t PDI::Array_datatype::m_subsize</definition>
        <argsstring/>
        <name>m_subsize</name>
        <briefdescription>
<para>Number of actual elements in the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="96" column="8" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1a5a7e92c1dac8a64f6bca955475b0332d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Array_datatype::Array_datatype</definition>
        <argsstring>(Datatype_uptr subtype, size_t size, size_t start, size_t subsize)</argsstring>
        <name>Array_datatype</name>
        <param>
          <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
          <declname>subtype</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>subsize</declname>
        </param>
        <briefdescription>
<para>Construct a new partially filled <ref refid="classPDI_1_1Array__datatype" kindref="compound">Array_datatype</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">subtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the elements contained in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements the array can store </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>the id of the first actual element of the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subsize</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of actual elements in the array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1a3c318ef5108efc7bc593cdee7505ad8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Array_datatype::Array_datatype</definition>
        <argsstring>(Datatype_uptr subtype, size_t size)</argsstring>
        <name>Array_datatype</name>
        <param>
          <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
          <declname>subtype</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Construct a new completely filled <ref refid="classPDI_1_1Array__datatype" kindref="compound">Array_datatype</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>subtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the elements contained in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements the array can store </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1a2a49fe56a6a6946f0fa55bd504b956f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> &amp;</type>
        <definition>const Datatype&amp; PDI::Array_datatype::subtype</definition>
        <argsstring>() const</argsstring>
        <name>subtype</name>
        <briefdescription>
<para>Type of the elements contained in the array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the type of the elements contained in the array </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="119" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1a26b0a7a4a180e1135846627372ed9589" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PDI::Array_datatype::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Number of elements the array can store. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of elements the array can store </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="124" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1ac8bc6acc7335a71d63e1a19f2227d2f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PDI::Array_datatype::start</definition>
        <argsstring>() const</argsstring>
        <name>start</name>
        <briefdescription>
<para>id of the first actual element of the array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the id of the first actual element of the array </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="130" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1ab50be2accef49e18e36c9ac96d196a04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PDI::Array_datatype::subsize</definition>
        <argsstring>() const</argsstring>
        <name>subsize</name>
        <briefdescription>
<para>Number of actual elements in the array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of actual elements in the array </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="136" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1a524b1fe42651c90a8cfb3b66eadf9fb4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref></type>
        <definition>Datatype_template_uptr PDI::Array_datatype::clone</definition>
        <argsstring>() const override</argsstring>
        <name>clone</name>
        <reimplements refid="classPDI_1_1Datatype__template_1a6c6cb02f6f9bab3e9fbf8826afae677a">clone</reimplements>
        <briefdescription>
<para>Creates a new datatype as an exact copy of this one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the dense type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="138" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1a332187b330bb85e949fe695620c8e138" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>Datatype_uptr PDI::Array_datatype::clone_type</definition>
        <argsstring>() const override</argsstring>
        <name>clone_type</name>
        <reimplements refid="classPDI_1_1Datatype_1af42770105e821dea4ca30f0992f2274c">clone_type</reimplements>
        <briefdescription>
<para>Creates a new datatype as an exact copy of this one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the dense type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="140" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1a2ab426d296ba51a2ed47c335dbd0c3da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>Datatype_uptr PDI::Array_datatype::densify</definition>
        <argsstring>() const override</argsstring>
        <name>densify</name>
        <reimplements refid="classPDI_1_1Datatype_1a565e585893035b39f95520543cea49de">densify</reimplements>
        <briefdescription>
<para>Creates a new datatype as the dense copy of this one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="142" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1ae6d1fdc3128dd1bb1d61442c33416917" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>Datatype_uptr PDI::Array_datatype::evaluate</definition>
        <argsstring>(Context &amp;) const override</argsstring>
        <name>evaluate</name>
        <reimplements refid="classPDI_1_1Datatype__template_1a31b2c6cd579c3100c6b03bf195aa0e80">evaluate</reimplements>
        <param>
          <type><ref refid="classPDI_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Creates a new datatype by resolving the value of all metadata references. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context in which to evaluate this template </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the evaluated type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="144" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1a31286281747dffd22dd10c3a929eef51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool PDI::Array_datatype::dense</definition>
        <argsstring>() const override</argsstring>
        <name>dense</name>
        <reimplements refid="classPDI_1_1Datatype_1a15b82a52cfafc5fc1dbc21b043588693">dense</reimplements>
        <briefdescription>
<para>Indicate if the datatype is dense or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether the datatype is dense </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="146" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1a00fb46532bb0b8a63111130715a10137" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t PDI::Array_datatype::datasize</definition>
        <argsstring>() const override</argsstring>
        <name>datasize</name>
        <reimplements refid="classPDI_1_1Datatype_1aa5254560c8fd98403b2067091f93b3c9">datasize</reimplements>
        <briefdescription>
<para>Computes the data size of a type, excluding potentially unused memory from a sparse type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="148" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1adb00b9bfc6a70d320111bff1244ad979" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t PDI::Array_datatype::buffersize</definition>
        <argsstring>() const override</argsstring>
        <name>buffersize</name>
        <reimplements refid="classPDI_1_1Datatype_1a341a15d47396f1cd9bb12e43a5cd5a40">buffersize</reimplements>
        <briefdescription>
<para>Computes the data size of a type, including potentially unused memory from a sparse type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="150" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1ae744734eedbb48f61e0bde159940d9ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t PDI::Array_datatype::alignment</definition>
        <argsstring>() const override</argsstring>
        <name>alignment</name>
        <reimplements refid="classPDI_1_1Datatype_1a2d1d0228dddffc6ee786d56494fde972">alignment</reimplements>
        <briefdescription>
<para>Returns the required alignment for a type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="152" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1a9ba8909f75de2d4f18749fe9362a28d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool PDI::Array_datatype::simple</definition>
        <argsstring>() const override</argsstring>
        <name>simple</name>
        <reimplements refid="classPDI_1_1Datatype_1ae5f85834cbae56fca2b4cf7e7fbd0df3">simple</reimplements>
        <briefdescription>
<para>Tells if data can be copied as bytes (if type is dense) and doesn't need a destroyer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if data has trivial copier and destroyer, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="154" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1acda82205a6bd87bf953f72d0d03c2f38" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void *</type>
        <definition>void* PDI::Array_datatype::data_to_dense_copy</definition>
        <argsstring>(void *, const void *) const override</argsstring>
        <name>data_to_dense_copy</name>
        <reimplements refid="classPDI_1_1Datatype_1a988bab02472c4dc4206b40cd093030c3">data_to_dense_copy</reimplements>
        <param>
          <type>void *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Creates a dense deep copy of data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">to</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the allocated memory to fill (dense data) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the copied data (size of buffersize) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>updated <lsquo/>to<rsquo/> pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="156" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1a03d7af4898203df8615f69f79b7e9e9e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void *</type>
        <definition>void* PDI::Array_datatype::data_from_dense_copy</definition>
        <argsstring>(void *, const void *) const override</argsstring>
        <name>data_from_dense_copy</name>
        <reimplements refid="classPDI_1_1Datatype_1a00559b1afaf47436b64a26841b486a14">data_from_dense_copy</reimplements>
        <param>
          <type>void *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Creates a sparse deep copy of dense data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">to</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the allocated memory to fill (size of buffersize) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the copied data (dense data) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>updated <lsquo/>to<rsquo/> pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="158" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1ac4160324349cf4dd13bd36e8894a61cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PDI::Array_datatype::destroy_data</definition>
        <argsstring>(void *) const override</argsstring>
        <name>destroy_data</name>
        <reimplements refid="classPDI_1_1Datatype_1a73bcba3fb827468daeda6ab0a4fd92b5">destroy_data</reimplements>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Function used to delete the data behind the datatype. </para>
        </briefdescription>
        <detaileddescription>
<para>This should not deallocate the memory.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>to the data to free </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="160" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1ae1fa60769b6a03ff0d6b5f0b82523fec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string PDI::Array_datatype::debug_string</definition>
        <argsstring>() const override</argsstring>
        <name>debug_string</name>
        <reimplements refid="classPDI_1_1Datatype_1aff4be6868c49816ef432098357ab5789">debug_string</reimplements>
        <briefdescription>
<para>Returns the datatype yaml representation as a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the datatype yaml representation as a string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="162" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Array__datatype_1a0ca6cf15fda5ca1406b24328e5571652" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool PDI::Array_datatype::operator==</definition>
        <argsstring>(const Datatype &amp;) const override</argsstring>
        <name>operator==</name>
        <reimplements refid="classPDI_1_1Datatype_1a8cdf8ed0c21b40519239290171252a5b">operator==</reimplements>
        <param>
          <type>const <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Test for equality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref>'s are equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="164" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>an <ref refid="classPDI_1_1Array__datatype" kindref="compound">Array_datatype</ref> is a <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> that represents an array: i.e storage of multiple elements of the same type continuously in memory. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>PDI::Datatype</label>
        <link refid="classPDI_1_1Datatype"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>PDI::Datatype_template</label>
        <link refid="classPDI_1_1Datatype__template"/>
      </node>
      <node id="1">
        <label>PDI::Array_datatype</label>
        <link refid="classPDI_1_1Array__datatype"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>PDI::Datatype</label>
        <link refid="classPDI_1_1Datatype"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>PDI::Datatype_template</label>
        <link refid="classPDI_1_1Datatype__template"/>
      </node>
      <node id="1">
        <label>PDI::Array_datatype</label>
        <link refid="classPDI_1_1Array__datatype"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="63" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" bodystart="61" bodyend="144"/>
    <listofallmembers>
      <member refid="classPDI_1_1Array__datatype_1ae744734eedbb48f61e0bde159940d9ce" prot="public" virt="virtual"><scope>PDI::Array_datatype</scope><name>alignment</name></member>
      <member refid="classPDI_1_1Array__datatype_1a5a7e92c1dac8a64f6bca955475b0332d" prot="public" virt="non-virtual"><scope>PDI::Array_datatype</scope><name>Array_datatype</name></member>
      <member refid="classPDI_1_1Array__datatype_1a3c318ef5108efc7bc593cdee7505ad8a" prot="public" virt="non-virtual"><scope>PDI::Array_datatype</scope><name>Array_datatype</name></member>
      <member refid="classPDI_1_1Array__datatype_1adb00b9bfc6a70d320111bff1244ad979" prot="public" virt="virtual"><scope>PDI::Array_datatype</scope><name>buffersize</name></member>
      <member refid="classPDI_1_1Array__datatype_1a524b1fe42651c90a8cfb3b66eadf9fb4" prot="public" virt="virtual"><scope>PDI::Array_datatype</scope><name>clone</name></member>
      <member refid="classPDI_1_1Array__datatype_1a332187b330bb85e949fe695620c8e138" prot="public" virt="virtual"><scope>PDI::Array_datatype</scope><name>clone_type</name></member>
      <member refid="classPDI_1_1Array__datatype_1a03d7af4898203df8615f69f79b7e9e9e" prot="public" virt="virtual"><scope>PDI::Array_datatype</scope><name>data_from_dense_copy</name></member>
      <member refid="classPDI_1_1Array__datatype_1acda82205a6bd87bf953f72d0d03c2f38" prot="public" virt="virtual"><scope>PDI::Array_datatype</scope><name>data_to_dense_copy</name></member>
      <member refid="classPDI_1_1Array__datatype_1a00fb46532bb0b8a63111130715a10137" prot="public" virt="virtual"><scope>PDI::Array_datatype</scope><name>datasize</name></member>
      <member refid="classPDI_1_1Array__datatype_1ae1fa60769b6a03ff0d6b5f0b82523fec" prot="public" virt="virtual"><scope>PDI::Array_datatype</scope><name>debug_string</name></member>
      <member refid="classPDI_1_1Array__datatype_1a31286281747dffd22dd10c3a929eef51" prot="public" virt="virtual"><scope>PDI::Array_datatype</scope><name>dense</name></member>
      <member refid="classPDI_1_1Array__datatype_1a2ab426d296ba51a2ed47c335dbd0c3da" prot="public" virt="virtual"><scope>PDI::Array_datatype</scope><name>densify</name></member>
      <member refid="classPDI_1_1Array__datatype_1ac4160324349cf4dd13bd36e8894a61cd" prot="public" virt="virtual"><scope>PDI::Array_datatype</scope><name>destroy_data</name></member>
      <member refid="classPDI_1_1Array__datatype_1ae6d1fdc3128dd1bb1d61442c33416917" prot="public" virt="virtual"><scope>PDI::Array_datatype</scope><name>evaluate</name></member>
      <member refid="classPDI_1_1Datatype__template_1aa539eee3b7312a7f1be7fd85b64b5c85" prot="public" virt="non-virtual"><scope>PDI::Array_datatype</scope><name>load_basic_datatypes</name></member>
      <member refid="classPDI_1_1Array__datatype_1a271c3b574d671710ea562b216df69ce9" prot="private" virt="non-virtual"><scope>PDI::Array_datatype</scope><name>m_size</name></member>
      <member refid="classPDI_1_1Array__datatype_1a12eeaa1bcb314f91e47466bdab203b1f" prot="private" virt="non-virtual"><scope>PDI::Array_datatype</scope><name>m_start</name></member>
      <member refid="classPDI_1_1Array__datatype_1a1a40db94339f9e78b03dcd3fd1d4ce21" prot="private" virt="non-virtual"><scope>PDI::Array_datatype</scope><name>m_subsize</name></member>
      <member refid="classPDI_1_1Array__datatype_1a1f7543002ccebbce25b689c57b279929" prot="private" virt="non-virtual"><scope>PDI::Array_datatype</scope><name>m_subtype</name></member>
      <member refid="classPDI_1_1Datatype_1af80638919cb31c61451d0bc6220a69e3" prot="public" virt="non-virtual"><scope>PDI::Array_datatype</scope><name>operator!=</name></member>
      <member refid="classPDI_1_1Array__datatype_1a0ca6cf15fda5ca1406b24328e5571652" prot="public" virt="virtual"><scope>PDI::Array_datatype</scope><name>operator==</name></member>
      <member refid="classPDI_1_1Array__datatype_1a9ba8909f75de2d4f18749fe9362a28d2" prot="public" virt="virtual"><scope>PDI::Array_datatype</scope><name>simple</name></member>
      <member refid="classPDI_1_1Array__datatype_1a26b0a7a4a180e1135846627372ed9589" prot="public" virt="non-virtual"><scope>PDI::Array_datatype</scope><name>size</name></member>
      <member refid="classPDI_1_1Array__datatype_1ac8bc6acc7335a71d63e1a19f2227d2f9" prot="public" virt="non-virtual"><scope>PDI::Array_datatype</scope><name>start</name></member>
      <member refid="classPDI_1_1Array__datatype_1ab50be2accef49e18e36c9ac96d196a04" prot="public" virt="non-virtual"><scope>PDI::Array_datatype</scope><name>subsize</name></member>
      <member refid="classPDI_1_1Array__datatype_1a2a49fe56a6a6946f0fa55bd504b956f7" prot="public" virt="non-virtual"><scope>PDI::Array_datatype</scope><name>subtype</name></member>
      <member refid="classPDI_1_1Datatype_1ad2e19537809ba143ab9130c95b237dc2" prot="public" virt="non-virtual"><scope>PDI::Array_datatype</scope><name>~Datatype</name></member>
      <member refid="classPDI_1_1Datatype__template_1a8722c4b873d42931d8e159abaa62ff27" prot="public" virt="virtual"><scope>PDI::Array_datatype</scope><name>~Datatype_template</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classPDI_1_1Context" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>PDI::Context</compoundname>
    <derivedcompoundref refid="classPDI_1_1Context__proxy" prot="public" virt="non-virtual">PDI::Context_proxy</derivedcompoundref>
    <includes refid="context_8h" local="no">context.h</includes>
    <innerclass refid="classPDI_1_1Context_1_1Iterator" prot="public">PDI::Context::Iterator</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classPDI_1_1Context_1a69e61f140cdf5555c635e160f85f3c86" prot="public" static="no">
        <type>std::function&lt; <ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref>(<ref refid="classPDI_1_1Context" kindref="compound">Context</ref> &amp;, PC_tree_t)&gt;</type>
        <definition>typedef std::function&lt;Datatype_template_uptr(Context&amp;, PC_tree_t)&gt; PDI::Context::Datatype_template_parser</definition>
        <argsstring/>
        <name>Datatype_template_parser</name>
        <briefdescription>
<para>A function that parses a PC_tree_t to create a datatype_template. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="106" column="23" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classPDI_1_1Context_1a128400c36b4d57f4594abbf8d3aefd5e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPDI_1_1Context_1_1Iterator" kindref="compound">Iterator</ref></type>
        <definition>Iterator PDI::Context::get_iterator</definition>
        <argsstring>(const std::unordered_map&lt; std::string, std::unique_ptr&lt; Data_descriptor &gt;&gt;::iterator &amp;data)</argsstring>
        <name>get_iterator</name>
        <param>
          <type>const std::unordered_map&lt; std::string, std::unique_ptr&lt; <ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref> &gt;&gt;::iterator &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="109" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1af014d0db0aa036bdaae6aa860a3a6b0b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPDI_1_1Context_1_1Iterator" kindref="compound">Iterator</ref></type>
        <definition>Iterator PDI::Context::get_iterator</definition>
        <argsstring>(std::unordered_map&lt; std::string, std::unique_ptr&lt; Data_descriptor &gt;&gt;::iterator &amp;&amp;data)</argsstring>
        <name>get_iterator</name>
        <param>
          <type>std::unordered_map&lt; std::string, std::unique_ptr&lt; <ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref> &gt;&gt;::iterator &amp;&amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="111" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPDI_1_1Context_1a9a1eb26d8ff1d5b7b458b704a3cb26a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type/>
        <definition>virtual PDI::Context::~Context</definition>
        <argsstring>()</argsstring>
        <name>~Context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="114" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1ad9cc865b0a004cf218c2633d3907e231" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref> &amp;</type>
        <definition>virtual Data_descriptor&amp; PDI::Context::desc</definition>
        <argsstring>(const std::string &amp;name)=0</argsstring>
        <name>desc</name>
        <reimplementedby refid="classPDI_1_1Context__proxy_1a468a90eb7a0e0dbc88522b51688e9ed8">desc</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Accesses the descriptor for a specific name. </para>
        </briefdescription>
        <detaileddescription>
<para>Might be uninitialized </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="118" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1ad0b4ab8d2b8a7ff58ba260b50e968b96" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref> &amp;</type>
        <definition>virtual Data_descriptor&amp; PDI::Context::desc</definition>
        <argsstring>(const char *name)=0</argsstring>
        <name>desc</name>
        <reimplementedby refid="classPDI_1_1Context__proxy_1a364d22cc3f95fdca9813c2727e54523e">desc</reimplementedby>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Accesses the descriptor for a specific name. </para>
        </briefdescription>
        <detaileddescription>
<para>Might be uninitialized </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="122" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1af6b22d500d77d171fea9b5eb66b02c80" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref> &amp;</type>
        <definition>virtual Data_descriptor&amp; PDI::Context::operator[]</definition>
        <argsstring>(const std::string &amp;name)=0</argsstring>
        <name>operator[]</name>
        <reimplementedby refid="classPDI_1_1Context__proxy_1addf3be2614c4d3639f439b0703d334c8">operator[]</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Accesses the descriptor for a specific name. </para>
        </briefdescription>
        <detaileddescription>
<para>Might be uninitialized </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="126" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1a84511a449a0ef0b7aa1f6699bb203778" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref> &amp;</type>
        <definition>virtual Data_descriptor&amp; PDI::Context::operator[]</definition>
        <argsstring>(const char *name)=0</argsstring>
        <name>operator[]</name>
        <reimplementedby refid="classPDI_1_1Context__proxy_1a5eca8f0941b0a22e90e7dfc669799a96">operator[]</reimplementedby>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Accesses the descriptor for a specific name. </para>
        </briefdescription>
        <detaileddescription>
<para>Might be uninitialized </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="130" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1af3cc6b4e8ecd9bc50b933527ccd5af19" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classPDI_1_1Context_1_1Iterator" kindref="compound">Iterator</ref></type>
        <definition>virtual Iterator PDI::Context::begin</definition>
        <argsstring>()=0</argsstring>
        <name>begin</name>
        <reimplementedby refid="classPDI_1_1Context__proxy_1a2b0e1d5c7a43cd7e594eee845d97ccb1">begin</reimplementedby>
        <briefdescription>
<para>Returns an iterator on the first descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="134" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1ac987d27496498d563359f97ea9ec5416" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classPDI_1_1Context_1_1Iterator" kindref="compound">Iterator</ref></type>
        <definition>virtual Iterator PDI::Context::end</definition>
        <argsstring>()=0</argsstring>
        <name>end</name>
        <reimplementedby refid="classPDI_1_1Context__proxy_1a02f8060d4918a7bb648514a41e190b32">end</reimplementedby>
        <briefdescription>
<para>Returns an iterator past the last descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="138" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1afb530384d29404ab88a3c4210d03f19d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void PDI::Context::event</definition>
        <argsstring>(const char *name)=0</argsstring>
        <name>event</name>
        <reimplementedby refid="classPDI_1_1Context__proxy_1a687e53457726aa6a3f3208694b9119b5">event</reimplementedby>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Triggers a <ref refid="namespacePDI" kindref="compound">PDI</ref> "event". </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the event name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="143" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1a5e78992507def6399403ab6fe3704320" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacePDI_1a9c906943ee4d374699c804e1d94facd2" kindref="member">Logger_sptr</ref></type>
        <definition>virtual Logger_sptr PDI::Context::logger</definition>
        <argsstring>() const =0</argsstring>
        <name>logger</name>
        <reimplementedby refid="classPDI_1_1Context__proxy_1a3099171edab8110340cac24447187164">logger</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="145" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1af30302419766a7e4d302663c5d91636b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref></type>
        <definition>virtual Datatype_template_uptr PDI::Context::datatype</definition>
        <argsstring>(PC_tree_t node)=0</argsstring>
        <name>datatype</name>
        <reimplementedby refid="classPDI_1_1Context__proxy_1ac71f62967880f5bcd0fe095f17b3de4f">datatype</reimplementedby>
        <param>
          <type>PC_tree_t</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Creates a new datatype template from a paraconf-style config. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">node</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the type generated </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="152" column="32"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1a49ae5a3b3cb8d97b0f61e6a3dd9b0fd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void PDI::Context::add_datatype</definition>
        <argsstring>(const std::string &amp;name, Datatype_template_parser parser)=0</argsstring>
        <name>add_datatype</name>
        <reimplementedby refid="classPDI_1_1Context__proxy_1ab24dac03f6faddd05bd83b734cd1ca56">add_datatype</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classPDI_1_1Context_1a69e61f140cdf5555c635e160f85f3c86" kindref="member">Datatype_template_parser</ref></type>
          <declname>parser</declname>
        </param>
        <briefdescription>
<para>Adds new datatype parser to the context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the datatype to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">parser</parametername>
</parameternamelist>
<parameterdescription>
<para>function that creates new datatype_template from PC_tree_t </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="159" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1a3dab913bcf429835da411aed665fbaf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::function&lt; void()&gt;</type>
        <definition>virtual std::function&lt;void()&gt; PDI::Context::add_init_callback</definition>
        <argsstring>(const std::function&lt; void()&gt; &amp;callback)=0</argsstring>
        <name>add_init_callback</name>
        <reimplementedby refid="classPDI_1_1Context__proxy_1a94129d996ddab4f8e6a315936e5f89a7">add_init_callback</reimplementedby>
        <param>
          <type>const std::function&lt; void()&gt; &amp;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Adds new init callback to context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>function to call when data and metadata are loaded</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>function that removes callback </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="167" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1ac665503fccb2a848e7e85d5b2aa49ed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::function&lt; void()&gt;</type>
        <definition>virtual std::function&lt;void()&gt; PDI::Context::add_data_callback</definition>
        <argsstring>(const std::function&lt; void(const std::string &amp;, Ref)&gt; &amp;callback, const std::string &amp;name={})=0</argsstring>
        <name>add_data_callback</name>
        <reimplementedby refid="classPDI_1_1Context__proxy_1a4d931c5439ec18260fe2fdcab55bdf44">add_data_callback</reimplementedby>
        <param>
          <type>const std::function&lt; void(const std::string &amp;, <ref refid="namespacePDI_1adc363df268e6e68e68947a4fc799ca00" kindref="member">Ref</ref>)&gt; &amp;</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Adds new data callback to context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>function to call when data is being available </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the data on which call the callback, if not specified it's called on any data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>function that removes callback </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="176" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1a8aad7d27ce647a616bee1c911e274154" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::function&lt; void()&gt;</type>
        <definition>virtual std::function&lt;void()&gt; PDI::Context::add_event_callback</definition>
        <argsstring>(const std::function&lt; void(const std::string &amp;)&gt; &amp;callback, const std::string &amp;name={})=0</argsstring>
        <name>add_event_callback</name>
        <reimplementedby refid="classPDI_1_1Context__proxy_1ac6679915d7732185ea1d04656753f4b5">add_event_callback</reimplementedby>
        <param>
          <type>const std::function&lt; void(const std::string &amp;)&gt; &amp;</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Adds new event callback to context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>function to call when event is called </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the event on which call the callback, if not specified it's called on any event</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>function that removes callback </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="185" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1ac6e3712ecd0a4d9863fadb5f4a18283c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::function&lt; void()&gt;</type>
        <definition>virtual std::function&lt;void()&gt; PDI::Context::add_empty_desc_access_callback</definition>
        <argsstring>(const std::function&lt; void(const std::string &amp;)&gt; &amp;callback, const std::string &amp;name={})=0</argsstring>
        <name>add_empty_desc_access_callback</name>
        <reimplementedby refid="classPDI_1_1Context__proxy_1ad53ab286ae45a953c24145cfa889b099">add_empty_desc_access_callback</reimplementedby>
        <param>
          <type>const std::function&lt; void(const std::string &amp;)&gt; &amp;</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Adds new empty desc access callback to context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>function to call when event is called </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the data on which call the callback, if not specified it's called on any data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>function that removes callback </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="194" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1ad376dfd90c9699fe8513b3bab0765ebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void PDI::Context::finalize_and_exit</definition>
        <argsstring>()=0</argsstring>
        <name>finalize_and_exit</name>
        <reimplementedby refid="classPDI_1_1Context__proxy_1a9c5cec5bf707ad67e38e30a4ee12329b">finalize_and_exit</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="196" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>PDI::Context_proxy</label>
        <link refid="classPDI_1_1Context__proxy"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>PDI::Context</label>
        <link refid="classPDI_1_1Context"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>PDI::Context</label>
        <link refid="classPDI_1_1Context"/>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="64" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" bodystart="63" bodyend="175"/>
    <listofallmembers>
      <member refid="classPDI_1_1Context_1ac665503fccb2a848e7e85d5b2aa49ed5" prot="public" virt="pure-virtual"><scope>PDI::Context</scope><name>add_data_callback</name></member>
      <member refid="classPDI_1_1Context_1a49ae5a3b3cb8d97b0f61e6a3dd9b0fd6" prot="public" virt="pure-virtual"><scope>PDI::Context</scope><name>add_datatype</name></member>
      <member refid="classPDI_1_1Context_1ac6e3712ecd0a4d9863fadb5f4a18283c" prot="public" virt="pure-virtual"><scope>PDI::Context</scope><name>add_empty_desc_access_callback</name></member>
      <member refid="classPDI_1_1Context_1a8aad7d27ce647a616bee1c911e274154" prot="public" virt="pure-virtual"><scope>PDI::Context</scope><name>add_event_callback</name></member>
      <member refid="classPDI_1_1Context_1a3dab913bcf429835da411aed665fbaf5" prot="public" virt="pure-virtual"><scope>PDI::Context</scope><name>add_init_callback</name></member>
      <member refid="classPDI_1_1Context_1af3cc6b4e8ecd9bc50b933527ccd5af19" prot="public" virt="pure-virtual"><scope>PDI::Context</scope><name>begin</name></member>
      <member refid="classPDI_1_1Context_1af30302419766a7e4d302663c5d91636b" prot="public" virt="pure-virtual"><scope>PDI::Context</scope><name>datatype</name></member>
      <member refid="classPDI_1_1Context_1a69e61f140cdf5555c635e160f85f3c86" prot="public" virt="non-virtual"><scope>PDI::Context</scope><name>Datatype_template_parser</name></member>
      <member refid="classPDI_1_1Context_1ad9cc865b0a004cf218c2633d3907e231" prot="public" virt="pure-virtual"><scope>PDI::Context</scope><name>desc</name></member>
      <member refid="classPDI_1_1Context_1ad0b4ab8d2b8a7ff58ba260b50e968b96" prot="public" virt="pure-virtual"><scope>PDI::Context</scope><name>desc</name></member>
      <member refid="classPDI_1_1Context_1ac987d27496498d563359f97ea9ec5416" prot="public" virt="pure-virtual"><scope>PDI::Context</scope><name>end</name></member>
      <member refid="classPDI_1_1Context_1afb530384d29404ab88a3c4210d03f19d" prot="public" virt="pure-virtual"><scope>PDI::Context</scope><name>event</name></member>
      <member refid="classPDI_1_1Context_1ad376dfd90c9699fe8513b3bab0765ebb" prot="public" virt="pure-virtual"><scope>PDI::Context</scope><name>finalize_and_exit</name></member>
      <member refid="classPDI_1_1Context_1a128400c36b4d57f4594abbf8d3aefd5e" prot="protected" virt="non-virtual"><scope>PDI::Context</scope><name>get_iterator</name></member>
      <member refid="classPDI_1_1Context_1af014d0db0aa036bdaae6aa860a3a6b0b" prot="protected" virt="non-virtual"><scope>PDI::Context</scope><name>get_iterator</name></member>
      <member refid="classPDI_1_1Context_1a5e78992507def6399403ab6fe3704320" prot="public" virt="pure-virtual"><scope>PDI::Context</scope><name>logger</name></member>
      <member refid="classPDI_1_1Context_1af6b22d500d77d171fea9b5eb66b02c80" prot="public" virt="pure-virtual"><scope>PDI::Context</scope><name>operator[]</name></member>
      <member refid="classPDI_1_1Context_1a84511a449a0ef0b7aa1f6699bb203778" prot="public" virt="pure-virtual"><scope>PDI::Context</scope><name>operator[]</name></member>
      <member refid="classPDI_1_1Context_1a9a1eb26d8ff1d5b7b458b704a3cb26a8" prot="public" virt="virtual"><scope>PDI::Context</scope><name>~Context</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classPDI_1_1Context__proxy" kind="class" language="C++" prot="public">
    <compoundname>PDI::Context_proxy</compoundname>
    <basecompoundref refid="classPDI_1_1Context" prot="public" virt="non-virtual">PDI::Context</basecompoundref>
    <includes refid="context__proxy_8h" local="no">context_proxy.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classPDI_1_1Context__proxy_1ae335959a882cfe7c2c4506e1a0a2b7fa" prot="private" static="no" mutable="no">
        <type><ref refid="classPDI_1_1Context" kindref="compound">Context</ref> &amp;</type>
        <definition>Context&amp; PDI::Context_proxy::m_real_context</definition>
        <argsstring/>
        <name>m_real_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="82" column="9" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPDI_1_1Context__proxy_1a724d4d8f0eb4c4ab6f64cdbadb96a308" prot="private" static="no" mutable="no">
        <type><ref refid="namespacePDI_1a9c906943ee4d374699c804e1d94facd2" kindref="member">Logger_sptr</ref></type>
        <definition>Logger_sptr PDI::Context_proxy::m_plugin_logger</definition>
        <argsstring/>
        <name>m_plugin_logger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="83" column="13" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPDI_1_1Context__proxy_1a6b3641274f499c62348e00890c2efc0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Context_proxy::Context_proxy</definition>
        <argsstring>(Context &amp;ctx, std::string plugin_name, PC_tree_t logging_tree)</argsstring>
        <name>Context_proxy</name>
        <param>
          <type><ref refid="classPDI_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>plugin_name</declname>
        </param>
        <param>
          <type>PC_tree_t</type>
          <declname>logging_tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context__proxy_1a468a90eb7a0e0dbc88522b51688e9ed8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref> &amp;</type>
        <definition>Data_descriptor&amp; PDI::Context_proxy::desc</definition>
        <argsstring>(const std::string &amp;name) override</argsstring>
        <name>desc</name>
        <reimplements refid="classPDI_1_1Context_1ad9cc865b0a004cf218c2633d3907e231">desc</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para><ref refid="classPDI_1_1Context_1ad9cc865b0a004cf218c2633d3907e231" kindref="member">Context::desc</ref> proxy for plugins. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="89" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context__proxy_1a364d22cc3f95fdca9813c2727e54523e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref> &amp;</type>
        <definition>Data_descriptor&amp; PDI::Context_proxy::desc</definition>
        <argsstring>(const char *name) override</argsstring>
        <name>desc</name>
        <reimplements refid="classPDI_1_1Context_1ad0b4ab8d2b8a7ff58ba260b50e968b96">desc</reimplements>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para><ref refid="classPDI_1_1Context_1ad9cc865b0a004cf218c2633d3907e231" kindref="member">Context::desc</ref> proxy for plugins. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="93" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context__proxy_1addf3be2614c4d3639f439b0703d334c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref> &amp;</type>
        <definition>Data_descriptor&amp; PDI::Context_proxy::operator[]</definition>
        <argsstring>(const std::string &amp;name) override</argsstring>
        <name>operator[]</name>
        <reimplements refid="classPDI_1_1Context_1af6b22d500d77d171fea9b5eb66b02c80">operator[]</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para><ref refid="classPDI_1_1Context_1af6b22d500d77d171fea9b5eb66b02c80" kindref="member">Context::operator[]</ref> proxy for plugins. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="97" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context__proxy_1a5eca8f0941b0a22e90e7dfc669799a96" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref> &amp;</type>
        <definition>Data_descriptor&amp; PDI::Context_proxy::operator[]</definition>
        <argsstring>(const char *name) override</argsstring>
        <name>operator[]</name>
        <reimplements refid="classPDI_1_1Context_1a84511a449a0ef0b7aa1f6699bb203778">operator[]</reimplements>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para><ref refid="classPDI_1_1Context_1af6b22d500d77d171fea9b5eb66b02c80" kindref="member">Context::operator[]</ref> proxy for plugins. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="101" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context__proxy_1a2b0e1d5c7a43cd7e594eee845d97ccb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classPDI_1_1Context_1_1Iterator" kindref="compound">Iterator</ref></type>
        <definition>Iterator PDI::Context_proxy::begin</definition>
        <argsstring>() override</argsstring>
        <name>begin</name>
        <reimplements refid="classPDI_1_1Context_1af3cc6b4e8ecd9bc50b933527ccd5af19">begin</reimplements>
        <briefdescription>
<para><ref refid="classPDI_1_1Context_1af3cc6b4e8ecd9bc50b933527ccd5af19" kindref="member">Context::begin</ref> proxy for plugins. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="105" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context__proxy_1a02f8060d4918a7bb648514a41e190b32" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classPDI_1_1Context_1_1Iterator" kindref="compound">Iterator</ref></type>
        <definition>Iterator PDI::Context_proxy::end</definition>
        <argsstring>() override</argsstring>
        <name>end</name>
        <reimplements refid="classPDI_1_1Context_1ac987d27496498d563359f97ea9ec5416">end</reimplements>
        <briefdescription>
<para><ref refid="classPDI_1_1Context_1ac987d27496498d563359f97ea9ec5416" kindref="member">Context::end</ref> proxy for plugins. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="109" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context__proxy_1a687e53457726aa6a3f3208694b9119b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PDI::Context_proxy::event</definition>
        <argsstring>(const char *name) override</argsstring>
        <name>event</name>
        <reimplements refid="classPDI_1_1Context_1afb530384d29404ab88a3c4210d03f19d">event</reimplements>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para><ref refid="classPDI_1_1Context_1afb530384d29404ab88a3c4210d03f19d" kindref="member">Context::event</ref> proxy for plugins. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="113" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context__proxy_1a3099171edab8110340cac24447187164" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacePDI_1a9c906943ee4d374699c804e1d94facd2" kindref="member">Logger_sptr</ref></type>
        <definition>Logger_sptr PDI::Context_proxy::logger</definition>
        <argsstring>() const override</argsstring>
        <name>logger</name>
        <reimplements refid="classPDI_1_1Context_1a5e78992507def6399403ab6fe3704320">logger</reimplements>
        <briefdescription>
<para>Returns local logger. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="117" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context__proxy_1a23624a98f533a9da2b1584dfac18ad8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacePDI_1a9c906943ee4d374699c804e1d94facd2" kindref="member">Logger_sptr</ref></type>
        <definition>Logger_sptr PDI::Context_proxy::pdi_core_logger</definition>
        <argsstring>() const</argsstring>
        <name>pdi_core_logger</name>
        <briefdescription>
<para><ref refid="classPDI_1_1Context_1a5e78992507def6399403ab6fe3704320" kindref="member">Context::logger</ref> proxy for plugins. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="121" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context__proxy_1ac71f62967880f5bcd0fe095f17b3de4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref></type>
        <definition>Datatype_template_uptr PDI::Context_proxy::datatype</definition>
        <argsstring>(PC_tree_t node) override</argsstring>
        <name>datatype</name>
        <reimplements refid="classPDI_1_1Context_1af30302419766a7e4d302663c5d91636b">datatype</reimplements>
        <param>
          <type>PC_tree_t</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para><ref refid="classPDI_1_1Context_1af30302419766a7e4d302663c5d91636b" kindref="member">Context::datatype</ref> proxy for plugins. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="125" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context__proxy_1ab24dac03f6faddd05bd83b734cd1ca56" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PDI::Context_proxy::add_datatype</definition>
        <argsstring>(const std::string &amp;name, Datatype_template_parser parser) override</argsstring>
        <name>add_datatype</name>
        <reimplements refid="classPDI_1_1Context_1a49ae5a3b3cb8d97b0f61e6a3dd9b0fd6">add_datatype</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classPDI_1_1Context_1a69e61f140cdf5555c635e160f85f3c86" kindref="member">Datatype_template_parser</ref></type>
          <declname>parser</declname>
        </param>
        <briefdescription>
<para><ref refid="classPDI_1_1Context_1a49ae5a3b3cb8d97b0f61e6a3dd9b0fd6" kindref="member">Context::add_datatype</ref> proxy for plugins. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="129" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context__proxy_1a94129d996ddab4f8e6a315936e5f89a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; PDI::Context_proxy::add_init_callback</definition>
        <argsstring>(const std::function&lt; void()&gt; &amp;callback) override</argsstring>
        <name>add_init_callback</name>
        <reimplements refid="classPDI_1_1Context_1a3dab913bcf429835da411aed665fbaf5">add_init_callback</reimplements>
        <param>
          <type>const std::function&lt; void()&gt; &amp;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Adds new init callback to context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>function to call when data and metadata are loaded</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>function that removes callback </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="131" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context__proxy_1a4d931c5439ec18260fe2fdcab55bdf44" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; PDI::Context_proxy::add_data_callback</definition>
        <argsstring>(const std::function&lt; void(const std::string &amp;, Ref)&gt; &amp;callback, const std::string &amp;name={}) override</argsstring>
        <name>add_data_callback</name>
        <reimplements refid="classPDI_1_1Context_1ac665503fccb2a848e7e85d5b2aa49ed5">add_data_callback</reimplements>
        <param>
          <type>const std::function&lt; void(const std::string &amp;, <ref refid="namespacePDI_1adc363df268e6e68e68947a4fc799ca00" kindref="member">Ref</ref>)&gt; &amp;</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Adds new data callback to context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>function to call when data is being available </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the data on which call the callback, if not specified it's called on any data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>function that removes callback </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="133" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context__proxy_1ac6679915d7732185ea1d04656753f4b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; PDI::Context_proxy::add_event_callback</definition>
        <argsstring>(const std::function&lt; void(const std::string &amp;)&gt; &amp;callback, const std::string &amp;name={}) override</argsstring>
        <name>add_event_callback</name>
        <reimplements refid="classPDI_1_1Context_1a8aad7d27ce647a616bee1c911e274154">add_event_callback</reimplements>
        <param>
          <type>const std::function&lt; void(const std::string &amp;)&gt; &amp;</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Adds new event callback to context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>function to call when event is called </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the event on which call the callback, if not specified it's called on any event</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>function that removes callback </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="135" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context__proxy_1ad53ab286ae45a953c24145cfa889b099" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; PDI::Context_proxy::add_empty_desc_access_callback</definition>
        <argsstring>(const std::function&lt; void(const std::string &amp;)&gt; &amp;callback, const std::string &amp;name={}) override</argsstring>
        <name>add_empty_desc_access_callback</name>
        <reimplements refid="classPDI_1_1Context_1ac6e3712ecd0a4d9863fadb5f4a18283c">add_empty_desc_access_callback</reimplements>
        <param>
          <type>const std::function&lt; void(const std::string &amp;)&gt; &amp;</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Adds new empty desc access callback to context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>function to call when event is called </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the data on which call the callback, if not specified it's called on any data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>function that removes callback </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="137" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context__proxy_1a9c5cec5bf707ad67e38e30a4ee12329b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PDI::Context_proxy::finalize_and_exit</definition>
        <argsstring>() override</argsstring>
        <name>finalize_and_exit</name>
        <reimplements refid="classPDI_1_1Context_1ad376dfd90c9699fe8513b3bab0765ebb">finalize_and_exit</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="139" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>PDI::Context_proxy</label>
        <link refid="classPDI_1_1Context__proxy"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>PDI::Context</label>
        <link refid="classPDI_1_1Context"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>PDI::Context_proxy</label>
        <link refid="classPDI_1_1Context__proxy"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>PDI::Context</label>
        <link refid="classPDI_1_1Context"/>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" line="59" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h" bodystart="58" bodyend="118"/>
    <listofallmembers>
      <member refid="classPDI_1_1Context__proxy_1a4d931c5439ec18260fe2fdcab55bdf44" prot="public" virt="virtual"><scope>PDI::Context_proxy</scope><name>add_data_callback</name></member>
      <member refid="classPDI_1_1Context__proxy_1ab24dac03f6faddd05bd83b734cd1ca56" prot="public" virt="virtual"><scope>PDI::Context_proxy</scope><name>add_datatype</name></member>
      <member refid="classPDI_1_1Context__proxy_1ad53ab286ae45a953c24145cfa889b099" prot="public" virt="virtual"><scope>PDI::Context_proxy</scope><name>add_empty_desc_access_callback</name></member>
      <member refid="classPDI_1_1Context__proxy_1ac6679915d7732185ea1d04656753f4b5" prot="public" virt="virtual"><scope>PDI::Context_proxy</scope><name>add_event_callback</name></member>
      <member refid="classPDI_1_1Context__proxy_1a94129d996ddab4f8e6a315936e5f89a7" prot="public" virt="virtual"><scope>PDI::Context_proxy</scope><name>add_init_callback</name></member>
      <member refid="classPDI_1_1Context__proxy_1a2b0e1d5c7a43cd7e594eee845d97ccb1" prot="public" virt="virtual"><scope>PDI::Context_proxy</scope><name>begin</name></member>
      <member refid="classPDI_1_1Context__proxy_1a6b3641274f499c62348e00890c2efc0f" prot="public" virt="non-virtual"><scope>PDI::Context_proxy</scope><name>Context_proxy</name></member>
      <member refid="classPDI_1_1Context__proxy_1ac71f62967880f5bcd0fe095f17b3de4f" prot="public" virt="virtual"><scope>PDI::Context_proxy</scope><name>datatype</name></member>
      <member refid="classPDI_1_1Context_1a69e61f140cdf5555c635e160f85f3c86" prot="public" virt="non-virtual"><scope>PDI::Context_proxy</scope><name>Datatype_template_parser</name></member>
      <member refid="classPDI_1_1Context__proxy_1a468a90eb7a0e0dbc88522b51688e9ed8" prot="public" virt="virtual"><scope>PDI::Context_proxy</scope><name>desc</name></member>
      <member refid="classPDI_1_1Context__proxy_1a364d22cc3f95fdca9813c2727e54523e" prot="public" virt="virtual"><scope>PDI::Context_proxy</scope><name>desc</name></member>
      <member refid="classPDI_1_1Context__proxy_1a02f8060d4918a7bb648514a41e190b32" prot="public" virt="virtual"><scope>PDI::Context_proxy</scope><name>end</name></member>
      <member refid="classPDI_1_1Context__proxy_1a687e53457726aa6a3f3208694b9119b5" prot="public" virt="virtual"><scope>PDI::Context_proxy</scope><name>event</name></member>
      <member refid="classPDI_1_1Context__proxy_1a9c5cec5bf707ad67e38e30a4ee12329b" prot="public" virt="virtual"><scope>PDI::Context_proxy</scope><name>finalize_and_exit</name></member>
      <member refid="classPDI_1_1Context_1a128400c36b4d57f4594abbf8d3aefd5e" prot="protected" virt="non-virtual"><scope>PDI::Context_proxy</scope><name>get_iterator</name></member>
      <member refid="classPDI_1_1Context_1af014d0db0aa036bdaae6aa860a3a6b0b" prot="protected" virt="non-virtual"><scope>PDI::Context_proxy</scope><name>get_iterator</name></member>
      <member refid="classPDI_1_1Context__proxy_1a3099171edab8110340cac24447187164" prot="public" virt="virtual"><scope>PDI::Context_proxy</scope><name>logger</name></member>
      <member refid="classPDI_1_1Context__proxy_1a724d4d8f0eb4c4ab6f64cdbadb96a308" prot="private" virt="non-virtual"><scope>PDI::Context_proxy</scope><name>m_plugin_logger</name></member>
      <member refid="classPDI_1_1Context__proxy_1ae335959a882cfe7c2c4506e1a0a2b7fa" prot="private" virt="non-virtual"><scope>PDI::Context_proxy</scope><name>m_real_context</name></member>
      <member refid="classPDI_1_1Context__proxy_1addf3be2614c4d3639f439b0703d334c8" prot="public" virt="virtual"><scope>PDI::Context_proxy</scope><name>operator[]</name></member>
      <member refid="classPDI_1_1Context__proxy_1a5eca8f0941b0a22e90e7dfc669799a96" prot="public" virt="virtual"><scope>PDI::Context_proxy</scope><name>operator[]</name></member>
      <member refid="classPDI_1_1Context__proxy_1a23624a98f533a9da2b1584dfac18ad8f" prot="public" virt="non-virtual"><scope>PDI::Context_proxy</scope><name>pdi_core_logger</name></member>
      <member refid="classPDI_1_1Context_1a9a1eb26d8ff1d5b7b458b704a3cb26a8" prot="public" virt="virtual"><scope>PDI::Context_proxy</scope><name>~Context</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classPDI_1_1Data__descriptor" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>PDI::Data_descriptor</compoundname>
    <includes refid="data__descriptor_8h" local="no">data_descriptor.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPDI_1_1Data__descriptor_1a7da3ac4a848c78c47f4761b58635610b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type/>
        <definition>virtual PDI::Data_descriptor::~Data_descriptor</definition>
        <argsstring>()</argsstring>
        <name>~Data_descriptor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/data_descriptor.h" line="87" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Data__descriptor_1aed198838cea86715bb9c94502a3c8592" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void PDI::Data_descriptor::default_type</definition>
        <argsstring>(Datatype_template_uptr type)=0</argsstring>
        <name>default_type</name>
        <param>
          <type><ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Set the datatype template used to type raw pointers shared through this descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the datatype template attached to the descriptor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/data_descriptor.h" line="94" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Data__descriptor_1abedc4e8aca7319a1d6d39b1220161148" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref></type>
        <definition>virtual Datatype_template_uptr PDI::Data_descriptor::default_type</definition>
        <argsstring>()=0</argsstring>
        <name>default_type</name>
        <briefdescription>
<para>Access the datatype template used to type raw pointers shared through this descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the datatype template attached to the descriptor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/data_descriptor.h" line="101" column="32"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Data__descriptor_1a2ac11dc2986f02d20987fbe65e78ee4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool PDI::Data_descriptor::metadata</definition>
        <argsstring>() const =0</argsstring>
        <name>metadata</name>
        <briefdescription>
<para>Return true if the data is a metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/data_descriptor.h" line="105" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Data__descriptor_1a3fa7ad47543f0ddb94c1481883d7980e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void PDI::Data_descriptor::metadata</definition>
        <argsstring>(bool metadata)=0</argsstring>
        <name>metadata</name>
        <param>
          <type>bool</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
<para>Sets whether this describes a metadata or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>whether data shared through this descriptor should behave as a metadata </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/data_descriptor.h" line="111" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Data__descriptor_1ad7fb3caf8dd1c7c809d5a15c1d103a24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const std::string &amp;</type>
        <definition>virtual const std::string&amp; PDI::Data_descriptor::name</definition>
        <argsstring>() const =0</argsstring>
        <name>name</name>
        <briefdescription>
<para>Access the name of the descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/data_descriptor.h" line="115" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Data__descriptor_1a658635bdd5a35a34024586a297b7909f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacePDI_1adc363df268e6e68e68947a4fc799ca00" kindref="member">Ref</ref></type>
        <definition>virtual Ref PDI::Data_descriptor::ref</definition>
        <argsstring>()=0</argsstring>
        <name>ref</name>
        <briefdescription>
<para>Return a reference to the value of the data behind this descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/data_descriptor.h" line="119" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Data__descriptor_1a93b208cdd7f404db906d364ebd834ef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool PDI::Data_descriptor::empty</definition>
        <argsstring>()=0</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Checks whether this descriptor is empty (contains no reference) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/data_descriptor.h" line="125" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Data__descriptor_1a76adf3a628997299a690852078ffe9d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void PDI::Data_descriptor::share</definition>
        <argsstring>(void *data, bool read, bool write)=0</argsstring>
        <name>share</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>read</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>write</declname>
        </param>
        <briefdescription>
<para>Shares some data with <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">data</parametername>
</parameternamelist>
<parameterdescription>
<para>the shared data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read</parametername>
</parameternamelist>
<parameterdescription>
<para>whether read access is granted to other references </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write</parametername>
</parameternamelist>
<parameterdescription>
<para>whether write access is granted to other references </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/data_descriptor.h" line="132" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Data__descriptor_1a0b1f29ef05d4616441b029ae77a05956" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void *</type>
        <definition>virtual void* PDI::Data_descriptor::share</definition>
        <argsstring>(Ref ref, bool read, bool write)=0</argsstring>
        <name>share</name>
        <param>
          <type><ref refid="namespacePDI_1adc363df268e6e68e68947a4fc799ca00" kindref="member">Ref</ref></type>
          <declname>ref</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>read</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>write</declname>
        </param>
        <briefdescription>
<para>Shares some data with <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">ref</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to the shared data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the stored reference should have read access </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the stored reference should have write access </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the just shared buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/data_descriptor.h" line="140" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Data__descriptor_1a7a06bfb583e87456264761da9d4caa23" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void PDI::Data_descriptor::release</definition>
        <argsstring>()=0</argsstring>
        <name>release</name>
        <briefdescription>
<para>Releases ownership of a data shared with <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespacePDI" kindref="compound">PDI</ref> is then responsible to free the associated memory whenever necessary. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/data_descriptor.h" line="145" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Data__descriptor_1a5860e527b392bf7ffa678c83c9923921" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void *</type>
        <definition>virtual void* PDI::Data_descriptor::reclaim</definition>
        <argsstring>()=0</argsstring>
        <name>reclaim</name>
        <briefdescription>
<para>Reclaims ownership of a data buffer shared with <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespacePDI" kindref="compound">PDI</ref> does not manage the buffer memory anymore. <simplesect kind="return"><para>the address of the buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/data_descriptor.h" line="151" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>PDI::Data_descriptor</label>
        <link refid="classPDI_1_1Data__descriptor"/>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/data_descriptor.h" line="62" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/data_descriptor.h" bodystart="61" bodyend="131"/>
    <listofallmembers>
      <member refid="classPDI_1_1Data__descriptor_1aed198838cea86715bb9c94502a3c8592" prot="public" virt="pure-virtual"><scope>PDI::Data_descriptor</scope><name>default_type</name></member>
      <member refid="classPDI_1_1Data__descriptor_1abedc4e8aca7319a1d6d39b1220161148" prot="public" virt="pure-virtual"><scope>PDI::Data_descriptor</scope><name>default_type</name></member>
      <member refid="classPDI_1_1Data__descriptor_1a93b208cdd7f404db906d364ebd834ef2" prot="public" virt="pure-virtual"><scope>PDI::Data_descriptor</scope><name>empty</name></member>
      <member refid="classPDI_1_1Data__descriptor_1a2ac11dc2986f02d20987fbe65e78ee4b" prot="public" virt="pure-virtual"><scope>PDI::Data_descriptor</scope><name>metadata</name></member>
      <member refid="classPDI_1_1Data__descriptor_1a3fa7ad47543f0ddb94c1481883d7980e" prot="public" virt="pure-virtual"><scope>PDI::Data_descriptor</scope><name>metadata</name></member>
      <member refid="classPDI_1_1Data__descriptor_1ad7fb3caf8dd1c7c809d5a15c1d103a24" prot="public" virt="pure-virtual"><scope>PDI::Data_descriptor</scope><name>name</name></member>
      <member refid="classPDI_1_1Data__descriptor_1a5860e527b392bf7ffa678c83c9923921" prot="public" virt="pure-virtual"><scope>PDI::Data_descriptor</scope><name>reclaim</name></member>
      <member refid="classPDI_1_1Data__descriptor_1a658635bdd5a35a34024586a297b7909f" prot="public" virt="pure-virtual"><scope>PDI::Data_descriptor</scope><name>ref</name></member>
      <member refid="classPDI_1_1Data__descriptor_1a7a06bfb583e87456264761da9d4caa23" prot="public" virt="pure-virtual"><scope>PDI::Data_descriptor</scope><name>release</name></member>
      <member refid="classPDI_1_1Data__descriptor_1a76adf3a628997299a690852078ffe9d3" prot="public" virt="pure-virtual"><scope>PDI::Data_descriptor</scope><name>share</name></member>
      <member refid="classPDI_1_1Data__descriptor_1a0b1f29ef05d4616441b029ae77a05956" prot="public" virt="pure-virtual"><scope>PDI::Data_descriptor</scope><name>share</name></member>
      <member refid="classPDI_1_1Data__descriptor_1a7da3ac4a848c78c47f4761b58635610b" prot="public" virt="virtual"><scope>PDI::Data_descriptor</scope><name>~Data_descriptor</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classPDI_1_1Datatype" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>PDI::Datatype</compoundname>
    <basecompoundref refid="classPDI_1_1Datatype__template" prot="public" virt="non-virtual">PDI::Datatype_template</basecompoundref>
    <derivedcompoundref refid="classPDI_1_1Array__datatype" prot="public" virt="non-virtual">PDI::Array_datatype</derivedcompoundref>
    <derivedcompoundref refid="classPDI_1_1Pointer__datatype" prot="public" virt="non-virtual">PDI::Pointer_datatype</derivedcompoundref>
    <derivedcompoundref refid="classPDI_1_1Record__datatype" prot="public" virt="non-virtual">PDI::Record_datatype</derivedcompoundref>
    <derivedcompoundref refid="classPDI_1_1Scalar__datatype" prot="public" virt="non-virtual">PDI::Scalar_datatype</derivedcompoundref>
    <includes refid="datatype_8h" local="no">datatype.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPDI_1_1Datatype_1ad2e19537809ba143ab9130c95b237dc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Datatype::~Datatype</definition>
        <argsstring>() override</argsstring>
        <name>~Datatype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Datatype_1af42770105e821dea4ca30f0992f2274c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>virtual Datatype_uptr PDI::Datatype::clone_type</definition>
        <argsstring>() const =0</argsstring>
        <name>clone_type</name>
        <reimplementedby refid="classPDI_1_1Pointer__datatype_1a4ea685b28d9be745718e1d4715a6c544">clone_type</reimplementedby>
        <reimplementedby refid="classPDI_1_1Scalar__datatype_1a6c851958754a3f04881f6e12b27ff019">clone_type</reimplementedby>
        <reimplementedby refid="classPDI_1_1Array__datatype_1a332187b330bb85e949fe695620c8e138">clone_type</reimplementedby>
        <reimplementedby refid="classPDI_1_1Record__datatype_1a898b8663ac36edfb67cacb1987dfb644">clone_type</reimplementedby>
        <briefdescription>
<para>Creates a new datatype as an exact copy of this one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the dense type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype.h" line="96" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Datatype_1a8cdf8ed0c21b40519239290171252a5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool PDI::Datatype::operator==</definition>
        <argsstring>(const Datatype &amp;other) const =0</argsstring>
        <name>operator==</name>
        <reimplementedby refid="classPDI_1_1Pointer__datatype_1a7baec7ae29e45f331653b7dad44d2ba1">operator==</reimplementedby>
        <reimplementedby refid="classPDI_1_1Scalar__datatype_1ae68e0988a4d9718f3d75105235445421">operator==</reimplementedby>
        <reimplementedby refid="classPDI_1_1Array__datatype_1a0ca6cf15fda5ca1406b24328e5571652">operator==</reimplementedby>
        <reimplementedby refid="classPDI_1_1Record__datatype_1aa70ca0cdfdad5344b7ddffb55b30acdc">operator==</reimplementedby>
        <param>
          <type>const <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Test for equality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref>'s are equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype.h" line="103" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Datatype_1af80638919cb31c61451d0bc6220a69e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PDI::Datatype::operator!=</definition>
        <argsstring>(const Datatype &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Test for inequality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref>'s are different </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype.h" line="110" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Datatype_1a565e585893035b39f95520543cea49de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>virtual Datatype_uptr PDI::Datatype::densify</definition>
        <argsstring>() const =0</argsstring>
        <name>densify</name>
        <reimplementedby refid="classPDI_1_1Pointer__datatype_1a52d14b97faf1ace6fda56c6763e05adc">densify</reimplementedby>
        <reimplementedby refid="classPDI_1_1Scalar__datatype_1a6cb314a53a731017de5bae2c00933761">densify</reimplementedby>
        <reimplementedby refid="classPDI_1_1Array__datatype_1a2ab426d296ba51a2ed47c335dbd0c3da">densify</reimplementedby>
        <reimplementedby refid="classPDI_1_1Record__datatype_1abb72cae0af1e9d4923165abd7044450c">densify</reimplementedby>
        <briefdescription>
<para>Creates a new datatype as the dense copy of this one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype.h" line="116" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Datatype_1a15b82a52cfafc5fc1dbc21b043588693" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool PDI::Datatype::dense</definition>
        <argsstring>() const =0</argsstring>
        <name>dense</name>
        <reimplementedby refid="classPDI_1_1Pointer__datatype_1a912fc3ae386f2e2368b39dad95b4a4d0">dense</reimplementedby>
        <reimplementedby refid="classPDI_1_1Scalar__datatype_1aa1e4967c4b564a06ee80d2d9f3499931">dense</reimplementedby>
        <reimplementedby refid="classPDI_1_1Array__datatype_1a31286281747dffd22dd10c3a929eef51">dense</reimplementedby>
        <reimplementedby refid="classPDI_1_1Record__datatype_1ab5211f58ddcfbbb88243259182db1271">dense</reimplementedby>
        <briefdescription>
<para>Indicate if the datatype is dense or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether the datatype is dense </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype.h" line="122" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Datatype_1aa5254560c8fd98403b2067091f93b3c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t PDI::Datatype::datasize</definition>
        <argsstring>() const =0</argsstring>
        <name>datasize</name>
        <reimplementedby refid="classPDI_1_1Pointer__datatype_1ae39bc5277b114f47dd98da1a3f451f2f">datasize</reimplementedby>
        <reimplementedby refid="classPDI_1_1Scalar__datatype_1ad8883c6045742e19ee34606681e2fcd4">datasize</reimplementedby>
        <reimplementedby refid="classPDI_1_1Array__datatype_1a00fb46532bb0b8a63111130715a10137">datasize</reimplementedby>
        <reimplementedby refid="classPDI_1_1Record__datatype_1aa0e39bbe49abdbc4d6e806e148bbef30">datasize</reimplementedby>
        <briefdescription>
<para>Computes the data size of a type, excluding potentially unused memory from a sparse type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype.h" line="129" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Datatype_1a341a15d47396f1cd9bb12e43a5cd5a40" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t PDI::Datatype::buffersize</definition>
        <argsstring>() const =0</argsstring>
        <name>buffersize</name>
        <reimplementedby refid="classPDI_1_1Pointer__datatype_1a8251c192e15741a1a471eea11045d49d">buffersize</reimplementedby>
        <reimplementedby refid="classPDI_1_1Scalar__datatype_1a8e0bb04f38f016e1050aae8ce95aa14d">buffersize</reimplementedby>
        <reimplementedby refid="classPDI_1_1Array__datatype_1adb00b9bfc6a70d320111bff1244ad979">buffersize</reimplementedby>
        <reimplementedby refid="classPDI_1_1Record__datatype_1aed94e24402cada695d056a4aea0e258e">buffersize</reimplementedby>
        <briefdescription>
<para>Computes the data size of a type, including potentially unused memory from a sparse type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype.h" line="136" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Datatype_1a2d1d0228dddffc6ee786d56494fde972" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t PDI::Datatype::alignment</definition>
        <argsstring>() const =0</argsstring>
        <name>alignment</name>
        <reimplementedby refid="classPDI_1_1Pointer__datatype_1a5850529f74a112c880b462780441ca92">alignment</reimplementedby>
        <reimplementedby refid="classPDI_1_1Scalar__datatype_1a19cafc9d088635f5826f3c2cdc9246ee">alignment</reimplementedby>
        <reimplementedby refid="classPDI_1_1Array__datatype_1ae744734eedbb48f61e0bde159940d9ce">alignment</reimplementedby>
        <reimplementedby refid="classPDI_1_1Record__datatype_1a359deae4113398d9bf252b81be2fa282">alignment</reimplementedby>
        <briefdescription>
<para>Returns the required alignment for a type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype.h" line="142" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Datatype_1ae5f85834cbae56fca2b4cf7e7fbd0df3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool PDI::Datatype::simple</definition>
        <argsstring>() const =0</argsstring>
        <name>simple</name>
        <reimplementedby refid="classPDI_1_1Pointer__datatype_1ab34ae78cae3a944fb741bf49c1538d4f">simple</reimplementedby>
        <reimplementedby refid="classPDI_1_1Scalar__datatype_1acf14074f0e2fdcec41b4f7cb7e3e27ea">simple</reimplementedby>
        <reimplementedby refid="classPDI_1_1Array__datatype_1a9ba8909f75de2d4f18749fe9362a28d2">simple</reimplementedby>
        <reimplementedby refid="classPDI_1_1Record__datatype_1a6286765cf6a1d050603f7adaed1edc93">simple</reimplementedby>
        <briefdescription>
<para>Tells if data can be copied as bytes (if type is dense) and doesn't need a destroyer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if data has trivial copier and destroyer, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype.h" line="149" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Datatype_1a988bab02472c4dc4206b40cd093030c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void *</type>
        <definition>virtual void* PDI::Datatype::data_to_dense_copy</definition>
        <argsstring>(void *to, const void *from) const =0</argsstring>
        <name>data_to_dense_copy</name>
        <reimplementedby refid="classPDI_1_1Array__datatype_1acda82205a6bd87bf953f72d0d03c2f38">data_to_dense_copy</reimplementedby>
        <reimplementedby refid="classPDI_1_1Record__datatype_1a4369630a6133e160a3c57b47cf995dad">data_to_dense_copy</reimplementedby>
        <reimplementedby refid="classPDI_1_1Pointer__datatype_1ab5522e3a7663533a0b422a22228427f0">data_to_dense_copy</reimplementedby>
        <reimplementedby refid="classPDI_1_1Scalar__datatype_1aeb69fdafffc82b7cd38edf2d8742d3d8">data_to_dense_copy</reimplementedby>
        <param>
          <type>void *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Creates a dense deep copy of data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">to</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the allocated memory to fill (dense data) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the copied data (size of buffersize) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>updated <lsquo/>to<rsquo/> pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype.h" line="158" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Datatype_1a00559b1afaf47436b64a26841b486a14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void *</type>
        <definition>virtual void* PDI::Datatype::data_from_dense_copy</definition>
        <argsstring>(void *to, const void *from) const =0</argsstring>
        <name>data_from_dense_copy</name>
        <reimplementedby refid="classPDI_1_1Array__datatype_1a03d7af4898203df8615f69f79b7e9e9e">data_from_dense_copy</reimplementedby>
        <reimplementedby refid="classPDI_1_1Record__datatype_1a39797d23185a294f08dc2ebff976affe">data_from_dense_copy</reimplementedby>
        <reimplementedby refid="classPDI_1_1Pointer__datatype_1ae467c732de6a9922c0a770a133ca8a37">data_from_dense_copy</reimplementedby>
        <reimplementedby refid="classPDI_1_1Scalar__datatype_1aa184b8c29bc91d5a09b7713db11807d0">data_from_dense_copy</reimplementedby>
        <param>
          <type>void *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Creates a sparse deep copy of dense data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">to</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the allocated memory to fill (size of buffersize) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the copied data (dense data) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>updated <lsquo/>to<rsquo/> pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype.h" line="167" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Datatype_1a73bcba3fb827468daeda6ab0a4fd92b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void PDI::Datatype::destroy_data</definition>
        <argsstring>(void *ptr) const =0</argsstring>
        <name>destroy_data</name>
        <reimplementedby refid="classPDI_1_1Array__datatype_1ac4160324349cf4dd13bd36e8894a61cd">destroy_data</reimplementedby>
        <reimplementedby refid="classPDI_1_1Record__datatype_1aca8e88ed37db5f20244637e8c69d7a61">destroy_data</reimplementedby>
        <reimplementedby refid="classPDI_1_1Pointer__datatype_1a1b1c55a87cf7f8642729751cf36d30b6">destroy_data</reimplementedby>
        <reimplementedby refid="classPDI_1_1Scalar__datatype_1a18fcaddec51a46921d6e4e42deee9026">destroy_data</reimplementedby>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Function used to delete the data behind the datatype. </para>
        </briefdescription>
        <detaileddescription>
<para>This should not deallocate the memory.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>to the data to free </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype.h" line="174" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Datatype_1aff4be6868c49816ef432098357ab5789" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string PDI::Datatype::debug_string</definition>
        <argsstring>() const =0</argsstring>
        <name>debug_string</name>
        <reimplementedby refid="classPDI_1_1Pointer__datatype_1a6aa1ae90b69129fec7e148547d262836">debug_string</reimplementedby>
        <reimplementedby refid="classPDI_1_1Scalar__datatype_1a5fcf657a2d7957801d45e6501a8627fd">debug_string</reimplementedby>
        <reimplementedby refid="classPDI_1_1Array__datatype_1ae1fa60769b6a03ff0d6b5f0b82523fec">debug_string</reimplementedby>
        <reimplementedby refid="classPDI_1_1Record__datatype_1a18daca7d61b260de5457114643e2af75">debug_string</reimplementedby>
        <briefdescription>
<para>Returns the datatype yaml representation as a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the datatype yaml representation as a string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype.h" line="180" column="21"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> is a <ref refid="classPDI_1_1Datatype__template" kindref="compound">Datatype_template</ref> that accepts no argument. </para>
    </briefdescription>
    <detaileddescription>
<para>It represents the memory layout of data and supports some simple operations on it:<itemizedlist>
<listitem><para>accessing its content</para>
</listitem><listitem><para>cloning and destruction </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>PDI::Datatype</label>
        <link refid="classPDI_1_1Datatype"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>PDI::Datatype_template</label>
        <link refid="classPDI_1_1Datatype__template"/>
      </node>
      <node id="3">
        <label>PDI::Array_datatype</label>
        <link refid="classPDI_1_1Array__datatype"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>PDI::Scalar_datatype</label>
        <link refid="classPDI_1_1Scalar__datatype"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>PDI::Record_datatype</label>
        <link refid="classPDI_1_1Record__datatype"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>PDI::Pointer_datatype</label>
        <link refid="classPDI_1_1Pointer__datatype"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>PDI::Datatype</label>
        <link refid="classPDI_1_1Datatype"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>PDI::Datatype_template</label>
        <link refid="classPDI_1_1Datatype__template"/>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype.h" line="66" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype.h" bodystart="64" bodyend="160"/>
    <listofallmembers>
      <member refid="classPDI_1_1Datatype_1a2d1d0228dddffc6ee786d56494fde972" prot="public" virt="pure-virtual"><scope>PDI::Datatype</scope><name>alignment</name></member>
      <member refid="classPDI_1_1Datatype_1a341a15d47396f1cd9bb12e43a5cd5a40" prot="public" virt="pure-virtual"><scope>PDI::Datatype</scope><name>buffersize</name></member>
      <member refid="classPDI_1_1Datatype__template_1a6c6cb02f6f9bab3e9fbf8826afae677a" prot="public" virt="pure-virtual"><scope>PDI::Datatype</scope><name>clone</name></member>
      <member refid="classPDI_1_1Datatype_1af42770105e821dea4ca30f0992f2274c" prot="public" virt="pure-virtual"><scope>PDI::Datatype</scope><name>clone_type</name></member>
      <member refid="classPDI_1_1Datatype_1a00559b1afaf47436b64a26841b486a14" prot="public" virt="pure-virtual"><scope>PDI::Datatype</scope><name>data_from_dense_copy</name></member>
      <member refid="classPDI_1_1Datatype_1a988bab02472c4dc4206b40cd093030c3" prot="public" virt="pure-virtual"><scope>PDI::Datatype</scope><name>data_to_dense_copy</name></member>
      <member refid="classPDI_1_1Datatype_1aa5254560c8fd98403b2067091f93b3c9" prot="public" virt="pure-virtual"><scope>PDI::Datatype</scope><name>datasize</name></member>
      <member refid="classPDI_1_1Datatype_1aff4be6868c49816ef432098357ab5789" prot="public" virt="pure-virtual"><scope>PDI::Datatype</scope><name>debug_string</name></member>
      <member refid="classPDI_1_1Datatype_1a15b82a52cfafc5fc1dbc21b043588693" prot="public" virt="pure-virtual"><scope>PDI::Datatype</scope><name>dense</name></member>
      <member refid="classPDI_1_1Datatype_1a565e585893035b39f95520543cea49de" prot="public" virt="pure-virtual"><scope>PDI::Datatype</scope><name>densify</name></member>
      <member refid="classPDI_1_1Datatype_1a73bcba3fb827468daeda6ab0a4fd92b5" prot="public" virt="pure-virtual"><scope>PDI::Datatype</scope><name>destroy_data</name></member>
      <member refid="classPDI_1_1Datatype__template_1a31b2c6cd579c3100c6b03bf195aa0e80" prot="public" virt="pure-virtual"><scope>PDI::Datatype</scope><name>evaluate</name></member>
      <member refid="classPDI_1_1Datatype__template_1aa539eee3b7312a7f1be7fd85b64b5c85" prot="public" virt="non-virtual"><scope>PDI::Datatype</scope><name>load_basic_datatypes</name></member>
      <member refid="classPDI_1_1Datatype_1af80638919cb31c61451d0bc6220a69e3" prot="public" virt="non-virtual"><scope>PDI::Datatype</scope><name>operator!=</name></member>
      <member refid="classPDI_1_1Datatype_1a8cdf8ed0c21b40519239290171252a5b" prot="public" virt="pure-virtual"><scope>PDI::Datatype</scope><name>operator==</name></member>
      <member refid="classPDI_1_1Datatype_1ae5f85834cbae56fca2b4cf7e7fbd0df3" prot="public" virt="pure-virtual"><scope>PDI::Datatype</scope><name>simple</name></member>
      <member refid="classPDI_1_1Datatype_1ad2e19537809ba143ab9130c95b237dc2" prot="public" virt="non-virtual"><scope>PDI::Datatype</scope><name>~Datatype</name></member>
      <member refid="classPDI_1_1Datatype__template_1a8722c4b873d42931d8e159abaa62ff27" prot="public" virt="virtual"><scope>PDI::Datatype</scope><name>~Datatype_template</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classPDI_1_1Datatype__template" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>PDI::Datatype_template</compoundname>
    <derivedcompoundref refid="classPDI_1_1Datatype" prot="public" virt="non-virtual">PDI::Datatype</derivedcompoundref>
    <includes refid="datatype__template_8h" local="no">datatype_template.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPDI_1_1Datatype__template_1a8722c4b873d42931d8e159abaa62ff27" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type/>
        <definition>virtual PDI::Datatype_template::~Datatype_template</definition>
        <argsstring>()</argsstring>
        <name>~Datatype_template</name>
        <briefdescription>
<para>Destroys the template. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype_template.h" line="83" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Datatype__template_1a6c6cb02f6f9bab3e9fbf8826afae677a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref></type>
        <definition>virtual Datatype_template_uptr PDI::Datatype_template::clone</definition>
        <argsstring>() const =0</argsstring>
        <name>clone</name>
        <reimplementedby refid="classPDI_1_1Pointer__datatype_1af594a11c6575131d709a7792f7c0f28e">clone</reimplementedby>
        <reimplementedby refid="classPDI_1_1Scalar__datatype_1a8f929d17ea26d91d1de5b17aa3654b38">clone</reimplementedby>
        <reimplementedby refid="classPDI_1_1Array__datatype_1a524b1fe42651c90a8cfb3b66eadf9fb4">clone</reimplementedby>
        <reimplementedby refid="classPDI_1_1Record__datatype_1a400a1d29c9727f494a00315fe21451f4">clone</reimplementedby>
        <briefdescription>
<para>Creates a new datatype as an exact copy of this one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the dense type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype_template.h" line="89" column="32"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Datatype__template_1a31b2c6cd579c3100c6b03bf195aa0e80" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>virtual Datatype_uptr PDI::Datatype_template::evaluate</definition>
        <argsstring>(Context &amp;ctx) const =0</argsstring>
        <name>evaluate</name>
        <reimplementedby refid="classPDI_1_1Pointer__datatype_1a0c5618604492b253bce03f9a6d6c9161">evaluate</reimplementedby>
        <reimplementedby refid="classPDI_1_1Scalar__datatype_1afffe6f77d615f1d570607758a62722bd">evaluate</reimplementedby>
        <reimplementedby refid="classPDI_1_1Array__datatype_1ae6d1fdc3128dd1bb1d61442c33416917">evaluate</reimplementedby>
        <reimplementedby refid="classPDI_1_1Record__datatype_1a974a5b925407ade93a7f2b96a0ffd528">evaluate</reimplementedby>
        <param>
          <type><ref refid="classPDI_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Creates a new datatype by resolving the value of all metadata references. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context in which to evaluate this template </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the evaluated type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype_template.h" line="96" column="23"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classPDI_1_1Datatype__template_1aa539eee3b7312a7f1be7fd85b64b5c85" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void PDI::Datatype_template::load_basic_datatypes</definition>
        <argsstring>(Context &amp;ctx)</argsstring>
        <name>load_basic_datatypes</name>
        <param>
          <type><ref refid="classPDI_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Adds to the context the basic Array, Record, C and Fortran datatypes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context where to add the datatypes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype_template.h" line="103" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>PDI::Datatype</label>
        <link refid="classPDI_1_1Datatype"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>PDI::Datatype_template</label>
        <link refid="classPDI_1_1Datatype__template"/>
      </node>
      <node id="3">
        <label>PDI::Array_datatype</label>
        <link refid="classPDI_1_1Array__datatype"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>PDI::Scalar_datatype</label>
        <link refid="classPDI_1_1Scalar__datatype"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>PDI::Record_datatype</label>
        <link refid="classPDI_1_1Record__datatype"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>PDI::Pointer_datatype</label>
        <link refid="classPDI_1_1Pointer__datatype"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>PDI::Datatype_template</label>
        <link refid="classPDI_1_1Datatype__template"/>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype_template.h" line="57" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype_template.h" bodystart="56" bodyend="83"/>
    <listofallmembers>
      <member refid="classPDI_1_1Datatype__template_1a6c6cb02f6f9bab3e9fbf8826afae677a" prot="public" virt="pure-virtual"><scope>PDI::Datatype_template</scope><name>clone</name></member>
      <member refid="classPDI_1_1Datatype__template_1a31b2c6cd579c3100c6b03bf195aa0e80" prot="public" virt="pure-virtual"><scope>PDI::Datatype_template</scope><name>evaluate</name></member>
      <member refid="classPDI_1_1Datatype__template_1aa539eee3b7312a7f1be7fd85b64b5c85" prot="public" virt="non-virtual"><scope>PDI::Datatype_template</scope><name>load_basic_datatypes</name></member>
      <member refid="classPDI_1_1Datatype__template_1a8722c4b873d42931d8e159abaa62ff27" prot="public" virt="virtual"><scope>PDI::Datatype_template</scope><name>~Datatype_template</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classPDI_1_1Error" kind="class" language="C++" prot="public">
    <compoundname>PDI::Error</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::exception</basecompoundref>
    <includes refid="error_8h" local="no">error.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classPDI_1_1Error_1af9b3d1b801c1e865ed19b80bf5447602" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string PDI::Error::m_what</definition>
        <argsstring/>
        <name>m_what</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/error.h" line="86" column="13" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/error.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPDI_1_1Error_1a408c9d5f10d28fd02f9af730378952d5" prot="private" static="no" mutable="no">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI::Error::m_status</definition>
        <argsstring/>
        <name>m_status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/error.h" line="88" column="14" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/error.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPDI_1_1Error_1a2d98d265473ba642fcdb5e7c68fea962" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type/>
        <definition>PDI::Error::Error</definition>
        <argsstring>(PDI_status_t errcode, const char *fmt, const Args &amp;... args)</argsstring>
        <name>Error</name>
        <param>
          <type>PDI_status_t</type>
          <declname>errcode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="namespacePDI" kindref="compound">PDI</ref> error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">errcode</parametername>
</parameternamelist>
<parameterdescription>
<para>the error code of the error to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>an errror message as a python-style format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>the python-style parameters for the message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>printf </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/error.h" line="98" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/error.h" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Error_1aa35ec710a94e89b80540a7030296774b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Error::Error</definition>
        <argsstring>(PDI_status_t errcode, const char *fmt)</argsstring>
        <name>Error</name>
        <param>
          <type>PDI_status_t</type>
          <declname>errcode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/error.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Error_1a0286a35d8013e918c27f44d199c42aba" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* PDI::Error::what</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>what</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/error.h" line="105" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Error_1a96f2da1344848f7862d6d4227ba7c82a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI::Error::status</definition>
        <argsstring>() const noexcept</argsstring>
        <name>status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/error.h" line="107" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>PDI::Error</label>
        <link refid="classPDI_1_1Error"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::exception</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>PDI::Error</label>
        <link refid="classPDI_1_1Error"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::exception</label>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/error.h" line="63" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/error.h" bodystart="61" bodyend="87"/>
    <listofallmembers>
      <member refid="classPDI_1_1Error_1a2d98d265473ba642fcdb5e7c68fea962" prot="public" virt="non-virtual"><scope>PDI::Error</scope><name>Error</name></member>
      <member refid="classPDI_1_1Error_1aa35ec710a94e89b80540a7030296774b" prot="public" virt="non-virtual"><scope>PDI::Error</scope><name>Error</name></member>
      <member refid="classPDI_1_1Error_1a408c9d5f10d28fd02f9af730378952d5" prot="private" virt="non-virtual"><scope>PDI::Error</scope><name>m_status</name></member>
      <member refid="classPDI_1_1Error_1af9b3d1b801c1e865ed19b80bf5447602" prot="private" virt="non-virtual"><scope>PDI::Error</scope><name>m_what</name></member>
      <member refid="classPDI_1_1Error_1a96f2da1344848f7862d6d4227ba7c82a" prot="public" virt="non-virtual"><scope>PDI::Error</scope><name>status</name></member>
      <member refid="classPDI_1_1Error_1a0286a35d8013e918c27f44d199c42aba" prot="public" virt="non-virtual"><scope>PDI::Error</scope><name>what</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classPDI_1_1Expression" kind="class" language="C++" prot="public">
    <compoundname>PDI::Expression</compoundname>
    <includes refid="expression_8h" local="no">expression.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classPDI_1_1Expression_1a3e6bf686ab86050839a4274188e2ce70" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; PDI::Expression::m_impl</definition>
        <argsstring/>
        <name>m_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="88" column="17" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classPDI_1_1Expression_1a8c66a7989969be49c4d3d3a377cd4634" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Expression::Expression</definition>
        <argsstring>(std::unique_ptr&lt; Impl &gt;)</argsstring>
        <name>Expression</name>
        <param>
          <type>std::unique_ptr&lt; Impl &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="90" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPDI_1_1Expression_1a293023f0af1aae062d79ec60ff08f923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Expression::Expression</definition>
        <argsstring>()</argsstring>
        <name>Expression</name>
        <briefdescription>
<para>Builds an empty expression. </para>
        </briefdescription>
        <detaileddescription>
<para>No operation can be used on an empty expression, it can only be assigned to </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Expression_1aea47980bd0571cb2e31acbe414007e6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Expression::Expression</definition>
        <argsstring>(const Expression &amp;expr)</argsstring>
        <name>Expression</name>
        <param>
          <type>const <ref refid="classPDI_1_1Expression" kindref="compound">Expression</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Copies an expression. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">expr</parametername>
</parameternamelist>
<parameterdescription>
<para>the expression to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Expression_1acccc3e0d18b2b64e3eefd871f19dba2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Expression::Expression</definition>
        <argsstring>(Expression &amp;&amp;expr)</argsstring>
        <name>Expression</name>
        <param>
          <type><ref refid="classPDI_1_1Expression" kindref="compound">Expression</ref> &amp;&amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Moves an expression. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">expr</parametername>
</parameternamelist>
<parameterdescription>
<para>the expression to move </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Expression_1abb55fe61cfcc9fc60e587d1b8b5e87de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Expression::Expression</definition>
        <argsstring>(const char *expr)</argsstring>
        <name>Expression</name>
        <param>
          <type>const char *</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Builds (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>parse) an expression from a string</para>
<para>The grammar of an expression is as follow: <programlisting filename="docs/expression_grammar.in.txt"><codeline><highlight class="comment">/*<sp/>parsing<sp/>as<sp/>a<sp/>REFERENCE<sp/>is<sp/>preferred<sp/>over<sp/>OPERATION</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>parsing<sp/>as<sp/>an<sp/>OPERATION<sp/>is<sp/>preferred<sp/>over<sp/>STRING_LITERAL</highlight></codeline>
<codeline><highlight class="comment">*/</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal">EXPRESSION<sp/><sp/><sp/><sp/><sp/>:=<sp/>REFERENCE<sp/>|<sp/>OPERATION<sp/>|<sp/>STRING_LITERAL</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">STRING_LITERAL<sp/>:=<sp/>(<sp/>CHAR<sp/>|<sp/></highlight><highlight class="charliteral">'\'</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">'\'</highlight><highlight class="normal"><sp/>|<sp/></highlight><highlight class="charliteral">'\'</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">'$'</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>REFERENCE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/></highlight><highlight class="charliteral">'$'</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">'('</highlight><highlight class="normal"><sp/>OPERATION<sp/></highlight><highlight class="charliteral">')'</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)*</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="comment">/*<sp/>The<sp/>operator<sp/>descending<sp/>precedence<sp/>order<sp/>is:</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>1.<sp/>*,<sp/>/,<sp/>%:<sp/>multiplication,<sp/>division<sp/>and<sp/>modulo,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>2.<sp/>+,<sp/>-:<sp/>addition<sp/>and<sp/>subtraction,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>3.<sp/>&lt;,<sp/>&gt;:<sp/>less<sp/>than<sp/>and<sp/>greater<sp/>than,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>4.<sp/>=:<sp/>equality,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>5.<sp/>&amp;:<sp/>logical<sp/>AND,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>6.<sp/>|:<sp/>logical<sp/>OR.</highlight></codeline>
<codeline><highlight class="comment">*/</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal">OPERATION<sp/><sp/><sp/><sp/><sp/><sp/>:=<sp/>TERM<sp/>(<sp/>OPERATOR<sp/>TERM<sp/>)*</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">TERM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:=<sp/>(<sp/>INT_LITERAL<sp/>|<sp/>REFERENCE<sp/>|<sp/></highlight><highlight class="charliteral">'('</highlight><highlight class="normal"><sp/>OPERATION<sp/></highlight><highlight class="charliteral">')'</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">REFERENCE<sp/><sp/><sp/><sp/><sp/><sp/>:=<sp/></highlight><highlight class="charliteral">'$'</highlight><highlight class="normal"><sp/>(<sp/>IREFERENCE<sp/>|<sp/></highlight><highlight class="charliteral">'{'</highlight><highlight class="normal"><sp/>IREFERENCE<sp/></highlight><highlight class="charliteral">'}'</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">IREFERENCE<sp/><sp/><sp/><sp/><sp/>:=<sp/>ID<sp/>(<sp/></highlight><highlight class="charliteral">'['</highlight><highlight class="normal"><sp/>OPERATION<sp/></highlight><highlight class="charliteral">']'</highlight><highlight class="normal"><sp/>)*</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">INT_LITERAL<sp/>~=<sp/>(0x)?<sp/>[0-9]+<sp/>(<sp/>\.<sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~=<sp/>[a-zA-Z_][a-zA-Z0-9_]*</highlight></codeline>
<codeline><highlight class="normal">CHAR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~=<sp/>[^$\\]</highlight></codeline>
<codeline><highlight class="normal">OPERATOR<sp/><sp/><sp/><sp/>~=<sp/>[|&amp;=&lt;&gt;+\-\*/%]</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">expr</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to parse </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Expression_1aae081e99d001eb73cdd42e33da3cddd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Expression::Expression</definition>
        <argsstring>(const std::string &amp;expr)</argsstring>
        <name>Expression</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Builds (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>parse) an expression from a string</para>
<para>The grammar of an expression is as follow: <programlisting filename="docs/expression_grammar.in.txt"><codeline><highlight class="comment">/*<sp/>parsing<sp/>as<sp/>a<sp/>REFERENCE<sp/>is<sp/>preferred<sp/>over<sp/>OPERATION</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>parsing<sp/>as<sp/>an<sp/>OPERATION<sp/>is<sp/>preferred<sp/>over<sp/>STRING_LITERAL</highlight></codeline>
<codeline><highlight class="comment">*/</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal">EXPRESSION<sp/><sp/><sp/><sp/><sp/>:=<sp/>REFERENCE<sp/>|<sp/>OPERATION<sp/>|<sp/>STRING_LITERAL</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">STRING_LITERAL<sp/>:=<sp/>(<sp/>CHAR<sp/>|<sp/></highlight><highlight class="charliteral">'\'</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">'\'</highlight><highlight class="normal"><sp/>|<sp/></highlight><highlight class="charliteral">'\'</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">'$'</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>REFERENCE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/></highlight><highlight class="charliteral">'$'</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">'('</highlight><highlight class="normal"><sp/>OPERATION<sp/></highlight><highlight class="charliteral">')'</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)*</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="comment">/*<sp/>The<sp/>operator<sp/>descending<sp/>precedence<sp/>order<sp/>is:</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>1.<sp/>*,<sp/>/,<sp/>%:<sp/>multiplication,<sp/>division<sp/>and<sp/>modulo,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>2.<sp/>+,<sp/>-:<sp/>addition<sp/>and<sp/>subtraction,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>3.<sp/>&lt;,<sp/>&gt;:<sp/>less<sp/>than<sp/>and<sp/>greater<sp/>than,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>4.<sp/>=:<sp/>equality,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>5.<sp/>&amp;:<sp/>logical<sp/>AND,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>6.<sp/>|:<sp/>logical<sp/>OR.</highlight></codeline>
<codeline><highlight class="comment">*/</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal">OPERATION<sp/><sp/><sp/><sp/><sp/><sp/>:=<sp/>TERM<sp/>(<sp/>OPERATOR<sp/>TERM<sp/>)*</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">TERM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:=<sp/>(<sp/>INT_LITERAL<sp/>|<sp/>REFERENCE<sp/>|<sp/></highlight><highlight class="charliteral">'('</highlight><highlight class="normal"><sp/>OPERATION<sp/></highlight><highlight class="charliteral">')'</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">REFERENCE<sp/><sp/><sp/><sp/><sp/><sp/>:=<sp/></highlight><highlight class="charliteral">'$'</highlight><highlight class="normal"><sp/>(<sp/>IREFERENCE<sp/>|<sp/></highlight><highlight class="charliteral">'{'</highlight><highlight class="normal"><sp/>IREFERENCE<sp/></highlight><highlight class="charliteral">'}'</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">IREFERENCE<sp/><sp/><sp/><sp/><sp/>:=<sp/>ID<sp/>(<sp/></highlight><highlight class="charliteral">'['</highlight><highlight class="normal"><sp/>OPERATION<sp/></highlight><highlight class="charliteral">']'</highlight><highlight class="normal"><sp/>)*</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">INT_LITERAL<sp/>~=<sp/>(0x)?<sp/>[0-9]+<sp/>(<sp/>\.<sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~=<sp/>[a-zA-Z_][a-zA-Z0-9_]*</highlight></codeline>
<codeline><highlight class="normal">CHAR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~=<sp/>[^$\\]</highlight></codeline>
<codeline><highlight class="normal">OPERATOR<sp/><sp/><sp/><sp/>~=<sp/>[|&amp;=&lt;&gt;+\-\*/%]</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">expr</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to parse </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Expression_1aaa33f7fe56738e334e629c1258408e4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Expression::Expression</definition>
        <argsstring>(long expr)</argsstring>
        <name>Expression</name>
        <param>
          <type>long</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Builds an expression that represents an integer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">expr</parametername>
</parameternamelist>
<parameterdescription>
<para>the integer value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Expression_1ac50f0bacc50fc655e276a08aafe9ebe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Expression::Expression</definition>
        <argsstring>(double expr)</argsstring>
        <name>Expression</name>
        <param>
          <type>double</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Builds an expression that represents a float. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">expr</parametername>
</parameternamelist>
<parameterdescription>
<para>the flaot value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Expression_1aea6912462c0531a1fcfd26003f338145" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Expression::Expression</definition>
        <argsstring>(PC_tree_t expr)</argsstring>
        <name>Expression</name>
        <param>
          <type>PC_tree_t</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Builds an expression that is parsed from PC_tree_t. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">expr</parametername>
</parameternamelist>
<parameterdescription>
<para>the PC_tree_t value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Expression_1ada6016ad74b6693eaa5de08bd07a5d91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Expression::~Expression</definition>
        <argsstring>()</argsstring>
        <name>~Expression</name>
        <briefdescription>
<para>Destroys an expression. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Expression_1a8fcc62d5d6bc65960611fb6cad896e89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPDI_1_1Expression" kindref="compound">Expression</ref> &amp;</type>
        <definition>Expression&amp; PDI::Expression::operator=</definition>
        <argsstring>(const Expression &amp;expr)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classPDI_1_1Expression" kindref="compound">Expression</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Copies an expression. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">expr</parametername>
</parameternamelist>
<parameterdescription>
<para>the expression to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>*this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="156" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Expression_1ad89c2782099fdb3e3b981a17a5f83378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPDI_1_1Expression" kindref="compound">Expression</ref> &amp;</type>
        <definition>Expression&amp; PDI::Expression::operator=</definition>
        <argsstring>(Expression &amp;&amp;expr)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classPDI_1_1Expression" kindref="compound">Expression</ref> &amp;&amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Moves an expression. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">expr</parametername>
</parameternamelist>
<parameterdescription>
<para>the expression to move` </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>*this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="163" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Expression_1ac406cb8e9c649432865496b3c89a1154" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Expression::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Checks whether this is an empty expression. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the expression is non-empty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Expression_1ad9d3e46ca89e7fb439ff94e1b159e182" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long PDI::Expression::to_long</definition>
        <argsstring>(Context &amp;ctx) const</argsstring>
        <name>to_long</name>
        <param>
          <type><ref refid="classPDI_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Evaluates an expression as an integer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the integer value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="175" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Expression_1a76a28980b2c1eac09892416b77aa30a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double PDI::Expression::to_double</definition>
        <argsstring>(Context &amp;ctx) const</argsstring>
        <name>to_double</name>
        <param>
          <type><ref refid="classPDI_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Evaluates an expression as a float. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the float value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="181" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Expression_1a77c2950c5e679224b2d6d5a63f96c1f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string PDI::Expression::to_string</definition>
        <argsstring>(Context &amp;ctx) const</argsstring>
        <name>to_string</name>
        <param>
          <type><ref refid="classPDI_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Evaluates an expression as a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the string value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="187" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Expression_1aead164aacf3e97ec8ecb343bbd23d886" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacePDI_1adc363df268e6e68e68947a4fc799ca00" kindref="member">Ref</ref></type>
        <definition>Ref PDI::Expression::to_ref</definition>
        <argsstring>(Context &amp;ctx) const</argsstring>
        <name>to_ref</name>
        <param>
          <type><ref refid="classPDI_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Evaluates an expression as a data reference. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context in which to evaluate the expression </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the data reference </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="194" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Expression_1a6c18c3cd517df995e6622120a8ee55ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacePDI_1adc363df268e6e68e68947a4fc799ca00" kindref="member">Ref</ref></type>
        <definition>Ref PDI::Expression::to_ref</definition>
        <argsstring>(Context &amp;ctx, const Datatype &amp;type) const</argsstring>
        <name>to_ref</name>
        <param>
          <type><ref refid="classPDI_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Evaluates an expression as a data reference. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context in which to evaluate the expression </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the created Ref </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the data reference </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="202" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>PDI::Expression</label>
        <link refid="classPDI_1_1Expression"/>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" line="63" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h" bodystart="62" bodyend="181"/>
    <listofallmembers>
      <member refid="classPDI_1_1Expression_1a8c66a7989969be49c4d3d3a377cd4634" prot="private" virt="non-virtual"><scope>PDI::Expression</scope><name>Expression</name></member>
      <member refid="classPDI_1_1Expression_1a293023f0af1aae062d79ec60ff08f923" prot="public" virt="non-virtual"><scope>PDI::Expression</scope><name>Expression</name></member>
      <member refid="classPDI_1_1Expression_1aea47980bd0571cb2e31acbe414007e6d" prot="public" virt="non-virtual"><scope>PDI::Expression</scope><name>Expression</name></member>
      <member refid="classPDI_1_1Expression_1acccc3e0d18b2b64e3eefd871f19dba2a" prot="public" virt="non-virtual"><scope>PDI::Expression</scope><name>Expression</name></member>
      <member refid="classPDI_1_1Expression_1abb55fe61cfcc9fc60e587d1b8b5e87de" prot="public" virt="non-virtual"><scope>PDI::Expression</scope><name>Expression</name></member>
      <member refid="classPDI_1_1Expression_1aae081e99d001eb73cdd42e33da3cddd9" prot="public" virt="non-virtual"><scope>PDI::Expression</scope><name>Expression</name></member>
      <member refid="classPDI_1_1Expression_1aaa33f7fe56738e334e629c1258408e4c" prot="public" virt="non-virtual"><scope>PDI::Expression</scope><name>Expression</name></member>
      <member refid="classPDI_1_1Expression_1ac50f0bacc50fc655e276a08aafe9ebe0" prot="public" virt="non-virtual"><scope>PDI::Expression</scope><name>Expression</name></member>
      <member refid="classPDI_1_1Expression_1aea6912462c0531a1fcfd26003f338145" prot="public" virt="non-virtual"><scope>PDI::Expression</scope><name>Expression</name></member>
      <member refid="classPDI_1_1Expression_1a3e6bf686ab86050839a4274188e2ce70" prot="private" virt="non-virtual"><scope>PDI::Expression</scope><name>m_impl</name></member>
      <member refid="classPDI_1_1Expression_1ac406cb8e9c649432865496b3c89a1154" prot="public" virt="non-virtual"><scope>PDI::Expression</scope><name>operator bool</name></member>
      <member refid="classPDI_1_1Expression_1a8fcc62d5d6bc65960611fb6cad896e89" prot="public" virt="non-virtual"><scope>PDI::Expression</scope><name>operator=</name></member>
      <member refid="classPDI_1_1Expression_1ad89c2782099fdb3e3b981a17a5f83378" prot="public" virt="non-virtual"><scope>PDI::Expression</scope><name>operator=</name></member>
      <member refid="classPDI_1_1Expression_1a76a28980b2c1eac09892416b77aa30a2" prot="public" virt="non-virtual"><scope>PDI::Expression</scope><name>to_double</name></member>
      <member refid="classPDI_1_1Expression_1ad9d3e46ca89e7fb439ff94e1b159e182" prot="public" virt="non-virtual"><scope>PDI::Expression</scope><name>to_long</name></member>
      <member refid="classPDI_1_1Expression_1aead164aacf3e97ec8ecb343bbd23d886" prot="public" virt="non-virtual"><scope>PDI::Expression</scope><name>to_ref</name></member>
      <member refid="classPDI_1_1Expression_1a6c18c3cd517df995e6622120a8ee55ab" prot="public" virt="non-virtual"><scope>PDI::Expression</scope><name>to_ref</name></member>
      <member refid="classPDI_1_1Expression_1a77c2950c5e679224b2d6d5a63f96c1f6" prot="public" virt="non-virtual"><scope>PDI::Expression</scope><name>to_string</name></member>
      <member refid="classPDI_1_1Expression_1ada6016ad74b6693eaa5de08bd07a5d91" prot="public" virt="non-virtual"><scope>PDI::Expression</scope><name>~Expression</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structstd_1_1hash_3_01PDI_1_1Ref__any_3_01R_00_01W_01_4_01_4" kind="struct" language="C++" prot="public">
    <compoundname>std::hash&lt; PDI::Ref_any&lt; R, W &gt; &gt;</compoundname>
    <includes refid="ref__any_8h" local="no">ref_any.h</includes>
    <templateparamlist>
      <param>
        <type>bool</type>
        <declname>R</declname>
        <defname>R</defname>
      </param>
      <param>
        <type>bool</type>
        <declname>W</declname>
        <defname>W</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structstd_1_1hash_3_01PDI_1_1Ref__any_3_01R_00_01W_01_4_01_4_1afc5f2df0f563f17fbbadf292e45954e9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t std::hash&lt; PDI::Ref_any&lt; R, W &gt; &gt;::operator()</definition>
        <argsstring>(const PDI::Ref_any&lt; R, W &gt; &amp;r) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classPDI_1_1Ref__any" kindref="compound">PDI::Ref_any</ref>&lt; R, W &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="576" column="8" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="576" bodyend="579"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>std::hash&lt; PDI::Ref_any&lt; R, W &gt; &gt;</label>
        <link refid="structstd_1_1hash_3_01PDI_1_1Ref__any_3_01R_00_01W_01_4_01_4"/>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="575" column="13" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="575" bodyend="580"/>
    <listofallmembers>
      <member refid="structstd_1_1hash_3_01PDI_1_1Ref__any_3_01R_00_01W_01_4_01_4_1afc5f2df0f563f17fbbadf292e45954e9" prot="public" virt="non-virtual"><scope>std::hash&lt; PDI::Ref_any&lt; R, W &gt; &gt;</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classPDI_1_1Context_1_1Iterator" kind="class" language="C++" prot="public">
    <compoundname>PDI::Context::Iterator</compoundname>
    <includes refid="context_8h" local="no">context.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classPDI_1_1Context_1_1Iterator_1ac26c806e60ca4a0547680edb68f6e39b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Context</definition>
        <argsstring/>
        <name>Context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="114" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classPDI_1_1Context_1_1Iterator_1adb4fb678a972f8c88e504ac23a0fa3a2" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, std::unique_ptr&lt; <ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref> &gt; &gt;::iterator</type>
        <definition>std::unordered_map&lt;std::string, std::unique_ptr&lt;Data_descriptor&gt; &gt;::iterator PDI::Context::Iterator::m_data</definition>
        <argsstring/>
        <name>m_data</name>
        <briefdescription>
<para>The iterator this wraps. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="116" column="31" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classPDI_1_1Context_1_1Iterator_1a43c9a151de8d91792770a4114990ba0b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Context::Iterator::Iterator</definition>
        <argsstring>(const std::unordered_map&lt; std::string, std::unique_ptr&lt; Data_descriptor &gt;&gt;::iterator &amp;data)</argsstring>
        <name>Iterator</name>
        <param>
          <type>const std::unordered_map&lt; std::string, std::unique_ptr&lt; <ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref> &gt;&gt;::iterator &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1_1Iterator_1a846db39a2422de77ba88d7292f8b601c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Context::Iterator::Iterator</definition>
        <argsstring>(std::unordered_map&lt; std::string, std::unique_ptr&lt; Data_descriptor &gt;&gt;::iterator &amp;&amp;data)</argsstring>
        <name>Iterator</name>
        <param>
          <type>std::unordered_map&lt; std::string, std::unique_ptr&lt; <ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref> &gt;&gt;::iterator &amp;&amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="118" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPDI_1_1Context_1_1Iterator_1ab21b9373c84cde903f7f6180483b06b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref> *</type>
        <definition>Data_descriptor* PDI::Context::Iterator::operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="120" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1_1Iterator_1aff20b57598e752ba17f0d451629b3440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref> &amp;</type>
        <definition>Data_descriptor&amp; PDI::Context::Iterator::operator*</definition>
        <argsstring>()</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="121" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1_1Iterator_1adc955d842b23ae02f197df61297c48d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPDI_1_1Context_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
        <definition>Iterator&amp; PDI::Context::Iterator::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="122" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Context_1_1Iterator_1a36f7819bd97ee740dc69722ef6646ab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PDI::Context::Iterator::operator!=</definition>
        <argsstring>(const Iterator &amp;)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classPDI_1_1Context_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="123" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An iterator used to go through the descriptor store. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>PDI::Context::Iterator</label>
        <link refid="classPDI_1_1Context_1_1Iterator"/>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" line="91" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h" bodystart="90" bodyend="102"/>
    <listofallmembers>
      <member refid="classPDI_1_1Context_1_1Iterator_1ac26c806e60ca4a0547680edb68f6e39b" prot="private" virt="non-virtual"><scope>PDI::Context::Iterator</scope><name>Context</name></member>
      <member refid="classPDI_1_1Context_1_1Iterator_1a43c9a151de8d91792770a4114990ba0b" prot="private" virt="non-virtual"><scope>PDI::Context::Iterator</scope><name>Iterator</name></member>
      <member refid="classPDI_1_1Context_1_1Iterator_1a846db39a2422de77ba88d7292f8b601c" prot="private" virt="non-virtual"><scope>PDI::Context::Iterator</scope><name>Iterator</name></member>
      <member refid="classPDI_1_1Context_1_1Iterator_1adb4fb678a972f8c88e504ac23a0fa3a2" prot="private" virt="non-virtual"><scope>PDI::Context::Iterator</scope><name>m_data</name></member>
      <member refid="classPDI_1_1Context_1_1Iterator_1a36f7819bd97ee740dc69722ef6646ab3" prot="public" virt="non-virtual"><scope>PDI::Context::Iterator</scope><name>operator!=</name></member>
      <member refid="classPDI_1_1Context_1_1Iterator_1aff20b57598e752ba17f0d451629b3440" prot="public" virt="non-virtual"><scope>PDI::Context::Iterator</scope><name>operator*</name></member>
      <member refid="classPDI_1_1Context_1_1Iterator_1adc955d842b23ae02f197df61297c48d3" prot="public" virt="non-virtual"><scope>PDI::Context::Iterator</scope><name>operator++</name></member>
      <member refid="classPDI_1_1Context_1_1Iterator_1ab21b9373c84cde903f7f6180483b06b5" prot="public" virt="non-virtual"><scope>PDI::Context::Iterator</scope><name>operator-&gt;</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classPDI_1_1Record__datatype_1_1Member" kind="class" language="C++" prot="public">
    <compoundname>PDI::Record_datatype::Member</compoundname>
    <includes refid="record__datatype_8h" local="no">record_datatype.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classPDI_1_1Record__datatype_1_1Member_1a1f367d497e48f0b828247ab86b774060" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t PDI::Record_datatype::Member::m_displacement</definition>
        <argsstring/>
        <name>m_displacement</name>
        <briefdescription>
<para>Offset or distance in byte from the <ref refid="classPDI_1_1Record__datatype" kindref="compound">Record_datatype</ref> start. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="116" column="8" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPDI_1_1Record__datatype_1_1Member_1ab54cfa6ed139877883381b901f07de3b" prot="private" static="no" mutable="no">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>Datatype_uptr PDI::Record_datatype::Member::m_type</definition>
        <argsstring/>
        <name>m_type</name>
        <briefdescription>
<para>Type of the contained member. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="119" column="15" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPDI_1_1Record__datatype_1_1Member_1a9aa2c4a7312a912cb516ca578ad32098" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string PDI::Record_datatype::Member::m_name</definition>
        <argsstring/>
        <name>m_name</name>
        <briefdescription>
<para>Name of this specific member. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="122" column="13" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1_1Member_1a4afcc1bf5321b1a7372d436c54bfd963" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Record_datatype::Member::Member</definition>
        <argsstring>(size_t displacement, Datatype_uptr type, const std::string &amp;name)</argsstring>
        <name>Member</name>
        <param>
          <type>size_t</type>
          <declname>displacement</declname>
        </param>
        <param>
          <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Construct a new member. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>displacement</parametername>
</parameternamelist>
<parameterdescription>
<para>offset or distance in byte from the <ref refid="classPDI_1_1Record__datatype" kindref="compound">Record_datatype</ref> start </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the contained member </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of this specific member </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1_1Member_1a08d1fead3b96e498c8f2e83c9a8f0c1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Record_datatype::Member::Member</definition>
        <argsstring>(const Member &amp;o)</argsstring>
        <name>Member</name>
        <param>
          <type>const <ref refid="classPDI_1_1Record__datatype_1_1Member" kindref="compound">Member</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Construct a new member by copy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classPDI_1_1Record__datatype_1_1Member" kindref="compound">Member</ref> to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1_1Member_1a7c067ee7ad87b2245c3e19b0fff2734c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PDI::Record_datatype::Member::displacement</definition>
        <argsstring>() const</argsstring>
        <name>displacement</name>
        <briefdescription>
<para>Access the offset or distance in byte from the <ref refid="classPDI_1_1Record__datatype" kindref="compound">Record_datatype</ref> start. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the offset or distance in byte from the <ref refid="classPDI_1_1Record__datatype" kindref="compound">Record_datatype</ref> start </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="143" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1_1Member_1a3485a550d9c8d53ef15fa5a61a5634b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> &amp;</type>
        <definition>const Datatype&amp; PDI::Record_datatype::Member::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
<para>Access the type of the contained member. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the type of the contained member </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="149" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1_1Member_1a1c74c45e2823c5d8e73e3c728a48c075" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; PDI::Record_datatype::Member::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <briefdescription>
<para>Access the name of this specific member. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the name of this specific member </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="155" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1_1Member_1a32eec3c5fca4ce9c2f4b67a99e2b6704" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PDI::Record_datatype::Member::operator==</definition>
        <argsstring>(const Member &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classPDI_1_1Record__datatype_1_1Member" kindref="compound">Member</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Tests another member for equality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>the other member to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the members are equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="162" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1_1Member_1a9106d87288bc7eec45fcabc7941b323a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PDI::Record_datatype::Member::operator!=</definition>
        <argsstring>(const Member &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classPDI_1_1Record__datatype_1_1Member" kindref="compound">Member</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Tests another member for inequality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>the other member to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the members are different </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="169" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classPDI_1_1Record__datatype_1_1Member" kindref="compound">Member</ref> is one of the elements inside a <ref refid="classPDI_1_1Record__datatype" kindref="compound">Record_datatype</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>PDI::Record_datatype::Member</label>
        <link refid="classPDI_1_1Record__datatype_1_1Member"/>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="92" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" bodystart="91" bodyend="149"/>
    <listofallmembers>
      <member refid="classPDI_1_1Record__datatype_1_1Member_1a7c067ee7ad87b2245c3e19b0fff2734c" prot="public" virt="non-virtual"><scope>PDI::Record_datatype::Member</scope><name>displacement</name></member>
      <member refid="classPDI_1_1Record__datatype_1_1Member_1a1f367d497e48f0b828247ab86b774060" prot="private" virt="non-virtual"><scope>PDI::Record_datatype::Member</scope><name>m_displacement</name></member>
      <member refid="classPDI_1_1Record__datatype_1_1Member_1a9aa2c4a7312a912cb516ca578ad32098" prot="private" virt="non-virtual"><scope>PDI::Record_datatype::Member</scope><name>m_name</name></member>
      <member refid="classPDI_1_1Record__datatype_1_1Member_1ab54cfa6ed139877883381b901f07de3b" prot="private" virt="non-virtual"><scope>PDI::Record_datatype::Member</scope><name>m_type</name></member>
      <member refid="classPDI_1_1Record__datatype_1_1Member_1a4afcc1bf5321b1a7372d436c54bfd963" prot="public" virt="non-virtual"><scope>PDI::Record_datatype::Member</scope><name>Member</name></member>
      <member refid="classPDI_1_1Record__datatype_1_1Member_1a08d1fead3b96e498c8f2e83c9a8f0c1f" prot="public" virt="non-virtual"><scope>PDI::Record_datatype::Member</scope><name>Member</name></member>
      <member refid="classPDI_1_1Record__datatype_1_1Member_1a1c74c45e2823c5d8e73e3c728a48c075" prot="public" virt="non-virtual"><scope>PDI::Record_datatype::Member</scope><name>name</name></member>
      <member refid="classPDI_1_1Record__datatype_1_1Member_1a9106d87288bc7eec45fcabc7941b323a" prot="public" virt="non-virtual"><scope>PDI::Record_datatype::Member</scope><name>operator!=</name></member>
      <member refid="classPDI_1_1Record__datatype_1_1Member_1a32eec3c5fca4ce9c2f4b67a99e2b6704" prot="public" virt="non-virtual"><scope>PDI::Record_datatype::Member</scope><name>operator==</name></member>
      <member refid="classPDI_1_1Record__datatype_1_1Member_1a3485a550d9c8d53ef15fa5a61a5634b9" prot="public" virt="non-virtual"><scope>PDI::Record_datatype::Member</scope><name>type</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structPDI_1_1Paraconf__wrapper" kind="struct" language="C++" prot="public">
    <compoundname>PDI::Paraconf_wrapper</compoundname>
    <includes refid="paraconf__wrapper_8h" local="no">paraconf_wrapper.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structPDI_1_1Paraconf__wrapper_1a56789d196b0927308bf1f89625b8eb58" prot="public" static="no" mutable="no">
        <type>PC_errhandler_t</type>
        <definition>PC_errhandler_t PDI::Paraconf_wrapper::m_handler</definition>
        <argsstring/>
        <name>m_handler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="47" column="17" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structPDI_1_1Paraconf__wrapper_1a4cead0eee5154602e9403c355be9ee75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Paraconf_wrapper::Paraconf_wrapper</definition>
        <argsstring>()</argsstring>
        <name>Paraconf_wrapper</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structPDI_1_1Paraconf__wrapper_1a319dba63c77eeb2253891b628e21728c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Paraconf_wrapper::~Paraconf_wrapper</definition>
        <argsstring>()</argsstring>
        <name>~Paraconf_wrapper</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="52" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Automatically installs a paraconf error-handler that ignores errors and uninstalls it on destruction. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>PDI::Paraconf_wrapper</label>
        <link refid="structPDI_1_1Paraconf__wrapper"/>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="45" column="23" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" bodystart="45" bodyend="54"/>
    <listofallmembers>
      <member refid="structPDI_1_1Paraconf__wrapper_1a56789d196b0927308bf1f89625b8eb58" prot="public" virt="non-virtual"><scope>PDI::Paraconf_wrapper</scope><name>m_handler</name></member>
      <member refid="structPDI_1_1Paraconf__wrapper_1a4cead0eee5154602e9403c355be9ee75" prot="public" virt="non-virtual"><scope>PDI::Paraconf_wrapper</scope><name>Paraconf_wrapper</name></member>
      <member refid="structPDI_1_1Paraconf__wrapper_1a319dba63c77eeb2253891b628e21728c" prot="public" virt="non-virtual"><scope>PDI::Paraconf_wrapper</scope><name>~Paraconf_wrapper</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structPDI__errhandler__s" kind="struct" language="C++" prot="public">
    <compoundname>PDI_errhandler_s</compoundname>
    <includes refid="pdi_8h" local="no">pdi.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structPDI__errhandler__s_1aeb6ecc29ac9110c09823eacbacf4c9c8" prot="public" static="no" mutable="no">
        <type><ref refid="group__error_1ga9e635248278d0dda3d5df7142a720f81" kindref="member">PDI_errfunc_f</ref></type>
        <definition>PDI_errfunc_f PDI_errhandler_s::func</definition>
        <argsstring/>
        <name>func</name>
        <briefdescription>
<para>The function to handle the error (none if NULL) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="115" column="15" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structPDI__errhandler__s_1a442f211babbc93c5625050dcf0159b84" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* PDI_errhandler_s::context</definition>
        <argsstring/>
        <name>context</name>
        <briefdescription>
<para>the context that will be provided to the function </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="118" column="6" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Definition of an error handler. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>PDI_errhandler_s</label>
        <link refid="structPDI__errhandler__s"/>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="112" column="31" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" bodystart="112" bodyend="120"/>
    <listofallmembers>
      <member refid="structPDI__errhandler__s_1a442f211babbc93c5625050dcf0159b84" prot="public" virt="non-virtual"><scope>PDI_errhandler_s</scope><name>context</name></member>
      <member refid="structPDI__errhandler__s_1aeb6ecc29ac9110c09823eacbacf4c9c8" prot="public" virt="non-virtual"><scope>PDI_errhandler_s</scope><name>func</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classPDI_1_1Plugin" kind="class" language="C++" prot="public">
    <compoundname>PDI::Plugin</compoundname>
    <includes refid="plugin_8h" local="no">plugin.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classPDI_1_1Plugin_1ade70e023c0259b68a80f4e957fc8bc5a" prot="private" static="no" mutable="no">
        <type><ref refid="classPDI_1_1Context" kindref="compound">Context</ref> &amp;</type>
        <definition>Context&amp; PDI::Plugin::m_context</definition>
        <argsstring/>
        <name>m_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" line="88" column="9" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPDI_1_1Plugin_1afa960fc8eb60ec30dc326fba97de8dee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Plugin::Plugin</definition>
        <argsstring>(const Plugin &amp;)=delete</argsstring>
        <name>Plugin</name>
        <param>
          <type>const <ref refid="classPDI_1_1Plugin" kindref="compound">Plugin</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Plugin_1ad3e4b6e124dac600ca050c679b1e9abc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Plugin::Plugin</definition>
        <argsstring>(Plugin &amp;&amp;)=delete</argsstring>
        <name>Plugin</name>
        <param>
          <type><ref refid="classPDI_1_1Plugin" kindref="compound">Plugin</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Plugin_1a8aeaaed875161ba54ac79a0bc7a7e027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Plugin::Plugin</definition>
        <argsstring>(Context &amp;ctx)</argsstring>
        <name>Plugin</name>
        <param>
          <type><ref refid="classPDI_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Initialization of the plugin. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="namespacePDI" kindref="compound">PDI</ref> context for this plugin instance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Plugin_1a0b1f87c958b1f99308d614830d9e8444" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type/>
        <definition>virtual PDI::Plugin::~Plugin</definition>
        <argsstring>() noexcept(false)</argsstring>
        <name>~Plugin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" line="100" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Plugin_1aa05c55221676b4aa89c59199f55d8014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPDI_1_1Context" kindref="compound">Context</ref> &amp;</type>
        <definition>Context&amp; PDI::Plugin::context</definition>
        <argsstring>()</argsstring>
        <name>context</name>
        <briefdescription>
<para>Provides access to the <ref refid="namespacePDI" kindref="compound">PDI</ref> context for this plugin instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" line="104" column="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <ref refid="namespacePDI" kindref="compound">PDI</ref> plugins should implement. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>PDI::Plugin</label>
        <link refid="classPDI_1_1Plugin"/>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" line="65" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" bodystart="64" bodyend="84"/>
    <listofallmembers>
      <member refid="classPDI_1_1Plugin_1aa05c55221676b4aa89c59199f55d8014" prot="public" virt="non-virtual"><scope>PDI::Plugin</scope><name>context</name></member>
      <member refid="classPDI_1_1Plugin_1ade70e023c0259b68a80f4e957fc8bc5a" prot="private" virt="non-virtual"><scope>PDI::Plugin</scope><name>m_context</name></member>
      <member refid="classPDI_1_1Plugin_1afa960fc8eb60ec30dc326fba97de8dee" prot="public" virt="non-virtual"><scope>PDI::Plugin</scope><name>Plugin</name></member>
      <member refid="classPDI_1_1Plugin_1ad3e4b6e124dac600ca050c679b1e9abc" prot="public" virt="non-virtual"><scope>PDI::Plugin</scope><name>Plugin</name></member>
      <member refid="classPDI_1_1Plugin_1a8aeaaed875161ba54ac79a0bc7a7e027" prot="public" virt="non-virtual"><scope>PDI::Plugin</scope><name>Plugin</name></member>
      <member refid="classPDI_1_1Plugin_1a0b1f87c958b1f99308d614830d9e8444" prot="public" virt="virtual"><scope>PDI::Plugin</scope><name>~Plugin</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classPDI_1_1Pointer__datatype" kind="class" language="C++" prot="public">
    <compoundname>PDI::Pointer_datatype</compoundname>
    <basecompoundref refid="classPDI_1_1Datatype" prot="public" virt="non-virtual">PDI::Datatype</basecompoundref>
    <includes refid="pointer__datatype_8h" local="no">pointer_datatype.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classPDI_1_1Pointer__datatype_1a808d9477a651d40ce155d4e4fd518d2e" prot="private" static="no" mutable="no">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>Datatype_uptr PDI::Pointer_datatype::m_subtype</definition>
        <argsstring/>
        <name>m_subtype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="83" column="15" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPDI_1_1Pointer__datatype_1aae8bd977ffc5a6c08e3919d143f3086a" prot="private" static="no" mutable="no">
        <type>std::function&lt; void *(void *, const void *)&gt;</type>
        <definition>std::function&lt;void* (void*, const void*)&gt; PDI::Pointer_datatype::m_copy</definition>
        <argsstring/>
        <name>m_copy</name>
        <briefdescription>
<para>copy function or null for memcpy </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="86" column="15" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPDI_1_1Pointer__datatype_1a22a6a41e6c8c49dafd706743837c15be" prot="private" static="no" mutable="no">
        <type>std::function&lt; void(void *)&gt;</type>
        <definition>std::function&lt;void(void*)&gt; PDI::Pointer_datatype::m_destroy</definition>
        <argsstring/>
        <name>m_destroy</name>
        <briefdescription>
<para>destroy function or null for memcpy </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="89" column="15" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPDI_1_1Pointer__datatype_1a7184035bbd0f5d98b0f0461001ced1ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Pointer_datatype::Pointer_datatype</definition>
        <argsstring>(Datatype_uptr subtype)</argsstring>
        <name>Pointer_datatype</name>
        <param>
          <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
          <declname>subtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Pointer__datatype_1a6a8510fd399b23da60a52cf0f88e438b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Pointer_datatype::Pointer_datatype</definition>
        <argsstring>(Datatype_uptr subtype, std::function&lt; void *(void *, const void *)&gt; copy, std::function&lt; void(void *)&gt; destroy)</argsstring>
        <name>Pointer_datatype</name>
        <param>
          <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
          <declname>subtype</declname>
        </param>
        <param>
          <type>std::function&lt; void *(void *, const void *)&gt;</type>
          <declname>copy</declname>
        </param>
        <param>
          <type>std::function&lt; void(void *)&gt;</type>
          <declname>destroy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Pointer__datatype_1af594a11c6575131d709a7792f7c0f28e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref></type>
        <definition>Datatype_template_uptr PDI::Pointer_datatype::clone</definition>
        <argsstring>() const override</argsstring>
        <name>clone</name>
        <reimplements refid="classPDI_1_1Datatype__template_1a6c6cb02f6f9bab3e9fbf8826afae677a">clone</reimplements>
        <briefdescription>
<para>Creates a new datatype as an exact copy of this one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the dense type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="97" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Pointer__datatype_1a4ea685b28d9be745718e1d4715a6c544" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>Datatype_uptr PDI::Pointer_datatype::clone_type</definition>
        <argsstring>() const override</argsstring>
        <name>clone_type</name>
        <reimplements refid="classPDI_1_1Datatype_1af42770105e821dea4ca30f0992f2274c">clone_type</reimplements>
        <briefdescription>
<para>Creates a new datatype as an exact copy of this one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the dense type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="99" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Pointer__datatype_1a52d14b97faf1ace6fda56c6763e05adc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>Datatype_uptr PDI::Pointer_datatype::densify</definition>
        <argsstring>() const override</argsstring>
        <name>densify</name>
        <reimplements refid="classPDI_1_1Datatype_1a565e585893035b39f95520543cea49de">densify</reimplements>
        <briefdescription>
<para>Creates a new datatype as the dense copy of this one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="101" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Pointer__datatype_1a0c5618604492b253bce03f9a6d6c9161" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>Datatype_uptr PDI::Pointer_datatype::evaluate</definition>
        <argsstring>(Context &amp;) const override</argsstring>
        <name>evaluate</name>
        <reimplements refid="classPDI_1_1Datatype__template_1a31b2c6cd579c3100c6b03bf195aa0e80">evaluate</reimplements>
        <param>
          <type><ref refid="classPDI_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Creates a new datatype by resolving the value of all metadata references. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context in which to evaluate this template </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the evaluated type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="103" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Pointer__datatype_1a912fc3ae386f2e2368b39dad95b4a4d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool PDI::Pointer_datatype::dense</definition>
        <argsstring>() const override</argsstring>
        <name>dense</name>
        <reimplements refid="classPDI_1_1Datatype_1a15b82a52cfafc5fc1dbc21b043588693">dense</reimplements>
        <briefdescription>
<para>Indicate if the datatype is dense or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether the datatype is dense </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="105" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Pointer__datatype_1ae39bc5277b114f47dd98da1a3f451f2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t PDI::Pointer_datatype::datasize</definition>
        <argsstring>() const override</argsstring>
        <name>datasize</name>
        <reimplements refid="classPDI_1_1Datatype_1aa5254560c8fd98403b2067091f93b3c9">datasize</reimplements>
        <briefdescription>
<para>Computes the data size of a type, excluding potentially unused memory from a sparse type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="107" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Pointer__datatype_1a8251c192e15741a1a471eea11045d49d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t PDI::Pointer_datatype::buffersize</definition>
        <argsstring>() const override</argsstring>
        <name>buffersize</name>
        <reimplements refid="classPDI_1_1Datatype_1a341a15d47396f1cd9bb12e43a5cd5a40">buffersize</reimplements>
        <briefdescription>
<para>Computes the data size of a type, including potentially unused memory from a sparse type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="109" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Pointer__datatype_1a5850529f74a112c880b462780441ca92" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t PDI::Pointer_datatype::alignment</definition>
        <argsstring>() const override</argsstring>
        <name>alignment</name>
        <reimplements refid="classPDI_1_1Datatype_1a2d1d0228dddffc6ee786d56494fde972">alignment</reimplements>
        <briefdescription>
<para>Returns the required alignment for a type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="111" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Pointer__datatype_1ab34ae78cae3a944fb741bf49c1538d4f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool PDI::Pointer_datatype::simple</definition>
        <argsstring>() const override</argsstring>
        <name>simple</name>
        <reimplements refid="classPDI_1_1Datatype_1ae5f85834cbae56fca2b4cf7e7fbd0df3">simple</reimplements>
        <briefdescription>
<para>Tells if data can be copied as bytes (if type is dense) and doesn't need a destroyer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if data has trivial copier and destroyer, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="113" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Pointer__datatype_1ab5522e3a7663533a0b422a22228427f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void *</type>
        <definition>void* PDI::Pointer_datatype::data_to_dense_copy</definition>
        <argsstring>(void *to, const void *from) const override</argsstring>
        <name>data_to_dense_copy</name>
        <reimplements refid="classPDI_1_1Datatype_1a988bab02472c4dc4206b40cd093030c3">data_to_dense_copy</reimplements>
        <param>
          <type>void *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Creates a dense deep copy of data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">to</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the allocated memory to fill (dense data) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the copied data (size of buffersize) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>updated <lsquo/>to<rsquo/> pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="115" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Pointer__datatype_1ae467c732de6a9922c0a770a133ca8a37" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void *</type>
        <definition>void* PDI::Pointer_datatype::data_from_dense_copy</definition>
        <argsstring>(void *to, const void *from) const override</argsstring>
        <name>data_from_dense_copy</name>
        <reimplements refid="classPDI_1_1Datatype_1a00559b1afaf47436b64a26841b486a14">data_from_dense_copy</reimplements>
        <param>
          <type>void *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Creates a sparse deep copy of dense data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">to</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the allocated memory to fill (size of buffersize) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the copied data (dense data) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>updated <lsquo/>to<rsquo/> pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="117" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Pointer__datatype_1a1b1c55a87cf7f8642729751cf36d30b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PDI::Pointer_datatype::destroy_data</definition>
        <argsstring>(void *ptr) const override</argsstring>
        <name>destroy_data</name>
        <reimplements refid="classPDI_1_1Datatype_1a73bcba3fb827468daeda6ab0a4fd92b5">destroy_data</reimplements>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Function used to delete the data behind the datatype. </para>
        </briefdescription>
        <detaileddescription>
<para>This should not deallocate the memory.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>to the data to free </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="119" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Pointer__datatype_1a6aa1ae90b69129fec7e148547d262836" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string PDI::Pointer_datatype::debug_string</definition>
        <argsstring>() const override</argsstring>
        <name>debug_string</name>
        <reimplements refid="classPDI_1_1Datatype_1aff4be6868c49816ef432098357ab5789">debug_string</reimplements>
        <briefdescription>
<para>Returns the datatype yaml representation as a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the datatype yaml representation as a string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="121" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Pointer__datatype_1a7baec7ae29e45f331653b7dad44d2ba1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool PDI::Pointer_datatype::operator==</definition>
        <argsstring>(const Datatype &amp;) const override</argsstring>
        <name>operator==</name>
        <reimplements refid="classPDI_1_1Datatype_1a8cdf8ed0c21b40519239290171252a5b">operator==</reimplements>
        <param>
          <type>const <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Test for equality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref>'s are equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="123" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Pointer__datatype_1a1f945646f55d4071b3eaa075f5c566e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>Datatype_uptr PDI::Pointer_datatype::dereference</definition>
        <argsstring>() const</argsstring>
        <name>dereference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="125" column="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>PDI::Datatype</label>
        <link refid="classPDI_1_1Datatype"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>PDI::Datatype_template</label>
        <link refid="classPDI_1_1Datatype__template"/>
      </node>
      <node id="1">
        <label>PDI::Pointer_datatype</label>
        <link refid="classPDI_1_1Pointer__datatype"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>PDI::Datatype</label>
        <link refid="classPDI_1_1Datatype"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>PDI::Datatype_template</label>
        <link refid="classPDI_1_1Datatype__template"/>
      </node>
      <node id="1">
        <label>PDI::Pointer_datatype</label>
        <link refid="classPDI_1_1Pointer__datatype"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" line="60" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h" bodystart="58" bodyend="105"/>
    <listofallmembers>
      <member refid="classPDI_1_1Pointer__datatype_1a5850529f74a112c880b462780441ca92" prot="public" virt="virtual"><scope>PDI::Pointer_datatype</scope><name>alignment</name></member>
      <member refid="classPDI_1_1Pointer__datatype_1a8251c192e15741a1a471eea11045d49d" prot="public" virt="virtual"><scope>PDI::Pointer_datatype</scope><name>buffersize</name></member>
      <member refid="classPDI_1_1Pointer__datatype_1af594a11c6575131d709a7792f7c0f28e" prot="public" virt="virtual"><scope>PDI::Pointer_datatype</scope><name>clone</name></member>
      <member refid="classPDI_1_1Pointer__datatype_1a4ea685b28d9be745718e1d4715a6c544" prot="public" virt="virtual"><scope>PDI::Pointer_datatype</scope><name>clone_type</name></member>
      <member refid="classPDI_1_1Pointer__datatype_1ae467c732de6a9922c0a770a133ca8a37" prot="public" virt="virtual"><scope>PDI::Pointer_datatype</scope><name>data_from_dense_copy</name></member>
      <member refid="classPDI_1_1Pointer__datatype_1ab5522e3a7663533a0b422a22228427f0" prot="public" virt="virtual"><scope>PDI::Pointer_datatype</scope><name>data_to_dense_copy</name></member>
      <member refid="classPDI_1_1Pointer__datatype_1ae39bc5277b114f47dd98da1a3f451f2f" prot="public" virt="virtual"><scope>PDI::Pointer_datatype</scope><name>datasize</name></member>
      <member refid="classPDI_1_1Pointer__datatype_1a6aa1ae90b69129fec7e148547d262836" prot="public" virt="virtual"><scope>PDI::Pointer_datatype</scope><name>debug_string</name></member>
      <member refid="classPDI_1_1Pointer__datatype_1a912fc3ae386f2e2368b39dad95b4a4d0" prot="public" virt="virtual"><scope>PDI::Pointer_datatype</scope><name>dense</name></member>
      <member refid="classPDI_1_1Pointer__datatype_1a52d14b97faf1ace6fda56c6763e05adc" prot="public" virt="virtual"><scope>PDI::Pointer_datatype</scope><name>densify</name></member>
      <member refid="classPDI_1_1Pointer__datatype_1a1f945646f55d4071b3eaa075f5c566e0" prot="public" virt="non-virtual"><scope>PDI::Pointer_datatype</scope><name>dereference</name></member>
      <member refid="classPDI_1_1Pointer__datatype_1a1b1c55a87cf7f8642729751cf36d30b6" prot="public" virt="virtual"><scope>PDI::Pointer_datatype</scope><name>destroy_data</name></member>
      <member refid="classPDI_1_1Pointer__datatype_1a0c5618604492b253bce03f9a6d6c9161" prot="public" virt="virtual"><scope>PDI::Pointer_datatype</scope><name>evaluate</name></member>
      <member refid="classPDI_1_1Datatype__template_1aa539eee3b7312a7f1be7fd85b64b5c85" prot="public" virt="non-virtual"><scope>PDI::Pointer_datatype</scope><name>load_basic_datatypes</name></member>
      <member refid="classPDI_1_1Pointer__datatype_1aae8bd977ffc5a6c08e3919d143f3086a" prot="private" virt="non-virtual"><scope>PDI::Pointer_datatype</scope><name>m_copy</name></member>
      <member refid="classPDI_1_1Pointer__datatype_1a22a6a41e6c8c49dafd706743837c15be" prot="private" virt="non-virtual"><scope>PDI::Pointer_datatype</scope><name>m_destroy</name></member>
      <member refid="classPDI_1_1Pointer__datatype_1a808d9477a651d40ce155d4e4fd518d2e" prot="private" virt="non-virtual"><scope>PDI::Pointer_datatype</scope><name>m_subtype</name></member>
      <member refid="classPDI_1_1Datatype_1af80638919cb31c61451d0bc6220a69e3" prot="public" virt="non-virtual"><scope>PDI::Pointer_datatype</scope><name>operator!=</name></member>
      <member refid="classPDI_1_1Pointer__datatype_1a7baec7ae29e45f331653b7dad44d2ba1" prot="public" virt="virtual"><scope>PDI::Pointer_datatype</scope><name>operator==</name></member>
      <member refid="classPDI_1_1Pointer__datatype_1a7184035bbd0f5d98b0f0461001ced1ad" prot="public" virt="non-virtual"><scope>PDI::Pointer_datatype</scope><name>Pointer_datatype</name></member>
      <member refid="classPDI_1_1Pointer__datatype_1a6a8510fd399b23da60a52cf0f88e438b" prot="public" virt="non-virtual"><scope>PDI::Pointer_datatype</scope><name>Pointer_datatype</name></member>
      <member refid="classPDI_1_1Pointer__datatype_1ab34ae78cae3a944fb741bf49c1538d4f" prot="public" virt="virtual"><scope>PDI::Pointer_datatype</scope><name>simple</name></member>
      <member refid="classPDI_1_1Datatype_1ad2e19537809ba143ab9130c95b237dc2" prot="public" virt="non-virtual"><scope>PDI::Pointer_datatype</scope><name>~Datatype</name></member>
      <member refid="classPDI_1_1Datatype__template_1a8722c4b873d42931d8e159abaa62ff27" prot="public" virt="virtual"><scope>PDI::Pointer_datatype</scope><name>~Datatype_template</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classPDI_1_1Record__datatype" kind="class" language="C++" prot="public">
    <compoundname>PDI::Record_datatype</compoundname>
    <basecompoundref refid="classPDI_1_1Datatype" prot="public" virt="non-virtual">PDI::Datatype</basecompoundref>
    <includes refid="record__datatype_8h" local="no">record_datatype.h</includes>
    <innerclass refid="classPDI_1_1Record__datatype_1_1Member" prot="public">PDI::Record_datatype::Member</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classPDI_1_1Record__datatype_1a6f199221aeefdb6c40463f306a00b1f3" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classPDI_1_1Record__datatype_1_1Member" kindref="compound">Member</ref> &gt;</type>
        <definition>std::vector&lt;Member&gt; PDI::Record_datatype::m_members</definition>
        <argsstring/>
        <name>m_members</name>
        <briefdescription>
<para>All members in increasing displacement order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="153" column="13" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPDI_1_1Record__datatype_1aef244e5b6fdb7bd88c441bf4a1a7b5f0" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t PDI::Record_datatype::m_buffersize</definition>
        <argsstring/>
        <name>m_buffersize</name>
        <briefdescription>
<para>The total size of the buffer containing all members. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="156" column="8" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1acf74cad00490ddb45a9bb36b6f30c3fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Record_datatype::Record_datatype</definition>
        <argsstring>(std::vector&lt; Member &gt; &amp;&amp;members, size_t size)</argsstring>
        <name>Record_datatype</name>
        <param>
          <type>std::vector&lt; <ref refid="classPDI_1_1Record__datatype_1_1Member" kindref="compound">Member</ref> &gt; &amp;&amp;</type>
          <declname>members</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Constructs a new <ref refid="classPDI_1_1Record__datatype" kindref="compound">Record_datatype</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>members</parametername>
</parameternamelist>
<parameterdescription>
<para>the members for the newly created <ref refid="classPDI_1_1Record__datatype" kindref="compound">Record_datatype</ref> in increasing displacement order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the total size of the buffer containing all members </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1abc743d4a8adaeb8b630f29678f2665cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classPDI_1_1Record__datatype_1_1Member" kindref="compound">Member</ref> &gt; &amp;</type>
        <definition>const std::vector&lt;Member&gt;&amp; PDI::Record_datatype::members</definition>
        <argsstring>() const</argsstring>
        <name>members</name>
        <briefdescription>
<para>Accesses the members in increasing displacement order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="169" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1a400a1d29c9727f494a00315fe21451f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref></type>
        <definition>Datatype_template_uptr PDI::Record_datatype::clone</definition>
        <argsstring>() const override</argsstring>
        <name>clone</name>
        <reimplements refid="classPDI_1_1Datatype__template_1a6c6cb02f6f9bab3e9fbf8826afae677a">clone</reimplements>
        <briefdescription>
<para>Creates a new datatype as an exact copy of this one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the dense type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="172" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1a898b8663ac36edfb67cacb1987dfb644" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>Datatype_uptr PDI::Record_datatype::clone_type</definition>
        <argsstring>() const override</argsstring>
        <name>clone_type</name>
        <reimplements refid="classPDI_1_1Datatype_1af42770105e821dea4ca30f0992f2274c">clone_type</reimplements>
        <briefdescription>
<para>Creates a new datatype as an exact copy of this one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the dense type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="174" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1abb72cae0af1e9d4923165abd7044450c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>Datatype_uptr PDI::Record_datatype::densify</definition>
        <argsstring>() const override</argsstring>
        <name>densify</name>
        <reimplements refid="classPDI_1_1Datatype_1a565e585893035b39f95520543cea49de">densify</reimplements>
        <briefdescription>
<para>Creates a new datatype as the dense copy of this one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="176" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1a974a5b925407ade93a7f2b96a0ffd528" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>Datatype_uptr PDI::Record_datatype::evaluate</definition>
        <argsstring>(Context &amp;) const override</argsstring>
        <name>evaluate</name>
        <reimplements refid="classPDI_1_1Datatype__template_1a31b2c6cd579c3100c6b03bf195aa0e80">evaluate</reimplements>
        <param>
          <type><ref refid="classPDI_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Creates a new datatype by resolving the value of all metadata references. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context in which to evaluate this template </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the evaluated type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="178" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1ab5211f58ddcfbbb88243259182db1271" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool PDI::Record_datatype::dense</definition>
        <argsstring>() const override</argsstring>
        <name>dense</name>
        <reimplements refid="classPDI_1_1Datatype_1a15b82a52cfafc5fc1dbc21b043588693">dense</reimplements>
        <briefdescription>
<para>Indicate if the datatype is dense or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether the datatype is dense </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="180" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1aa0e39bbe49abdbc4d6e806e148bbef30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t PDI::Record_datatype::datasize</definition>
        <argsstring>() const override</argsstring>
        <name>datasize</name>
        <reimplements refid="classPDI_1_1Datatype_1aa5254560c8fd98403b2067091f93b3c9">datasize</reimplements>
        <briefdescription>
<para>Computes the data size of a type, excluding potentially unused memory from a sparse type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="182" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1aed94e24402cada695d056a4aea0e258e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t PDI::Record_datatype::buffersize</definition>
        <argsstring>() const override</argsstring>
        <name>buffersize</name>
        <reimplements refid="classPDI_1_1Datatype_1a341a15d47396f1cd9bb12e43a5cd5a40">buffersize</reimplements>
        <briefdescription>
<para>Computes the data size of a type, including potentially unused memory from a sparse type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="184" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1a359deae4113398d9bf252b81be2fa282" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t PDI::Record_datatype::alignment</definition>
        <argsstring>() const override</argsstring>
        <name>alignment</name>
        <reimplements refid="classPDI_1_1Datatype_1a2d1d0228dddffc6ee786d56494fde972">alignment</reimplements>
        <briefdescription>
<para>Returns the required alignment for a type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="186" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1a6286765cf6a1d050603f7adaed1edc93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool PDI::Record_datatype::simple</definition>
        <argsstring>() const override</argsstring>
        <name>simple</name>
        <reimplements refid="classPDI_1_1Datatype_1ae5f85834cbae56fca2b4cf7e7fbd0df3">simple</reimplements>
        <briefdescription>
<para>Tells if data can be copied as bytes (if type is dense) and doesn't need a destroyer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if data has trivial copier and destroyer, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="188" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1a4369630a6133e160a3c57b47cf995dad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void *</type>
        <definition>void* PDI::Record_datatype::data_to_dense_copy</definition>
        <argsstring>(void *to, const void *) const override</argsstring>
        <name>data_to_dense_copy</name>
        <reimplements refid="classPDI_1_1Datatype_1a988bab02472c4dc4206b40cd093030c3">data_to_dense_copy</reimplements>
        <param>
          <type>void *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Creates a dense deep copy of data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">to</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the allocated memory to fill (dense data) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the copied data (size of buffersize) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>updated <lsquo/>to<rsquo/> pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="190" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1a39797d23185a294f08dc2ebff976affe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void *</type>
        <definition>void* PDI::Record_datatype::data_from_dense_copy</definition>
        <argsstring>(void *to, const void *) const override</argsstring>
        <name>data_from_dense_copy</name>
        <reimplements refid="classPDI_1_1Datatype_1a00559b1afaf47436b64a26841b486a14">data_from_dense_copy</reimplements>
        <param>
          <type>void *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Creates a sparse deep copy of dense data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">to</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the allocated memory to fill (size of buffersize) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the copied data (dense data) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>updated <lsquo/>to<rsquo/> pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="192" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1aca8e88ed37db5f20244637e8c69d7a61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PDI::Record_datatype::destroy_data</definition>
        <argsstring>(void *) const override</argsstring>
        <name>destroy_data</name>
        <reimplements refid="classPDI_1_1Datatype_1a73bcba3fb827468daeda6ab0a4fd92b5">destroy_data</reimplements>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Function used to delete the data behind the datatype. </para>
        </briefdescription>
        <detaileddescription>
<para>This should not deallocate the memory.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>to the data to free </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="194" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1a18daca7d61b260de5457114643e2af75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string PDI::Record_datatype::debug_string</definition>
        <argsstring>() const override</argsstring>
        <name>debug_string</name>
        <reimplements refid="classPDI_1_1Datatype_1aff4be6868c49816ef432098357ab5789">debug_string</reimplements>
        <briefdescription>
<para>Returns the datatype yaml representation as a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the datatype yaml representation as a string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="196" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Record__datatype_1aa70ca0cdfdad5344b7ddffb55b30acdc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool PDI::Record_datatype::operator==</definition>
        <argsstring>(const Datatype &amp;) const override</argsstring>
        <name>operator==</name>
        <reimplements refid="classPDI_1_1Datatype_1a8cdf8ed0c21b40519239290171252a5b">operator==</reimplements>
        <param>
          <type>const <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Test for equality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref>'s are equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="198" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classPDI_1_1Record__datatype" kindref="compound">Record_datatype</ref> is a <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> that represents a fixed number of elements of potentially different types layed out in a specific way in memory. </para>
    </briefdescription>
    <detaileddescription>
<para>Each element is given a name to access it. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>PDI::Datatype</label>
        <link refid="classPDI_1_1Datatype"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>PDI::Datatype_template</label>
        <link refid="classPDI_1_1Datatype__template"/>
      </node>
      <node id="1">
        <label>PDI::Record_datatype</label>
        <link refid="classPDI_1_1Record__datatype"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>PDI::Datatype</label>
        <link refid="classPDI_1_1Datatype"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>PDI::Datatype_template</label>
        <link refid="classPDI_1_1Datatype__template"/>
      </node>
      <node id="1">
        <label>PDI::Record_datatype</label>
        <link refid="classPDI_1_1Record__datatype"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" line="65" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h" bodystart="63" bodyend="178"/>
    <listofallmembers>
      <member refid="classPDI_1_1Record__datatype_1a359deae4113398d9bf252b81be2fa282" prot="public" virt="virtual"><scope>PDI::Record_datatype</scope><name>alignment</name></member>
      <member refid="classPDI_1_1Record__datatype_1aed94e24402cada695d056a4aea0e258e" prot="public" virt="virtual"><scope>PDI::Record_datatype</scope><name>buffersize</name></member>
      <member refid="classPDI_1_1Record__datatype_1a400a1d29c9727f494a00315fe21451f4" prot="public" virt="virtual"><scope>PDI::Record_datatype</scope><name>clone</name></member>
      <member refid="classPDI_1_1Record__datatype_1a898b8663ac36edfb67cacb1987dfb644" prot="public" virt="virtual"><scope>PDI::Record_datatype</scope><name>clone_type</name></member>
      <member refid="classPDI_1_1Record__datatype_1a39797d23185a294f08dc2ebff976affe" prot="public" virt="virtual"><scope>PDI::Record_datatype</scope><name>data_from_dense_copy</name></member>
      <member refid="classPDI_1_1Record__datatype_1a4369630a6133e160a3c57b47cf995dad" prot="public" virt="virtual"><scope>PDI::Record_datatype</scope><name>data_to_dense_copy</name></member>
      <member refid="classPDI_1_1Record__datatype_1aa0e39bbe49abdbc4d6e806e148bbef30" prot="public" virt="virtual"><scope>PDI::Record_datatype</scope><name>datasize</name></member>
      <member refid="classPDI_1_1Record__datatype_1a18daca7d61b260de5457114643e2af75" prot="public" virt="virtual"><scope>PDI::Record_datatype</scope><name>debug_string</name></member>
      <member refid="classPDI_1_1Record__datatype_1ab5211f58ddcfbbb88243259182db1271" prot="public" virt="virtual"><scope>PDI::Record_datatype</scope><name>dense</name></member>
      <member refid="classPDI_1_1Record__datatype_1abb72cae0af1e9d4923165abd7044450c" prot="public" virt="virtual"><scope>PDI::Record_datatype</scope><name>densify</name></member>
      <member refid="classPDI_1_1Record__datatype_1aca8e88ed37db5f20244637e8c69d7a61" prot="public" virt="virtual"><scope>PDI::Record_datatype</scope><name>destroy_data</name></member>
      <member refid="classPDI_1_1Record__datatype_1a974a5b925407ade93a7f2b96a0ffd528" prot="public" virt="virtual"><scope>PDI::Record_datatype</scope><name>evaluate</name></member>
      <member refid="classPDI_1_1Datatype__template_1aa539eee3b7312a7f1be7fd85b64b5c85" prot="public" virt="non-virtual"><scope>PDI::Record_datatype</scope><name>load_basic_datatypes</name></member>
      <member refid="classPDI_1_1Record__datatype_1aef244e5b6fdb7bd88c441bf4a1a7b5f0" prot="private" virt="non-virtual"><scope>PDI::Record_datatype</scope><name>m_buffersize</name></member>
      <member refid="classPDI_1_1Record__datatype_1a6f199221aeefdb6c40463f306a00b1f3" prot="private" virt="non-virtual"><scope>PDI::Record_datatype</scope><name>m_members</name></member>
      <member refid="classPDI_1_1Record__datatype_1abc743d4a8adaeb8b630f29678f2665cf" prot="public" virt="non-virtual"><scope>PDI::Record_datatype</scope><name>members</name></member>
      <member refid="classPDI_1_1Datatype_1af80638919cb31c61451d0bc6220a69e3" prot="public" virt="non-virtual"><scope>PDI::Record_datatype</scope><name>operator!=</name></member>
      <member refid="classPDI_1_1Record__datatype_1aa70ca0cdfdad5344b7ddffb55b30acdc" prot="public" virt="virtual"><scope>PDI::Record_datatype</scope><name>operator==</name></member>
      <member refid="classPDI_1_1Record__datatype_1acf74cad00490ddb45a9bb36b6f30c3fd" prot="public" virt="non-virtual"><scope>PDI::Record_datatype</scope><name>Record_datatype</name></member>
      <member refid="classPDI_1_1Record__datatype_1a6286765cf6a1d050603f7adaed1edc93" prot="public" virt="virtual"><scope>PDI::Record_datatype</scope><name>simple</name></member>
      <member refid="classPDI_1_1Datatype_1ad2e19537809ba143ab9130c95b237dc2" prot="public" virt="non-virtual"><scope>PDI::Record_datatype</scope><name>~Datatype</name></member>
      <member refid="classPDI_1_1Datatype__template_1a8722c4b873d42931d8e159abaa62ff27" prot="public" virt="virtual"><scope>PDI::Record_datatype</scope><name>~Datatype_template</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classPDI_1_1Ref__any" kind="class" language="C++" prot="public">
    <compoundname>PDI::Ref_any</compoundname>
    <includes refid="pdi__fwd_8h" local="no">pdi_fwd.h</includes>
    <templateparamlist>
      <param>
        <type>bool</type>
        <declname>R</declname>
        <defname>R</defname>
      </param>
      <param>
        <type>bool</type>
        <declname>W</declname>
        <defname>W</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPDI_1_1Ref__any_1a0fd75d078f4990bc79c4eb7eaa9c6104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Ref_any&lt; R, W &gt;::Ref_any</definition>
        <argsstring>()=default</argsstring>
        <name>Ref_any</name>
        <briefdescription>
<para>Constructs a null reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1a9c7a6f95721dbc45abe421532bdcc51c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type/>
        <definition>PDI::Ref_any&lt; R, W &gt;::Ref_any</definition>
        <argsstring>(const Ref_any &amp;other) noexcept</argsstring>
        <name>Ref_any</name>
        <param>
          <type>const <ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copies an existing reference. </para>
        </briefdescription>
        <detaileddescription>
<para>if the requested rights can not be granted, the reference is made null</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the ref to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="303" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="303" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1a1cd0575fb982d4634d61955235085855" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>OR</declname>
            <defname>OR</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>OW</declname>
            <defname>OW</defname>
          </param>
        </templateparamlist>
        <type/>
        <definition>PDI::Ref_any&lt; R, W &gt;::Ref_any</definition>
        <argsstring>(const Ref_any&lt; OR, OW &gt; &amp;other) noexcept</argsstring>
        <name>Ref_any</name>
        <param>
          <type>const <ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref>&lt; OR, OW &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copies an existing reference with different privileges. </para>
        </briefdescription>
        <detaileddescription>
<para>if the requested rights can not be granted, the reference is made null</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the ref to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="316" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="316" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1a58af66a3ad905c93c90e645da1517683" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type/>
        <definition>PDI::Ref_any&lt; R, W &gt;::Ref_any</definition>
        <argsstring>(Ref_any &amp;&amp;other) noexcept</argsstring>
        <name>Ref_any</name>
        <param>
          <type><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Moves an existing reference. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the ref to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="325" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="325" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1a452ff2a3f09be920e36cb836cf941252" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>PDI::Ref_any&lt; R, W &gt;::Ref_any</definition>
        <argsstring>(void *data, std::function&lt; void(void *)&gt; freefunc, Datatype_uptr type, bool readable, bool writable)</argsstring>
        <name>Ref_any</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::function&lt; void(void *)&gt;</type>
          <declname>freefunc</declname>
        </param>
        <param>
          <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>readable</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>writable</declname>
        </param>
        <briefdescription>
<para>Creates a reference to currently unreferenced data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the raw data to reference </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>freefunc</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to use to free the data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the referenced data, ownership will be taken </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>readable</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum allowed access to the underlying content </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>writable</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum allowed access to the underlying content </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="344" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="344" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1ad3b23b81d198eabcf570e16baa162834" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>PDI::Ref_any&lt; R, W &gt;::Ref_any</definition>
        <argsstring>(Ref other, size_t offset, Datatype_uptr type)</argsstring>
        <name>Ref_any</name>
        <param>
          <type><ref refid="namespacePDI_1adc363df268e6e68e68947a4fc799ca00" kindref="member">Ref</ref></type>
          <declname>other</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Creates a subreference from reference. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>offset/type will be replace by datatype access sequence</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>source reference </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>_dataoffset of the new memory address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the subreferenced data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="363" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="363" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1a5a218fe4417d8f0a3dbe26ced3803ac4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>PDI::Ref_any&lt; R, W &gt;::~Ref_any</definition>
        <argsstring>()</argsstring>
        <name>~Ref_any</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="377" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1accdee708edbe126e188f225c6d1ded34" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref> &amp;</type>
        <definition>Ref_any&amp; PDI::Ref_any&lt; R, W &gt;::operator=</definition>
        <argsstring>(Ref_any &amp;&amp;other) const noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="382" column="9" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="382" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1a8ee978e5f25bf6ae3de60a2f4012fd6e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref> &amp;</type>
        <definition>Ref_any&amp; PDI::Ref_any&lt; R, W &gt;::operator=</definition>
        <argsstring>(const Ref_any &amp;other) const noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="398" column="9" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="398" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1aaba9dfd510ac25c7bafd7a25d96da0c2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool PDI::Ref_any&lt; R, W &gt;::operator==</definition>
        <argsstring>(const Reference_base &amp;o) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="409" column="6" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="409" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1af640649a7aadf5deb73a403371b4db86" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool PDI::Ref_any&lt; R, W &gt;::operator!=</definition>
        <argsstring>(const Reference_base &amp;o) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="415" column="6" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="415" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1acde4af4cc40aae6374179bd27cd55363" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool PDI::Ref_any&lt; R, W &gt;::operator&lt;</definition>
        <argsstring>(const Reference_base &amp;o) const noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="421" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="421" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1a28a762df5e82eed15ea81cd02e9c81f0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool PDI::Ref_any&lt; R, W &gt;::operator&gt;</definition>
        <argsstring>(const Reference_base &amp;o) const noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="427" column="6" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="427" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1af3143f822cfb5c609f05310c4c6e6c79" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool PDI::Ref_any&lt; R, W &gt;::operator&lt;=</definition>
        <argsstring>(const Reference_base &amp;o) const noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="433" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="433" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1a902c7d2864a1323dfb804fa65503b32e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool PDI::Ref_any&lt; R, W &gt;::operator&gt;=</definition>
        <argsstring>(const Reference_base &amp;o) const noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="439" column="6" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="439" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1ad762f327bf4a69f0682927d9e19b03f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>PDI::Ref_any&lt; R, W &gt;::operator typename Ref_access&lt; R, W &gt;::type</definition>
        <argsstring>() const</argsstring>
        <name>operator typename Ref_access&lt; R, W &gt;::type</name>
        <briefdescription>
<para>Offers access to the referenced raw data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a pointer to the referenced raw data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="449" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="449" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1ad8d6851233a405e0e1c27d2e762c6cb9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Ref_access&lt; R, W &gt;::type</type>
        <definition>Ref_access&lt;R, W&gt;::type PDI::Ref_any&lt; R, W &gt;::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <briefdescription>
<para>Offers access to the referenced raw data, throws on null references. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a pointer to the referenced raw data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="458" column="28" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="458" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1a48997acb1054747c1e80b7c6a0a4ed52" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Ref_access&lt; R, W &gt;::type</type>
        <definition>Ref_access&lt;R, W&gt;::type PDI::Ref_any&lt; R, W &gt;::get</definition>
        <argsstring>(std::nothrow_t) const noexcept</argsstring>
        <name>get</name>
        <param>
          <type>std::nothrow_t</type>
        </param>
        <briefdescription>
<para>Offers access to the referenced raw data, returns null for null references. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a pointer to the referenced raw data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="468" column="28" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="468" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1a28a8812a5a112ce01f0f776688d95c80" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type/>
        <definition>PDI::Ref_any&lt; R, W &gt;::operator bool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Checks whether this is a null reference. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether this reference is non-null </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="478" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="478" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1aeffec00c8b23f6d5edadd3af1a651e5d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void PDI::Ref_any&lt; R, W &gt;::reset</definition>
        <argsstring>() noexcept</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Nullify the reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="485" column="6" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="485" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1a92c53a0398732686e7b50480d4e2d82b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacePDI_1adc363df268e6e68e68947a4fc799ca00" kindref="member">Ref</ref></type>
        <definition>Ref PDI::Ref_any&lt; R, W &gt;::copy</definition>
        <argsstring>() const</argsstring>
        <name>copy</name>
        <briefdescription>
<para>Makes a copy of the raw content behind this reference and returns a new reference. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a new reference to a copy of the raw data this references </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="495" column="5" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="495" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1a2f653ad7b6152b4c1f027ed155c12e25" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* PDI::Ref_any&lt; R, W &gt;::release</definition>
        <argsstring>() noexcept</argsstring>
        <name>release</name>
        <briefdescription>
<para>Releases ownership of the referenced raw data by nullifying all existing references. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the previously referenced raw data or nullptr if this was a null reference, i.e. the value which would be returned by <ref refid="classPDI_1_1Ref__any_1ad8d6851233a405e0e1c27d2e762c6cb9" kindref="member">get()</ref> before the call. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="506" column="6" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="506" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1ab7cdbc0c95456fbf7993bb260e908bea" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void PDI::Ref_any&lt; R, W &gt;::on_nullify</definition>
        <argsstring>(std::function&lt; void(Ref)&gt; notifier) const noexcept</argsstring>
        <name>on_nullify</name>
        <param>
          <type>std::function&lt; void(<ref refid="namespacePDI_1adc363df268e6e68e68947a4fc799ca00" kindref="member">Ref</ref>)&gt;</type>
          <declname>notifier</declname>
        </param>
        <briefdescription>
<para>Registers a nullification callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notifier</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to call when this reference becomes null </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="533" column="6" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="533" bodyend="536"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classPDI_1_1Ref__any_1a9bbae392e5e4b3a8bb29c37df953fe60" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool PDI::Ref_any&lt; R, W &gt;::is_null</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_null</name>
        <briefdescription>
<para>Tests if the reference is null. </para>
        </briefdescription>
        <detaileddescription>
<para>Ensures m_content is null if the reference is to fasten deletion of the shared Data_content</para>
<para><simplesect kind="return"><para>Whether the reference is null </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="546" column="7" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="546" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1abb97a5eff0b5f2e4403e8666665059c3" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void PDI::Ref_any&lt; R, W &gt;::unlink</definition>
        <argsstring>() const noexcept</argsstring>
        <name>unlink</name>
        <briefdescription>
<para>Unlink this reference from its content. </para>
        </briefdescription>
        <detaileddescription>
<para>Can only be done on a reference with content </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="560" column="7" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="560" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Ref__any_1a3910ec267b0b31b9ecc965666937fdf1" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void PDI::Ref_any&lt; R, W &gt;::link</definition>
        <argsstring>(Referenced_data *content) noexcept</argsstring>
        <name>link</name>
        <param>
          <type>Referenced_data *</type>
          <declname>content</declname>
        </param>
        <briefdescription>
<para>Tries to link this reference to a content, leaves it null if privileges can not be granted. </para>
        </briefdescription>
        <detaileddescription>
<para>Can only be done on a null reference</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>the content to link to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="578" column="7" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="578" bodyend="588"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A dynamically typed reference to data with automatic memory management and read/write locking semantic. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref> is a smart pointer that features:<itemizedlist>
<listitem><para>a dynamic type system,</para>
</listitem><listitem><para>garbage collection mechanism similar to std::shared_ptr,</para>
</listitem><listitem><para>a read/write locking mechanism similar to std::shared_mutex,</para>
</listitem><listitem><para>a release system that nullifies all existing references to the raw data,</para>
</listitem><listitem><para>a notification system to be notified when a reference is going to be nullified.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>As of now, and unlike std::shared_ptr, the lock system can not be relied upon in a multithreaded environment. </para>
</simplesect>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>PDI::Ref_any&lt; R, W &gt;</label>
        <link refid="classPDI_1_1Ref__any"/>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h" line="77" column="11" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h" bodystart="77" bodyend="-1"/>
    <listofallmembers>
      <member refid="classPDI_1_1Ref__any_1a92c53a0398732686e7b50480d4e2d82b" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>copy</name></member>
      <member refid="classPDI_1_1Ref__any_1ad8d6851233a405e0e1c27d2e762c6cb9" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>get</name></member>
      <member refid="classPDI_1_1Ref__any_1a48997acb1054747c1e80b7c6a0a4ed52" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>get</name></member>
      <member refid="classPDI_1_1Ref__any_1a9bbae392e5e4b3a8bb29c37df953fe60" prot="private" virt="non-virtual"><scope>PDI::Ref_any</scope><name>is_null</name></member>
      <member refid="classPDI_1_1Ref__any_1a3910ec267b0b31b9ecc965666937fdf1" prot="private" virt="non-virtual"><scope>PDI::Ref_any</scope><name>link</name></member>
      <member refid="classPDI_1_1Ref__any_1ab7cdbc0c95456fbf7993bb260e908bea" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>on_nullify</name></member>
      <member refid="classPDI_1_1Ref__any_1a28a8812a5a112ce01f0f776688d95c80" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>operator bool</name></member>
      <member refid="classPDI_1_1Ref__any_1ad762f327bf4a69f0682927d9e19b03f1" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>operator typename Ref_access&lt; R, W &gt;::type</name></member>
      <member refid="classPDI_1_1Ref__any_1af640649a7aadf5deb73a403371b4db86" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>operator!=</name></member>
      <member refid="classPDI_1_1Ref__any_1acde4af4cc40aae6374179bd27cd55363" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>operator&lt;</name></member>
      <member refid="classPDI_1_1Ref__any_1af3143f822cfb5c609f05310c4c6e6c79" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>operator&lt;=</name></member>
      <member refid="classPDI_1_1Ref__any_1accdee708edbe126e188f225c6d1ded34" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>operator=</name></member>
      <member refid="classPDI_1_1Ref__any_1a8ee978e5f25bf6ae3de60a2f4012fd6e" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>operator=</name></member>
      <member refid="classPDI_1_1Ref__any_1aaba9dfd510ac25c7bafd7a25d96da0c2" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>operator==</name></member>
      <member refid="classPDI_1_1Ref__any_1a28a762df5e82eed15ea81cd02e9c81f0" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>operator&gt;</name></member>
      <member refid="classPDI_1_1Ref__any_1a902c7d2864a1323dfb804fa65503b32e" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>operator&gt;=</name></member>
      <member refid="classPDI_1_1Ref__any_1a0fd75d078f4990bc79c4eb7eaa9c6104" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>Ref_any</name></member>
      <member refid="classPDI_1_1Ref__any_1a9c7a6f95721dbc45abe421532bdcc51c" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>Ref_any</name></member>
      <member refid="classPDI_1_1Ref__any_1a1cd0575fb982d4634d61955235085855" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>Ref_any</name></member>
      <member refid="classPDI_1_1Ref__any_1a58af66a3ad905c93c90e645da1517683" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>Ref_any</name></member>
      <member refid="classPDI_1_1Ref__any_1a452ff2a3f09be920e36cb836cf941252" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>Ref_any</name></member>
      <member refid="classPDI_1_1Ref__any_1ad3b23b81d198eabcf570e16baa162834" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>Ref_any</name></member>
      <member refid="classPDI_1_1Ref__any_1a2f653ad7b6152b4c1f027ed155c12e25" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>release</name></member>
      <member refid="classPDI_1_1Ref__any_1aeffec00c8b23f6d5edadd3af1a651e5d" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>reset</name></member>
      <member refid="classPDI_1_1Ref__any_1abb97a5eff0b5f2e4403e8666665059c3" prot="private" virt="non-virtual"><scope>PDI::Ref_any</scope><name>unlink</name></member>
      <member refid="classPDI_1_1Ref__any_1a5a218fe4417d8f0a3dbe26ced3803ac4" prot="public" virt="non-virtual"><scope>PDI::Ref_any</scope><name>~Ref_any</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classPDI_1_1Reference__base" kind="class" language="C++" prot="public">
    <compoundname>PDI::Reference_base</compoundname>
    <includes refid="ref__any_8h" local="no">ref_any.h</includes>
    <innerclass refid="structPDI_1_1Reference__base_1_1Referenced__buffer" prot="protected">PDI::Reference_base::Referenced_buffer</innerclass>
    <innerclass refid="structPDI_1_1Reference__base_1_1Referenced__data" prot="protected">PDI::Reference_base::Referenced_data</innerclass>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classPDI_1_1Reference__base_1a83bc9b650ba7604ee7aa5fa72c3a3abe" prot="protected" static="no" mutable="yes">
        <type><ref refid="structPDI_1_1Reference__base_1_1Referenced__data" kindref="compound">Referenced_data</ref> *</type>
        <definition>Referenced_data* PDI::Reference_base::m_content</definition>
        <argsstring/>
        <name>m_content</name>
        <briefdescription>
<para>Pointer on the data content, can be null if the ref is null. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="232" column="25" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classPDI_1_1Reference__base_1abffc0d025215e15765806b9335fce6f7" prot="protected" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structPDI_1_1Reference__base_1_1Referenced__data" kindref="compound">Referenced_data</ref> *</type>
        <definition>static Referenced_data* PDI::Reference_base::get_content</definition>
        <argsstring>(const Reference_base &amp;other) noexcept</argsstring>
        <name>get_content</name>
        <param>
          <type>const <ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Function to access the content from a reference with different access right. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="237" column="25" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="237" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Reference__base_1a9a55c164d2f2b77c454de6c15ffff7f9" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacePDI_1adc363df268e6e68e68947a4fc799ca00" kindref="member">Ref</ref></type>
        <definition>static Ref PDI::Reference_base::do_copy</definition>
        <argsstring>(Ref_r ref)</argsstring>
        <name>do_copy</name>
        <param>
          <type><ref refid="namespacePDI_1a7d5272dcf2920dfbe084e779e942b2e3" kindref="member">Ref_r</ref></type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="246" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classPDI_1_1Reference__base_1a4dd1558a879722ee11c8b349e78b367c" prot="protected" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type/>
        <definition>PDI::Reference_base::Reference_base</definition>
        <argsstring>() noexcept</argsstring>
        <name>Reference_base</name>
        <briefdescription>
<para>Constructs a null reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="250" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Reference__base_1a59b8cb3c4388710c39114abb7ce221b5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Reference_base::Reference_base</definition>
        <argsstring>(const Reference_base &amp;)=delete</argsstring>
        <name>Reference_base</name>
        <param>
          <type>const <ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Reference__base_1a3c1d3117976f72d8d001ed9e59299a18" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Reference_base::Reference_base</definition>
        <argsstring>(Reference_base &amp;&amp;)=delete</argsstring>
        <name>Reference_base</name>
        <param>
          <type><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Reference__base_1af43d8420c97de3cf419d02e3394a06b2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref> &amp;</type>
        <definition>Reference_base&amp; PDI::Reference_base::operator=</definition>
        <argsstring>(const Reference_base &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="258" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Reference__base_1ac2a7ccba4099db8a24c6ab061c868053" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref> &amp;</type>
        <definition>Reference_base&amp; PDI::Reference_base::operator=</definition>
        <argsstring>(Reference_base &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="260" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPDI_1_1Reference__base_1a281fb6b0fae3cfb5781af75858831131" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> &amp;</type>
        <definition>const Datatype&amp; PDI::Reference_base::type</definition>
        <argsstring>() const noexcept</argsstring>
        <name>type</name>
        <briefdescription>
<para>accesses the type of the referenced raw data </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="265" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Reference__base_1a797958e702e1c0d8068b8c6a2f3a76b5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PDI::Reference_base::hash</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="267" column="8" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="267" bodyend="270"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A common base for all references, whatever their access privileges. </para>
    </briefdescription>
    <detaileddescription>
<para>This ensure all reference, even with different type because of differing access privileges, can access the content at this level in each other. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="4">
        <label>PDI::Datatype</label>
        <link refid="classPDI_1_1Datatype"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>PDI::Datatype_template</label>
        <link refid="classPDI_1_1Datatype__template"/>
      </node>
      <node id="3">
        <label>std::unique_ptr&lt; Datatype &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>+ptr</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>PDI::Reference_base::Referenced_buffer</label>
        <link refid="structPDI_1_1Reference__base_1_1Referenced__buffer"/>
        <childnode refid="7" relation="usage">
          <edgelabel>+m_notifications</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>PDI::Reference_base</label>
        <link refid="classPDI_1_1Reference__base"/>
        <childnode refid="2" relation="usage">
          <edgelabel>#m_content</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::unordered_map&lt; const PDI::Reference_base *, std::function&lt; void(PDI::Ref_any)&gt; &gt;</label>
        <childnode refid="1" relation="usage">
          <edgelabel>+keys</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>PDI::Reference_base::Referenced_data</label>
        <link refid="structPDI_1_1Reference__base_1_1Referenced__data"/>
        <childnode refid="3" relation="usage">
          <edgelabel>+m_type</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>+m_buffer</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="98" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="97" bodyend="272"/>
    <listofallmembers>
      <member refid="classPDI_1_1Reference__base_1a9a55c164d2f2b77c454de6c15ffff7f9" prot="protected" virt="non-virtual"><scope>PDI::Reference_base</scope><name>do_copy</name></member>
      <member refid="classPDI_1_1Reference__base_1abffc0d025215e15765806b9335fce6f7" prot="protected" virt="non-virtual"><scope>PDI::Reference_base</scope><name>get_content</name></member>
      <member refid="classPDI_1_1Reference__base_1a797958e702e1c0d8068b8c6a2f3a76b5" prot="public" virt="non-virtual"><scope>PDI::Reference_base</scope><name>hash</name></member>
      <member refid="classPDI_1_1Reference__base_1a83bc9b650ba7604ee7aa5fa72c3a3abe" prot="protected" virt="non-virtual"><scope>PDI::Reference_base</scope><name>m_content</name></member>
      <member refid="classPDI_1_1Reference__base_1af43d8420c97de3cf419d02e3394a06b2" prot="protected" virt="non-virtual"><scope>PDI::Reference_base</scope><name>operator=</name></member>
      <member refid="classPDI_1_1Reference__base_1ac2a7ccba4099db8a24c6ab061c868053" prot="protected" virt="non-virtual"><scope>PDI::Reference_base</scope><name>operator=</name></member>
      <member refid="classPDI_1_1Reference__base_1a4dd1558a879722ee11c8b349e78b367c" prot="protected" virt="non-virtual"><scope>PDI::Reference_base</scope><name>Reference_base</name></member>
      <member refid="classPDI_1_1Reference__base_1a59b8cb3c4388710c39114abb7ce221b5" prot="protected" virt="non-virtual"><scope>PDI::Reference_base</scope><name>Reference_base</name></member>
      <member refid="classPDI_1_1Reference__base_1a3c1d3117976f72d8d001ed9e59299a18" prot="protected" virt="non-virtual"><scope>PDI::Reference_base</scope><name>Reference_base</name></member>
      <member refid="classPDI_1_1Reference__base_1a281fb6b0fae3cfb5781af75858831131" prot="public" virt="non-virtual"><scope>PDI::Reference_base</scope><name>type</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structPDI_1_1Reference__base_1_1Referenced__buffer" kind="struct" language="C++" prot="protected">
    <compoundname>PDI::Reference_base::Referenced_buffer</compoundname>
    <includes refid="ref__any_8h" local="no">ref_any.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structPDI_1_1Reference__base_1_1Referenced__buffer_1aa5dcb284264bb6fe02328cf1dea994b0" prot="public" static="no" mutable="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; PDI::Reference_base::Referenced_buffer::m_delete</definition>
        <argsstring/>
        <name>m_delete</name>
        <briefdescription>
<para>The function to call to deallocate the buffer memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="108" column="15" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structPDI_1_1Reference__base_1_1Referenced__buffer_1ab25d44bd84fba7cb66590cc2b8778268" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int PDI::Reference_base::Referenced_buffer::m_owners</definition>
        <argsstring/>
        <name>m_owners</name>
        <briefdescription>
<para>Number of references to this buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="111" column="5" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structPDI_1_1Reference__base_1_1Referenced__buffer_1a76599d8ea1917313f00676f99841fa32" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int PDI::Reference_base::Referenced_buffer::m_read_locks</definition>
        <argsstring/>
        <name>m_read_locks</name>
        <briefdescription>
<para>Number of locks preventing read access. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="114" column="5" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structPDI_1_1Reference__base_1_1Referenced__buffer_1a3d2fb5f1e7caedaffc0f38655fe47b85" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int PDI::Reference_base::Referenced_buffer::m_write_locks</definition>
        <argsstring/>
        <name>m_write_locks</name>
        <briefdescription>
<para>Number of locks preventing write access. </para>
        </briefdescription>
        <detaileddescription>
<para>this should always remain between 0 &amp; 2 inclusive w. current implem. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="120" column="5" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structPDI_1_1Reference__base_1_1Referenced__buffer_1a2e143e68185ed62e38238173e904d8a5" prot="public" static="no" mutable="no">
        <type>std::unordered_map&lt; const <ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref> *, std::function&lt; void(<ref refid="namespacePDI_1adc363df268e6e68e68947a4fc799ca00" kindref="member">Ref</ref>)&gt; &gt;</type>
        <definition>std::unordered_map&lt;const Reference_base*, std::function&lt;void(Ref)&gt; &gt; PDI::Reference_base::Referenced_buffer::m_notifications</definition>
        <argsstring/>
        <name>m_notifications</name>
        <briefdescription>
<para>Nullification notifications registered on this instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="123" column="20" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structPDI_1_1Reference__base_1_1Referenced__buffer_1ab37085f14d84b20f38540cf8f26cdaf7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type/>
        <definition>PDI::Reference_base::Referenced_buffer::Referenced_buffer</definition>
        <argsstring>(std::function&lt; void()&gt; deleter, bool readable, bool writable) noexcept</argsstring>
        <name>Referenced_buffer</name>
        <param>
          <type>std::function&lt; void()&gt;</type>
          <declname>deleter</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>readable</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>writable</declname>
        </param>
        <briefdescription>
<para>Constructs a new buffer descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to use to deallocate the buffer memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>readable</parametername>
</parameternamelist>
<parameterdescription>
<para>whether it is allowed to read the content </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>writable</parametername>
</parameternamelist>
<parameterdescription>
<para>whether it is allowed to write the content </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="131" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="131" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="structPDI_1_1Reference__base_1_1Referenced__buffer_1a3d02ae7baada67e361dd82c253f0e12f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Reference_base::Referenced_buffer::Referenced_buffer</definition>
        <argsstring>()=delete</argsstring>
        <name>Referenced_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structPDI_1_1Reference__base_1_1Referenced__buffer_1a314c2e6bfca312478b1b8b26568a268d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Reference_base::Referenced_buffer::Referenced_buffer</definition>
        <argsstring>(const Referenced_buffer &amp;)=delete</argsstring>
        <name>Referenced_buffer</name>
        <param>
          <type>const <ref refid="structPDI_1_1Reference__base_1_1Referenced__buffer" kindref="compound">Referenced_buffer</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structPDI_1_1Reference__base_1_1Referenced__buffer_1a5c171e64cf6c7eeae34df3a64e559591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Reference_base::Referenced_buffer::Referenced_buffer</definition>
        <argsstring>(Referenced_buffer &amp;&amp;)=delete</argsstring>
        <name>Referenced_buffer</name>
        <param>
          <type><ref refid="structPDI_1_1Reference__base_1_1Referenced__buffer" kindref="compound">Referenced_buffer</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structPDI_1_1Reference__base_1_1Referenced__buffer_1af373be0540e44fa6acbc111cf513eeae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>PDI::Reference_base::Referenced_buffer::~Referenced_buffer</definition>
        <argsstring>()</argsstring>
        <name>~Referenced_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="145" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="145" bodyend="152"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A descriptor for a buffer in which references can point. </para>
    </briefdescription>
    <detaileddescription>
<para>Both locking and memory management happen at this granularity. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="6">
        <label>PDI::Datatype</label>
        <link refid="classPDI_1_1Datatype"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>PDI::Datatype_template</label>
        <link refid="classPDI_1_1Datatype__template"/>
      </node>
      <node id="5">
        <label>std::unique_ptr&lt; Datatype &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>+ptr</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>PDI::Reference_base::Referenced_buffer</label>
        <link refid="structPDI_1_1Reference__base_1_1Referenced__buffer"/>
        <childnode refid="2" relation="usage">
          <edgelabel>+m_notifications</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>PDI::Reference_base</label>
        <link refid="classPDI_1_1Reference__base"/>
        <childnode refid="4" relation="usage">
          <edgelabel>#m_content</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>std::unordered_map&lt; const PDI::Reference_base *, std::function&lt; void(PDI::Ref_any)&gt; &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>+keys</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>PDI::Reference_base::Referenced_data</label>
        <link refid="structPDI_1_1Reference__base_1_1Referenced__data"/>
        <childnode refid="5" relation="usage">
          <edgelabel>+m_type</edgelabel>
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>+m_buffer</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="105" column="24" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="105" bodyend="154"/>
    <listofallmembers>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__buffer_1aa5dcb284264bb6fe02328cf1dea994b0" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_buffer</scope><name>m_delete</name></member>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__buffer_1a2e143e68185ed62e38238173e904d8a5" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_buffer</scope><name>m_notifications</name></member>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__buffer_1ab25d44bd84fba7cb66590cc2b8778268" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_buffer</scope><name>m_owners</name></member>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__buffer_1a76599d8ea1917313f00676f99841fa32" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_buffer</scope><name>m_read_locks</name></member>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__buffer_1a3d2fb5f1e7caedaffc0f38655fe47b85" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_buffer</scope><name>m_write_locks</name></member>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__buffer_1ab37085f14d84b20f38540cf8f26cdaf7" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_buffer</scope><name>Referenced_buffer</name></member>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__buffer_1a3d02ae7baada67e361dd82c253f0e12f" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_buffer</scope><name>Referenced_buffer</name></member>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__buffer_1a314c2e6bfca312478b1b8b26568a268d" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_buffer</scope><name>Referenced_buffer</name></member>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__buffer_1a5c171e64cf6c7eeae34df3a64e559591" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_buffer</scope><name>Referenced_buffer</name></member>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__buffer_1af373be0540e44fa6acbc111cf513eeae" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_buffer</scope><name>~Referenced_buffer</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structPDI_1_1Reference__base_1_1Referenced__data" kind="struct" language="C++" prot="protected">
    <compoundname>PDI::Reference_base::Referenced_data</compoundname>
    <includes refid="ref__any_8h" local="no">ref_any.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structPDI_1_1Reference__base_1_1Referenced__data_1a47d425768bcf062a051b1885d6704eab" prot="public" static="no" mutable="yes">
        <type><ref refid="structPDI_1_1Reference__base_1_1Referenced__buffer" kindref="compound">Referenced_buffer</ref> *</type>
        <definition>Referenced_buffer* PDI::Reference_base::Referenced_data::m_buffer</definition>
        <argsstring/>
        <name>m_buffer</name>
        <briefdescription>
<para>The buffer in which the data lives. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="163" column="27" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structPDI_1_1Reference__base_1_1Referenced__data_1aa875a3fbf2de9102a301be833c27fc37" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* PDI::Reference_base::Referenced_data::m_data</definition>
        <argsstring/>
        <name>m_data</name>
        <briefdescription>
<para>In-memory location of the data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="166" column="6" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structPDI_1_1Reference__base_1_1Referenced__data_1aa5fa0cd7d9300c6cedf22bfb4a293bfd" prot="public" static="no" mutable="no">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>Datatype_uptr PDI::Reference_base::Referenced_data::m_type</definition>
        <argsstring/>
        <name>m_type</name>
        <briefdescription>
<para>Type of the data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="169" column="15" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structPDI_1_1Reference__base_1_1Referenced__data_1ae938ed04850154fb1ad71e801a673f90" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int PDI::Reference_base::Referenced_data::m_owners</definition>
        <argsstring/>
        <name>m_owners</name>
        <briefdescription>
<para>Number of references to this data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="172" column="5" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structPDI_1_1Reference__base_1_1Referenced__data_1aa2153e70a3fe6e93c52ba1a384919af5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>PDI::Reference_base::Referenced_data::Referenced_data</definition>
        <argsstring>(Referenced_buffer *buffer, void *data, Datatype_uptr type)</argsstring>
        <name>Referenced_data</name>
        <param>
          <type><ref refid="structPDI_1_1Reference__base_1_1Referenced__buffer" kindref="compound">Referenced_buffer</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Constructs a new data descriptor from an already referenced buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer containing the data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data location </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="180" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="180" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="structPDI_1_1Reference__base_1_1Referenced__data_1a06d48a429afc3475cb13a4affe44d6a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>PDI::Reference_base::Referenced_data::Referenced_data</definition>
        <argsstring>(void *data, std::function&lt; void(void *)&gt; freefunc, Datatype_uptr type, bool readable, bool writable)</argsstring>
        <name>Referenced_data</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::function&lt; void(void *)&gt;</type>
          <declname>freefunc</declname>
        </param>
        <param>
          <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>readable</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>writable</declname>
        </param>
        <briefdescription>
<para>Constructs a new data descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data location </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>freefunc</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to use to free the data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>readable</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum allowed access to the underlying content </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>writable</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum allowed access to the underlying content </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="199" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="199" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="structPDI_1_1Reference__base_1_1Referenced__data_1ad5fdf9fb6ad8754fb7132b5b2f7545c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Reference_base::Referenced_data::Referenced_data</definition>
        <argsstring>()=delete</argsstring>
        <name>Referenced_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structPDI_1_1Reference__base_1_1Referenced__data_1a94dc937d9ccf97c9731f7179e71d662e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Reference_base::Referenced_data::Referenced_data</definition>
        <argsstring>(const Referenced_data &amp;)=delete</argsstring>
        <name>Referenced_data</name>
        <param>
          <type>const <ref refid="structPDI_1_1Reference__base_1_1Referenced__data" kindref="compound">Referenced_data</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structPDI_1_1Reference__base_1_1Referenced__data_1afbfa6c16b064b96e0cfec0650559a2e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Reference_base::Referenced_data::Referenced_data</definition>
        <argsstring>(Referenced_data &amp;&amp;)=delete</argsstring>
        <name>Referenced_data</name>
        <param>
          <type><ref refid="structPDI_1_1Reference__base_1_1Referenced__data" kindref="compound">Referenced_data</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structPDI_1_1Reference__base_1_1Referenced__data_1a59f52a41f5dc22ff0521c0a980029370" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>PDI::Reference_base::Referenced_data::~Referenced_data</definition>
        <argsstring>()</argsstring>
        <name>~Referenced_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="220" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="220" bodyend="226"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A descriptor for data on which references can point. </para>
    </briefdescription>
    <detaileddescription>
<para>The content type is handled at this granularity </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="3">
        <label>PDI::Datatype</label>
        <link refid="classPDI_1_1Datatype"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>PDI::Datatype_template</label>
        <link refid="classPDI_1_1Datatype__template"/>
      </node>
      <node id="2">
        <label>std::unique_ptr&lt; Datatype &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>+ptr</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>PDI::Reference_base::Referenced_buffer</label>
        <link refid="structPDI_1_1Reference__base_1_1Referenced__buffer"/>
        <childnode refid="6" relation="usage">
          <edgelabel>+m_notifications</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>PDI::Reference_base</label>
        <link refid="classPDI_1_1Reference__base"/>
        <childnode refid="1" relation="usage">
          <edgelabel>#m_content</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::unordered_map&lt; const PDI::Reference_base *, std::function&lt; void(PDI::Ref_any)&gt; &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>+keys</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>PDI::Reference_base::Referenced_data</label>
        <link refid="structPDI_1_1Reference__base_1_1Referenced__data"/>
        <childnode refid="2" relation="usage">
          <edgelabel>+m_type</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>+m_buffer</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="160" column="22" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" bodystart="160" bodyend="227"/>
    <listofallmembers>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__data_1a47d425768bcf062a051b1885d6704eab" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_data</scope><name>m_buffer</name></member>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__data_1aa875a3fbf2de9102a301be833c27fc37" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_data</scope><name>m_data</name></member>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__data_1ae938ed04850154fb1ad71e801a673f90" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_data</scope><name>m_owners</name></member>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__data_1aa5fa0cd7d9300c6cedf22bfb4a293bfd" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_data</scope><name>m_type</name></member>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__data_1aa2153e70a3fe6e93c52ba1a384919af5" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_data</scope><name>Referenced_data</name></member>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__data_1a06d48a429afc3475cb13a4affe44d6a9" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_data</scope><name>Referenced_data</name></member>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__data_1ad5fdf9fb6ad8754fb7132b5b2f7545c6" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_data</scope><name>Referenced_data</name></member>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__data_1a94dc937d9ccf97c9731f7179e71d662e" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_data</scope><name>Referenced_data</name></member>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__data_1afbfa6c16b064b96e0cfec0650559a2e8" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_data</scope><name>Referenced_data</name></member>
      <member refid="structPDI_1_1Reference__base_1_1Referenced__data_1a59f52a41f5dc22ff0521c0a980029370" prot="public" virt="non-virtual"><scope>PDI::Reference_base::Referenced_data</scope><name>~Referenced_data</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classPDI_1_1Scalar__datatype" kind="class" language="C++" prot="public">
    <compoundname>PDI::Scalar_datatype</compoundname>
    <basecompoundref refid="classPDI_1_1Datatype" prot="public" virt="non-virtual">PDI::Datatype</basecompoundref>
    <includes refid="scalar__datatype_8h" local="no">scalar_datatype.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classPDI_1_1Scalar__datatype_1a5596bf27bff801817e53e7c65f27bb21" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t PDI::Scalar_datatype::m_size</definition>
        <argsstring/>
        <name>m_size</name>
        <briefdescription>
<para>Size of the content in bytes or 0 if unknown. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="85" column="8" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPDI_1_1Scalar__datatype_1a4c2a91a8e6a86ebefe8a0a165b1c5efd" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t PDI::Scalar_datatype::m_dense_size</definition>
        <argsstring/>
        <name>m_dense_size</name>
        <briefdescription>
<para>Size of the densified content in bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="88" column="8" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPDI_1_1Scalar__datatype_1add2240fd379b86ed06bbb3c4e46f4afc" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t PDI::Scalar_datatype::m_align</definition>
        <argsstring/>
        <name>m_align</name>
        <briefdescription>
<para>Size of the alignment in bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="91" column="8" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPDI_1_1Scalar__datatype_1a4b47e5b9783b79383e6ad99348de70ed" prot="private" static="no" mutable="no">
        <type><ref refid="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7" kindref="member">Scalar_kind</ref></type>
        <definition>Scalar_kind PDI::Scalar_datatype::m_kind</definition>
        <argsstring/>
        <name>m_kind</name>
        <briefdescription>
<para>Interpretation of the content. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="94" column="13" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPDI_1_1Scalar__datatype_1afb898b53351417cc770961642e3b3183" prot="private" static="no" mutable="no">
        <type>std::function&lt; void *(void *, const void *)&gt;</type>
        <definition>std::function&lt;void* (void*, const void*)&gt; PDI::Scalar_datatype::m_copy</definition>
        <argsstring/>
        <name>m_copy</name>
        <briefdescription>
<para>copy function or null for memcpy </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="97" column="15" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPDI_1_1Scalar__datatype_1acba38b9ab4891e75f59e6b0f29832aea" prot="private" static="no" mutable="no">
        <type>std::function&lt; void(void *)&gt;</type>
        <definition>std::function&lt;void(void*)&gt; PDI::Scalar_datatype::m_destroy</definition>
        <argsstring/>
        <name>m_destroy</name>
        <briefdescription>
<para>destroy function or null for memcpy </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="100" column="15" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPDI_1_1Scalar__datatype_1a2236114e142dc884965d2b45aae45c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Scalar_datatype::Scalar_datatype</definition>
        <argsstring>(Scalar_kind kind, size_t size)</argsstring>
        <name>Scalar_datatype</name>
        <param>
          <type><ref refid="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7" kindref="member">Scalar_kind</ref></type>
          <declname>kind</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Scalar__datatype_1a2c7b8776d6c2a1c7bad5a8a1678a1cc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Scalar_datatype::Scalar_datatype</definition>
        <argsstring>(Scalar_kind kind, size_t size, size_t align)</argsstring>
        <name>Scalar_datatype</name>
        <param>
          <type><ref refid="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7" kindref="member">Scalar_kind</ref></type>
          <declname>kind</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>align</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Scalar__datatype_1a912bd5c382dbaf7b8785f2d3d2bbb0e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>PDI::Scalar_datatype::Scalar_datatype</definition>
        <argsstring>(Scalar_kind kind, size_t size, size_t align, size_t dense_size, std::function&lt; void *(void *, const void *)&gt; copy, std::function&lt; void(void *)&gt; destroy)</argsstring>
        <name>Scalar_datatype</name>
        <param>
          <type><ref refid="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7" kindref="member">Scalar_kind</ref></type>
          <declname>kind</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>align</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dense_size</declname>
        </param>
        <param>
          <type>std::function&lt; void *(void *, const void *)&gt;</type>
          <declname>copy</declname>
        </param>
        <param>
          <type>std::function&lt; void(void *)&gt;</type>
          <declname>destroy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Scalar__datatype_1a553f70f9bdc343bc96659a31cdf19529" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7" kindref="member">Scalar_kind</ref></type>
        <definition>Scalar_kind PDI::Scalar_datatype::kind</definition>
        <argsstring>() const</argsstring>
        <name>kind</name>
        <briefdescription>
<para>Interpretation of the content. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="111" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Scalar__datatype_1a8f929d17ea26d91d1de5b17aa3654b38" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref></type>
        <definition>Datatype_template_uptr PDI::Scalar_datatype::clone</definition>
        <argsstring>() const override</argsstring>
        <name>clone</name>
        <reimplements refid="classPDI_1_1Datatype__template_1a6c6cb02f6f9bab3e9fbf8826afae677a">clone</reimplements>
        <briefdescription>
<para>Creates a new datatype as an exact copy of this one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the dense type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="113" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Scalar__datatype_1a6c851958754a3f04881f6e12b27ff019" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>Datatype_uptr PDI::Scalar_datatype::clone_type</definition>
        <argsstring>() const override</argsstring>
        <name>clone_type</name>
        <reimplements refid="classPDI_1_1Datatype_1af42770105e821dea4ca30f0992f2274c">clone_type</reimplements>
        <briefdescription>
<para>Creates a new datatype as an exact copy of this one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the dense type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="115" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Scalar__datatype_1a6cb314a53a731017de5bae2c00933761" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>Datatype_uptr PDI::Scalar_datatype::densify</definition>
        <argsstring>() const override</argsstring>
        <name>densify</name>
        <reimplements refid="classPDI_1_1Datatype_1a565e585893035b39f95520543cea49de">densify</reimplements>
        <briefdescription>
<para>Creates a new datatype as the dense copy of this one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="117" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Scalar__datatype_1afffe6f77d615f1d570607758a62722bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref></type>
        <definition>Datatype_uptr PDI::Scalar_datatype::evaluate</definition>
        <argsstring>(Context &amp;) const override</argsstring>
        <name>evaluate</name>
        <reimplements refid="classPDI_1_1Datatype__template_1a31b2c6cd579c3100c6b03bf195aa0e80">evaluate</reimplements>
        <param>
          <type><ref refid="classPDI_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Creates a new datatype by resolving the value of all metadata references. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context in which to evaluate this template </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the evaluated type that is produced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="119" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Scalar__datatype_1aa1e4967c4b564a06ee80d2d9f3499931" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool PDI::Scalar_datatype::dense</definition>
        <argsstring>() const override</argsstring>
        <name>dense</name>
        <reimplements refid="classPDI_1_1Datatype_1a15b82a52cfafc5fc1dbc21b043588693">dense</reimplements>
        <briefdescription>
<para>Indicate if the datatype is dense or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether the datatype is dense </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="121" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Scalar__datatype_1ad8883c6045742e19ee34606681e2fcd4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t PDI::Scalar_datatype::datasize</definition>
        <argsstring>() const override</argsstring>
        <name>datasize</name>
        <reimplements refid="classPDI_1_1Datatype_1aa5254560c8fd98403b2067091f93b3c9">datasize</reimplements>
        <briefdescription>
<para>Computes the data size of a type, excluding potentially unused memory from a sparse type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="123" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Scalar__datatype_1a8e0bb04f38f016e1050aae8ce95aa14d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t PDI::Scalar_datatype::buffersize</definition>
        <argsstring>() const override</argsstring>
        <name>buffersize</name>
        <reimplements refid="classPDI_1_1Datatype_1a341a15d47396f1cd9bb12e43a5cd5a40">buffersize</reimplements>
        <briefdescription>
<para>Computes the data size of a type, including potentially unused memory from a sparse type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="125" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Scalar__datatype_1a19cafc9d088635f5826f3c2cdc9246ee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t PDI::Scalar_datatype::alignment</definition>
        <argsstring>() const override</argsstring>
        <name>alignment</name>
        <reimplements refid="classPDI_1_1Datatype_1a2d1d0228dddffc6ee786d56494fde972">alignment</reimplements>
        <briefdescription>
<para>Returns the required alignment for a type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="127" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Scalar__datatype_1acf14074f0e2fdcec41b4f7cb7e3e27ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool PDI::Scalar_datatype::simple</definition>
        <argsstring>() const override</argsstring>
        <name>simple</name>
        <reimplements refid="classPDI_1_1Datatype_1ae5f85834cbae56fca2b4cf7e7fbd0df3">simple</reimplements>
        <briefdescription>
<para>Tells if data can be copied as bytes (if type is dense) and doesn't need a destroyer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if data has trivial copier and destroyer, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="129" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Scalar__datatype_1aeb69fdafffc82b7cd38edf2d8742d3d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void *</type>
        <definition>void* PDI::Scalar_datatype::data_to_dense_copy</definition>
        <argsstring>(void *to, const void *from) const override</argsstring>
        <name>data_to_dense_copy</name>
        <reimplements refid="classPDI_1_1Datatype_1a988bab02472c4dc4206b40cd093030c3">data_to_dense_copy</reimplements>
        <param>
          <type>void *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Creates a dense deep copy of data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">to</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the allocated memory to fill (dense data) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the copied data (size of buffersize) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>updated <lsquo/>to<rsquo/> pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="131" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Scalar__datatype_1aa184b8c29bc91d5a09b7713db11807d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void *</type>
        <definition>void* PDI::Scalar_datatype::data_from_dense_copy</definition>
        <argsstring>(void *to, const void *from) const override</argsstring>
        <name>data_from_dense_copy</name>
        <reimplements refid="classPDI_1_1Datatype_1a00559b1afaf47436b64a26841b486a14">data_from_dense_copy</reimplements>
        <param>
          <type>void *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Creates a sparse deep copy of dense data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">to</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the allocated memory to fill (size of buffersize) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the copied data (dense data) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>updated <lsquo/>to<rsquo/> pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="133" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Scalar__datatype_1a18fcaddec51a46921d6e4e42deee9026" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PDI::Scalar_datatype::destroy_data</definition>
        <argsstring>(void *ptr) const override</argsstring>
        <name>destroy_data</name>
        <reimplements refid="classPDI_1_1Datatype_1a73bcba3fb827468daeda6ab0a4fd92b5">destroy_data</reimplements>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Function used to delete the data behind the datatype. </para>
        </briefdescription>
        <detaileddescription>
<para>This should not deallocate the memory.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>to the data to free </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="135" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Scalar__datatype_1a5fcf657a2d7957801d45e6501a8627fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string PDI::Scalar_datatype::debug_string</definition>
        <argsstring>() const override</argsstring>
        <name>debug_string</name>
        <reimplements refid="classPDI_1_1Datatype_1aff4be6868c49816ef432098357ab5789">debug_string</reimplements>
        <briefdescription>
<para>Returns the datatype yaml representation as a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the datatype yaml representation as a string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="137" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classPDI_1_1Scalar__datatype_1ae68e0988a4d9718f3d75105235445421" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool PDI::Scalar_datatype::operator==</definition>
        <argsstring>(const Datatype &amp;) const override</argsstring>
        <name>operator==</name>
        <reimplements refid="classPDI_1_1Datatype_1a8cdf8ed0c21b40519239290171252a5b">operator==</reimplements>
        <param>
          <type>const <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Test for equality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref>'s are equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="139" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>PDI::Datatype</label>
        <link refid="classPDI_1_1Datatype"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>PDI::Datatype_template</label>
        <link refid="classPDI_1_1Datatype__template"/>
      </node>
      <node id="1">
        <label>PDI::Scalar_datatype</label>
        <link refid="classPDI_1_1Scalar__datatype"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>PDI::Datatype</label>
        <link refid="classPDI_1_1Datatype"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>PDI::Datatype_template</label>
        <link refid="classPDI_1_1Datatype__template"/>
      </node>
      <node id="1">
        <label>PDI::Scalar_datatype</label>
        <link refid="classPDI_1_1Scalar__datatype"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="61" column="1" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" bodystart="59" bodyend="119"/>
    <listofallmembers>
      <member refid="classPDI_1_1Scalar__datatype_1a19cafc9d088635f5826f3c2cdc9246ee" prot="public" virt="virtual"><scope>PDI::Scalar_datatype</scope><name>alignment</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1a8e0bb04f38f016e1050aae8ce95aa14d" prot="public" virt="virtual"><scope>PDI::Scalar_datatype</scope><name>buffersize</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1a8f929d17ea26d91d1de5b17aa3654b38" prot="public" virt="virtual"><scope>PDI::Scalar_datatype</scope><name>clone</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1a6c851958754a3f04881f6e12b27ff019" prot="public" virt="virtual"><scope>PDI::Scalar_datatype</scope><name>clone_type</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1aa184b8c29bc91d5a09b7713db11807d0" prot="public" virt="virtual"><scope>PDI::Scalar_datatype</scope><name>data_from_dense_copy</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1aeb69fdafffc82b7cd38edf2d8742d3d8" prot="public" virt="virtual"><scope>PDI::Scalar_datatype</scope><name>data_to_dense_copy</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1ad8883c6045742e19ee34606681e2fcd4" prot="public" virt="virtual"><scope>PDI::Scalar_datatype</scope><name>datasize</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1a5fcf657a2d7957801d45e6501a8627fd" prot="public" virt="virtual"><scope>PDI::Scalar_datatype</scope><name>debug_string</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1aa1e4967c4b564a06ee80d2d9f3499931" prot="public" virt="virtual"><scope>PDI::Scalar_datatype</scope><name>dense</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1a6cb314a53a731017de5bae2c00933761" prot="public" virt="virtual"><scope>PDI::Scalar_datatype</scope><name>densify</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1a18fcaddec51a46921d6e4e42deee9026" prot="public" virt="virtual"><scope>PDI::Scalar_datatype</scope><name>destroy_data</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1afffe6f77d615f1d570607758a62722bd" prot="public" virt="virtual"><scope>PDI::Scalar_datatype</scope><name>evaluate</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1a553f70f9bdc343bc96659a31cdf19529" prot="public" virt="non-virtual"><scope>PDI::Scalar_datatype</scope><name>kind</name></member>
      <member refid="classPDI_1_1Datatype__template_1aa539eee3b7312a7f1be7fd85b64b5c85" prot="public" virt="non-virtual"><scope>PDI::Scalar_datatype</scope><name>load_basic_datatypes</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1add2240fd379b86ed06bbb3c4e46f4afc" prot="private" virt="non-virtual"><scope>PDI::Scalar_datatype</scope><name>m_align</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1afb898b53351417cc770961642e3b3183" prot="private" virt="non-virtual"><scope>PDI::Scalar_datatype</scope><name>m_copy</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1a4c2a91a8e6a86ebefe8a0a165b1c5efd" prot="private" virt="non-virtual"><scope>PDI::Scalar_datatype</scope><name>m_dense_size</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1acba38b9ab4891e75f59e6b0f29832aea" prot="private" virt="non-virtual"><scope>PDI::Scalar_datatype</scope><name>m_destroy</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1a4b47e5b9783b79383e6ad99348de70ed" prot="private" virt="non-virtual"><scope>PDI::Scalar_datatype</scope><name>m_kind</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1a5596bf27bff801817e53e7c65f27bb21" prot="private" virt="non-virtual"><scope>PDI::Scalar_datatype</scope><name>m_size</name></member>
      <member refid="classPDI_1_1Datatype_1af80638919cb31c61451d0bc6220a69e3" prot="public" virt="non-virtual"><scope>PDI::Scalar_datatype</scope><name>operator!=</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1ae68e0988a4d9718f3d75105235445421" prot="public" virt="virtual"><scope>PDI::Scalar_datatype</scope><name>operator==</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1a2236114e142dc884965d2b45aae45c62" prot="public" virt="non-virtual"><scope>PDI::Scalar_datatype</scope><name>Scalar_datatype</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1a2c7b8776d6c2a1c7bad5a8a1678a1cc2" prot="public" virt="non-virtual"><scope>PDI::Scalar_datatype</scope><name>Scalar_datatype</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1a912bd5c382dbaf7b8785f2d3d2bbb0e2" prot="public" virt="non-virtual"><scope>PDI::Scalar_datatype</scope><name>Scalar_datatype</name></member>
      <member refid="classPDI_1_1Scalar__datatype_1acf14074f0e2fdcec41b4f7cb7e3e27ea" prot="public" virt="virtual"><scope>PDI::Scalar_datatype</scope><name>simple</name></member>
      <member refid="classPDI_1_1Datatype_1ad2e19537809ba143ab9130c95b237dc2" prot="public" virt="non-virtual"><scope>PDI::Scalar_datatype</scope><name>~Datatype</name></member>
      <member refid="classPDI_1_1Datatype__template_1a8722c4b873d42931d8e159abaa62ff27" prot="public" virt="virtual"><scope>PDI::Scalar_datatype</scope><name>~Datatype_template</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespace_0d15" kind="namespace" language="C++">
    <compoundname>@15</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" line="84" column="11"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespacePDI" kind="namespace" language="C++">
    <compoundname>PDI</compoundname>
    <innerclass refid="classPDI_1_1Array__datatype" prot="public">PDI::Array_datatype</innerclass>
    <innerclass refid="classPDI_1_1Context" prot="public">PDI::Context</innerclass>
    <innerclass refid="classPDI_1_1Context__proxy" prot="public">PDI::Context_proxy</innerclass>
    <innerclass refid="classPDI_1_1Data__descriptor" prot="public">PDI::Data_descriptor</innerclass>
    <innerclass refid="classPDI_1_1Datatype" prot="public">PDI::Datatype</innerclass>
    <innerclass refid="classPDI_1_1Datatype__template" prot="public">PDI::Datatype_template</innerclass>
    <innerclass refid="classPDI_1_1Error" prot="public">PDI::Error</innerclass>
    <innerclass refid="classPDI_1_1Expression" prot="public">PDI::Expression</innerclass>
    <innerclass refid="structPDI_1_1Paraconf__wrapper" prot="public">PDI::Paraconf_wrapper</innerclass>
    <innerclass refid="classPDI_1_1Plugin" prot="public">PDI::Plugin</innerclass>
    <innerclass refid="classPDI_1_1Pointer__datatype" prot="public">PDI::Pointer_datatype</innerclass>
    <innerclass refid="classPDI_1_1Record__datatype" prot="public">PDI::Record_datatype</innerclass>
    <innerclass refid="classPDI_1_1Ref__any" prot="public">PDI::Ref_any</innerclass>
    <innerclass refid="classPDI_1_1Reference__base" prot="public">PDI::Reference_base</innerclass>
    <innerclass refid="classPDI_1_1Scalar__datatype" prot="public">PDI::Scalar_datatype</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>Scalar_kind</name>
        <enumvalue id="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7a696b031073e74bf2cb98e5ef201d4aa3" prot="public">
          <name>UNKNOWN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7a6898b46a1cde8a1572e2722c44c5ab07" prot="public">
          <name>SIGNED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7aaf36b47f395cd01f48b8fc1013665054" prot="public">
          <name>UNSIGNED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7ae738c26bf4ce1037fa81b039a915cbf6" prot="public">
          <name>FLOAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Different possible interpretations for a scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h" line="89" column="23" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h" bodystart="89" bodyend="94"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacePDI_1a90938550644cca0d8f3b8473267c3524" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="classPDI_1_1Datatype__template" kindref="compound">Datatype_template</ref> &gt;</type>
        <definition>typedef std::unique_ptr&lt;Datatype_template&gt; PDI::Datatype_template_uptr</definition>
        <argsstring/>
        <name>Datatype_template_uptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h" line="60" column="25" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref> &gt;</type>
        <definition>typedef std::unique_ptr&lt;Datatype&gt; PDI::Datatype_uptr</definition>
        <argsstring/>
        <name>Datatype_uptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h" line="62" column="25" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacePDI_1a9c906943ee4d374699c804e1d94facd2" prot="public" static="no">
        <type>std::shared_ptr&lt; spdlog::logger &gt;</type>
        <definition>typedef std::shared_ptr&lt;spdlog::logger&gt; PDI::Logger_sptr</definition>
        <argsstring/>
        <name>Logger_sptr</name>
        <briefdescription>
<para>A shared pointer to a logger instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h" line="71" column="25" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacePDI_1adc363df268e6e68e68947a4fc799ca00" prot="public" static="no">
        <type><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref>&lt; false, false &gt;</type>
        <definition>typedef Ref_any&lt;false, false&gt; PDI::Ref</definition>
        <argsstring/>
        <name>Ref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h" line="79" column="17" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacePDI_1a7d5272dcf2920dfbe084e779e942b2e3" prot="public" static="no">
        <type><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref>&lt; true, false &gt;</type>
        <definition>typedef Ref_any&lt;true, false&gt; PDI::Ref_r</definition>
        <argsstring/>
        <name>Ref_r</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h" line="81" column="17" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacePDI_1a2fc7c8ee4f0e355a07b1306858598907" prot="public" static="no">
        <type><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref>&lt; false, true &gt;</type>
        <definition>typedef Ref_any&lt;false, true&gt; PDI::Ref_w</definition>
        <argsstring/>
        <name>Ref_w</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h" line="83" column="17" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacePDI_1a05ccfa4dec93f965d88b20106f99f49a" prot="public" static="no">
        <type><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref>&lt; true, true &gt;</type>
        <definition>typedef Ref_any&lt;true, true&gt; PDI::Ref_rw</definition>
        <argsstring/>
        <name>Ref_rw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h" line="85" column="17" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacePDI_1abb344c7480f77937ef5176d6cabcaf05" prot="public" static="no" mutable="no">
        <type>const <ref refid="classPDI_1_1Scalar__datatype" kindref="compound">Scalar_datatype</ref></type>
        <definition>const Scalar_datatype PDI::UNDEF_TYPE</definition>
        <argsstring/>
        <name>UNDEF_TYPE</name>
        <initializer>= {<ref refid="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7a696b031073e74bf2cb98e5ef201d4aa3" kindref="member">Scalar_kind::UNKNOWN</ref>, 0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" line="121" column="23" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacePDI_1a42e9ee1648fdf7f23e961974261fc480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacePDI_1a9c906943ee4d374699c804e1d94facd2" kindref="member">Logger_sptr</ref></type>
        <definition>Logger_sptr PDI::configure_logger</definition>
        <argsstring>(PC_tree_t config, const std::string &amp;name)</argsstring>
        <name>configure_logger</name>
        <param>
          <type>PC_tree_t</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Reads configuration tree and sets up the logger. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>configuration tree from config file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the module (e.g. global, test, decl_hdf5) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a configured logger </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/logger.h" line="64" column="14" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/logger.h" declline="64" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacePDI_1a00f2173a7fb0dc37655e9e39756e135e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PDI::len</definition>
        <argsstring>(PC_tree_t tree)</argsstring>
        <name>len</name>
        <param>
          <type>PC_tree_t</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
<para>Returns the length of a node. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>for a sequence: the number of nodes,</para>
</listitem><listitem><para>for a mapping: the number of pairs,</para>
</listitem><listitem><para>for a scalar: the string length.</para>
</listitem></itemizedlist>
</para>
<para>throws an <ref refid="classPDI_1_1Error" kindref="compound">Error</ref> if the provided tree is in error</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the sequence or mapping </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the length </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="67" column="6" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" declline="67" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacePDI_1a4949718a339424b6e519b8d08a046ec2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PDI::len</definition>
        <argsstring>(PC_tree_t tree, int dflt)</argsstring>
        <name>len</name>
        <param>
          <type>PC_tree_t</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dflt</declname>
        </param>
        <briefdescription>
<para>Returns the length of a node. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>for a sequence: the number of nodes,</para>
</listitem><listitem><para>for a mapping: the number of pairs,</para>
</listitem><listitem><para>for a scalar: the string length.</para>
</listitem></itemizedlist>
</para>
<para>returns the default value in case of error</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the sequence or mapping </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dflt</parametername>
</parameternamelist>
<parameterdescription>
<para>the default value in case of error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the length </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="81" column="6" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" declline="81" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacePDI_1ac4e2b53893618edfb9bff90c65c4ee01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long PDI::to_long</definition>
        <argsstring>(PC_tree_t tree)</argsstring>
        <name>to_long</name>
        <param>
          <type>PC_tree_t</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
<para>Returns the int value of a scalar node. </para>
        </briefdescription>
        <detaileddescription>
<para>throws an <ref refid="classPDI_1_1Error" kindref="compound">Error</ref> if the provided tree is in error</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the int-valued node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the int value of the scalar node </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="90" column="7" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" declline="90" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacePDI_1af366e49132c7a7111ead85b387d5b189" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long PDI::to_long</definition>
        <argsstring>(PC_tree_t tree, long dflt)</argsstring>
        <name>to_long</name>
        <param>
          <type>PC_tree_t</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>long</type>
          <declname>dflt</declname>
        </param>
        <briefdescription>
<para>Returns the int value of a scalar node. </para>
        </briefdescription>
        <detaileddescription>
<para>returns the default value in case of error</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the int-valued node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dflt</parametername>
</parameternamelist>
<parameterdescription>
<para>the default value in case of error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the int value of the scalar node </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="100" column="7" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" declline="100" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacePDI_1a9cd51216ced09ea3b6c63b86f8f5950c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double PDI::to_double</definition>
        <argsstring>(PC_tree_t tree)</argsstring>
        <name>to_double</name>
        <param>
          <type>PC_tree_t</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
<para>Returns the floating point value of a scalar node. </para>
        </briefdescription>
        <detaileddescription>
<para>throws an <ref refid="classPDI_1_1Error" kindref="compound">Error</ref> if the provided tree is in error</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the floating-point-valued node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the floating point value of the scalar node </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="109" column="9" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" declline="109" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacePDI_1a4dcf7f28922b295352da6b10d9371cdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double PDI::to_double</definition>
        <argsstring>(PC_tree_t tree, double dflt)</argsstring>
        <name>to_double</name>
        <param>
          <type>PC_tree_t</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dflt</declname>
        </param>
        <briefdescription>
<para>Returns the floating point value of a scalar node. </para>
        </briefdescription>
        <detaileddescription>
<para>returns the default value in case of error</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the floating-point-valued node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dflt</parametername>
</parameternamelist>
<parameterdescription>
<para>the default value in case of error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the floating point value of the scalar node </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="119" column="9" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" declline="119" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacePDI_1ae1a842c5cdb57b5185c035de9a99c3c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string PDI::to_string</definition>
        <argsstring>(PC_tree_t tree)</argsstring>
        <name>to_string</name>
        <param>
          <type>PC_tree_t</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
<para>Returns the string content of a scalar node. </para>
        </briefdescription>
        <detaileddescription>
<para>throws an <ref refid="classPDI_1_1Error" kindref="compound">Error</ref> if the provided tree is in error</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the content of the scalar node </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="128" column="14" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" declline="128" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacePDI_1a1faca68188c4c830f4d5cf374034bbe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string PDI::to_string</definition>
        <argsstring>(PC_tree_t tree, const std::string &amp;dflt)</argsstring>
        <name>to_string</name>
        <param>
          <type>PC_tree_t</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dflt</declname>
        </param>
        <briefdescription>
<para>Returns the string content of a scalar node. </para>
        </briefdescription>
        <detaileddescription>
<para>returns the default value in case of error</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dflt</parametername>
</parameternamelist>
<parameterdescription>
<para>the default value in case of error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the content of the scalar node </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="138" column="14" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" declline="138" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacePDI_1a120efc71a80014361117d6a3f6822a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PDI::to_bool</definition>
        <argsstring>(PC_tree_t tree)</argsstring>
        <name>to_bool</name>
        <param>
          <type>PC_tree_t</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
<para>Returns the boolean value of a scalar node. </para>
        </briefdescription>
        <detaileddescription>
<para>throws an <ref refid="classPDI_1_1Error" kindref="compound">Error</ref> if the provided tree is in error</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the boolean value of the scalar node </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="147" column="7" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" declline="147" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacePDI_1aa688c9ec982e85d785aee1d8115514d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PDI::to_bool</definition>
        <argsstring>(PC_tree_t tree, bool dflt)</argsstring>
        <name>to_bool</name>
        <param>
          <type>PC_tree_t</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dflt</declname>
        </param>
        <briefdescription>
<para>Returns the boolean value of a scalar node. </para>
        </briefdescription>
        <detaileddescription>
<para>returns the default value in case of error</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dflt</parametername>
</parameternamelist>
<parameterdescription>
<para>the default value in case of error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the boolean value of the scalar node </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="157" column="7" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" declline="157" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacePDI_1a06633db186ab479dbb26d5933a6a43bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PDI::is_list</definition>
        <argsstring>(PC_tree_t tree)</argsstring>
        <name>is_list</name>
        <param>
          <type>PC_tree_t</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
<para>Checks if the tree is a list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if tree is a list, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="165" column="7" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" declline="165" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacePDI_1a86fb4c3a71e29599a21350e00cbba655" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PDI::is_map</definition>
        <argsstring>(PC_tree_t tree)</argsstring>
        <name>is_map</name>
        <param>
          <type>PC_tree_t</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
<para>Checks if the tree is a map. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if tree is a map, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="172" column="7" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" declline="172" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacePDI_1ad14a52d54a9db1a67744827fb1d1eaa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PDI::is_scalar</definition>
        <argsstring>(PC_tree_t tree)</argsstring>
        <name>is_scalar</name>
        <param>
          <type>PC_tree_t</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
<para>Checks if the tree is a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if tree is a scalar, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="179" column="7" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" declline="179" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacePDI_1aa497f0078e25af462c413eafea53a138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PDI::each</definition>
        <argsstring>(PC_tree_t tree, std::function&lt; void(PC_tree_t)&gt; operation)</argsstring>
        <name>each</name>
        <param>
          <type>PC_tree_t</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>std::function&lt; void(PC_tree_t)&gt;</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Iterates and apply the provided function to all elements of a PC list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the tree containing the list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation</parametername>
</parameternamelist>
<parameterdescription>
<para>the operation to apply to each element of the tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="186" column="7" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" declline="186" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacePDI_1a52a22706f3987319f51859ce8319c074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PDI::opt_each</definition>
        <argsstring>(PC_tree_t tree, std::function&lt; void(PC_tree_t)&gt; operation)</argsstring>
        <name>opt_each</name>
        <param>
          <type>PC_tree_t</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>std::function&lt; void(PC_tree_t)&gt;</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Iterates and apply the provided function to all elements of a PC list or directly to the provided element if it is not a list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the tree containing the list or the single element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation</parametername>
</parameternamelist>
<parameterdescription>
<para>the operation to apply to the elements </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="194" column="7" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" declline="194" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacePDI_1a4ccde59299bca1abcd53672d0d43c0e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PDI::each</definition>
        <argsstring>(PC_tree_t tree, std::function&lt; void(PC_tree_t, PC_tree_t)&gt; operation)</argsstring>
        <name>each</name>
        <param>
          <type>PC_tree_t</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>std::function&lt; void(PC_tree_t, PC_tree_t)&gt;</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Iterates and apply the provided function to all elements of a PC mapping. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>the tree containing the mapping </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation</parametername>
</parameternamelist>
<parameterdescription>
<para>the operation to apply to each element of the tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" line="201" column="7" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h" declline="201" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacePDI_1a597784fcd3cb355d817d3d4e28dd3ce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long PDI::plugin_api_version</definition>
        <argsstring>(unsigned long expected_version=0)</argsstring>
        <name>plugin_api_version</name>
        <param>
          <type>unsigned long</type>
          <declname>expected_version</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Checks compatibility with a plugin API. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expected_version</parametername>
</parameternamelist>
<parameterdescription>
<para>the expected version of the API or 0 for no check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the version of the API provided by <ref refid="namespacePDI" kindref="compound">PDI</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classPDI_1_1Error" kindref="compound">PDI::Error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the provided version is incompatible with the expected one </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" line="102" column="16" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" declline="102" declcolumn="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h" line="33" column="13"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespacePDI_1_1_0d18" kind="namespace" language="C++">
    <compoundname>PDI::@18</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h" line="63" column="11"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespacespdlog" kind="namespace" language="C++">
    <compoundname>spdlog</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h" line="37" column="16"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespacestd" kind="namespace" language="C++">
    <compoundname>std</compoundname>
    <innerclass refid="classstd_1_1allocator" prot="public">std::allocator</innerclass>
    <innerclass refid="classstd_1_1array" prot="public">std::array</innerclass>
    <innerclass refid="classstd_1_1atomic" prot="public">std::atomic</innerclass>
    <innerclass refid="classstd_1_1atomic__ref" prot="public">std::atomic_ref</innerclass>
    <innerclass refid="classstd_1_1auto__ptr" prot="public">std::auto_ptr</innerclass>
    <innerclass refid="classstd_1_1bad__alloc" prot="public">std::bad_alloc</innerclass>
    <innerclass refid="classstd_1_1bad__cast" prot="public">std::bad_cast</innerclass>
    <innerclass refid="classstd_1_1bad__exception" prot="public">std::bad_exception</innerclass>
    <innerclass refid="classstd_1_1bad__typeid" prot="public">std::bad_typeid</innerclass>
    <innerclass refid="classstd_1_1basic__fstream" prot="public">std::basic_fstream</innerclass>
    <innerclass refid="classstd_1_1basic__ifstream" prot="public">std::basic_ifstream</innerclass>
    <innerclass refid="classstd_1_1basic__ios" prot="public">std::basic_ios</innerclass>
    <innerclass refid="classstd_1_1basic__iostream" prot="public">std::basic_iostream</innerclass>
    <innerclass refid="classstd_1_1basic__istream" prot="public">std::basic_istream</innerclass>
    <innerclass refid="classstd_1_1basic__istringstream" prot="public">std::basic_istringstream</innerclass>
    <innerclass refid="classstd_1_1basic__ofstream" prot="public">std::basic_ofstream</innerclass>
    <innerclass refid="classstd_1_1basic__ostream" prot="public">std::basic_ostream</innerclass>
    <innerclass refid="classstd_1_1basic__ostringstream" prot="public">std::basic_ostringstream</innerclass>
    <innerclass refid="classstd_1_1basic__string" prot="public">std::basic_string</innerclass>
    <innerclass refid="classstd_1_1basic__string__view" prot="public">std::basic_string_view</innerclass>
    <innerclass refid="classstd_1_1basic__stringstream" prot="public">std::basic_stringstream</innerclass>
    <innerclass refid="classstd_1_1bitset" prot="public">std::bitset</innerclass>
    <innerclass refid="classstd_1_1complex" prot="public">std::complex</innerclass>
    <innerclass refid="classstd_1_1deque" prot="public">std::deque</innerclass>
    <innerclass refid="classstd_1_1domain__error" prot="public">std::domain_error</innerclass>
    <innerclass refid="classstd_1_1error__category" prot="public">std::error_category</innerclass>
    <innerclass refid="classstd_1_1error__code" prot="public">std::error_code</innerclass>
    <innerclass refid="classstd_1_1error__condition" prot="public">std::error_condition</innerclass>
    <innerclass refid="classstd_1_1exception" prot="public">std::exception</innerclass>
    <innerclass refid="classstd_1_1forward__list" prot="public">std::forward_list</innerclass>
    <innerclass refid="classstd_1_1fstream" prot="public">std::fstream</innerclass>
    <innerclass refid="structstd_1_1hash_3_01PDI_1_1Ref__any_3_01R_00_01W_01_4_01_4" prot="public">std::hash&lt; PDI::Ref_any&lt; R, W &gt; &gt;</innerclass>
    <innerclass refid="classstd_1_1ifstream" prot="public">std::ifstream</innerclass>
    <innerclass refid="classstd_1_1invalid__argument" prot="public">std::invalid_argument</innerclass>
    <innerclass refid="classstd_1_1ios" prot="public">std::ios</innerclass>
    <innerclass refid="classstd_1_1ios__base" prot="public">std::ios_base</innerclass>
    <innerclass refid="classstd_1_1istream" prot="public">std::istream</innerclass>
    <innerclass refid="classstd_1_1istringstream" prot="public">std::istringstream</innerclass>
    <innerclass refid="classstd_1_1jthread" prot="public">std::jthread</innerclass>
    <innerclass refid="classstd_1_1length__error" prot="public">std::length_error</innerclass>
    <innerclass refid="classstd_1_1list" prot="public">std::list</innerclass>
    <innerclass refid="classstd_1_1lock__guard" prot="public">std::lock_guard</innerclass>
    <innerclass refid="classstd_1_1logic__error" prot="public">std::logic_error</innerclass>
    <innerclass refid="classstd_1_1map" prot="public">std::map</innerclass>
    <innerclass refid="classstd_1_1multimap" prot="public">std::multimap</innerclass>
    <innerclass refid="classstd_1_1multiset" prot="public">std::multiset</innerclass>
    <innerclass refid="classstd_1_1mutex" prot="public">std::mutex</innerclass>
    <innerclass refid="classstd_1_1ofstream" prot="public">std::ofstream</innerclass>
    <innerclass refid="classstd_1_1ostream" prot="public">std::ostream</innerclass>
    <innerclass refid="classstd_1_1ostringstream" prot="public">std::ostringstream</innerclass>
    <innerclass refid="classstd_1_1out__of__range" prot="public">std::out_of_range</innerclass>
    <innerclass refid="classstd_1_1overflow__error" prot="public">std::overflow_error</innerclass>
    <innerclass refid="classstd_1_1priority__queue" prot="public">std::priority_queue</innerclass>
    <innerclass refid="classstd_1_1queue" prot="public">std::queue</innerclass>
    <innerclass refid="classstd_1_1range__error" prot="public">std::range_error</innerclass>
    <innerclass refid="classstd_1_1recursive__mutex" prot="public">std::recursive_mutex</innerclass>
    <innerclass refid="classstd_1_1recursive__timed__mutex" prot="public">std::recursive_timed_mutex</innerclass>
    <innerclass refid="classstd_1_1runtime__error" prot="public">std::runtime_error</innerclass>
    <innerclass refid="classstd_1_1set" prot="public">std::set</innerclass>
    <innerclass refid="classstd_1_1shared__lock" prot="public">std::shared_lock</innerclass>
    <innerclass refid="classstd_1_1shared__mutex" prot="public">std::shared_mutex</innerclass>
    <innerclass refid="classstd_1_1shared__ptr" prot="public">std::shared_ptr</innerclass>
    <innerclass refid="classstd_1_1shared__timed__mutex" prot="public">std::shared_timed_mutex</innerclass>
    <innerclass refid="classstd_1_1smart__ptr" prot="public">std::smart_ptr</innerclass>
    <innerclass refid="classstd_1_1span" prot="public">std::span</innerclass>
    <innerclass refid="classstd_1_1stack" prot="public">std::stack</innerclass>
    <innerclass refid="classstd_1_1string" prot="public">std::string</innerclass>
    <innerclass refid="classstd_1_1string__view" prot="public">std::string_view</innerclass>
    <innerclass refid="classstd_1_1stringstream" prot="public">std::stringstream</innerclass>
    <innerclass refid="classstd_1_1system__error" prot="public">std::system_error</innerclass>
    <innerclass refid="classstd_1_1thread" prot="public">std::thread</innerclass>
    <innerclass refid="classstd_1_1timed__mutex" prot="public">std::timed_mutex</innerclass>
    <innerclass refid="classstd_1_1u16string" prot="public">std::u16string</innerclass>
    <innerclass refid="classstd_1_1u16string__view" prot="public">std::u16string_view</innerclass>
    <innerclass refid="classstd_1_1u32string" prot="public">std::u32string</innerclass>
    <innerclass refid="classstd_1_1u32string__view" prot="public">std::u32string_view</innerclass>
    <innerclass refid="classstd_1_1u8string" prot="public">std::u8string</innerclass>
    <innerclass refid="classstd_1_1u8string__view" prot="public">std::u8string_view</innerclass>
    <innerclass refid="classstd_1_1underflow__error" prot="public">std::underflow_error</innerclass>
    <innerclass refid="classstd_1_1unique__lock" prot="public">std::unique_lock</innerclass>
    <innerclass refid="classstd_1_1unique__ptr" prot="public">std::unique_ptr</innerclass>
    <innerclass refid="classstd_1_1unordered__map" prot="public">std::unordered_map</innerclass>
    <innerclass refid="classstd_1_1unordered__multimap" prot="public">std::unordered_multimap</innerclass>
    <innerclass refid="classstd_1_1unordered__multiset" prot="public">std::unordered_multiset</innerclass>
    <innerclass refid="classstd_1_1unordered__set" prot="public">std::unordered_set</innerclass>
    <innerclass refid="classstd_1_1valarray" prot="public">std::valarray</innerclass>
    <innerclass refid="classstd_1_1vector" prot="public">std::vector</innerclass>
    <innerclass refid="classstd_1_1weak__ptr" prot="public">std::weak_ptr</innerclass>
    <innerclass refid="classstd_1_1wfstream" prot="public">std::wfstream</innerclass>
    <innerclass refid="classstd_1_1wifstream" prot="public">std::wifstream</innerclass>
    <innerclass refid="classstd_1_1wios" prot="public">std::wios</innerclass>
    <innerclass refid="classstd_1_1wistream" prot="public">std::wistream</innerclass>
    <innerclass refid="classstd_1_1wistringstream" prot="public">std::wistringstream</innerclass>
    <innerclass refid="classstd_1_1wofstream" prot="public">std::wofstream</innerclass>
    <innerclass refid="classstd_1_1wostream" prot="public">std::wostream</innerclass>
    <innerclass refid="classstd_1_1wostringstream" prot="public">std::wostringstream</innerclass>
    <innerclass refid="classstd_1_1wstring" prot="public">std::wstring</innerclass>
    <innerclass refid="classstd_1_1wstring__view" prot="public">std::wstring_view</innerclass>
    <innerclass refid="classstd_1_1wstringstream" prot="public">std::wstringstream</innerclass>
    <briefdescription>
<para>STL namespace. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="[STL]" line="1" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="About_8md" kind="file" language="Markdown">
    <compoundname>About.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">\mainpage<sp/>About</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">%PDI<sp/>supports<sp/>[loose<sp/>coupling](https://en.wikipedia.org/wiki/Loose_coupling)<sp/>of</highlight></codeline>
<codeline><highlight class="normal">simulation<sp/>codes<sp/>with<sp/>libraries:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>simulation<sp/>code<sp/>is<sp/>annotated<sp/>in<sp/>a<sp/>library-agnostic<sp/>way,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>libraries<sp/>are<sp/>used<sp/>from<sp/>the<sp/>\ref<sp/>Specification_tree<sp/>"specification<sp/>tree".</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">This<sp/>approach<sp/>works<sp/>well<sp/>for<sp/>a<sp/>number<sp/>of<sp/>concerns<sp/>including:<sp/>parameters<sp/>reading,<sp/>data</highlight></codeline>
<codeline><highlight class="normal">initialization,<sp/>post-processing,<sp/>result<sp/>storage<sp/>to<sp/>disk,<sp/>visualization,<sp/>fault</highlight></codeline>
<codeline><highlight class="normal">tolerance,<sp/>logging,<sp/><sp/>inclusion<sp/>as<sp/>part<sp/>of<sp/>code-coupling,<sp/>inclusion<sp/>as<sp/>part<sp/>of<sp/>an</highlight></codeline>
<codeline><highlight class="normal">ensemble<sp/>run,<sp/>etc.</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">#<sp/>User<sp/>documentation</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">1.<sp/>\subpage<sp/>Installation<sp/>"Installation"</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>\subpage<sp/>Concepts<sp/>"Core<sp/>concepts"</highlight></codeline>
<codeline><highlight class="normal">3.<sp/>\subpage<sp/>First_steps<sp/>"First<sp/>steps"</highlight></codeline>
<codeline><highlight class="normal">4.<sp/>\ref<sp/>Hands_on<sp/>"Tutorial"</highlight></codeline>
<codeline><highlight class="normal">5.<sp/>\subpage<sp/>PDI_example<sp/>"PDI<sp/>example"</highlight></codeline>
<codeline><highlight class="normal">6.<sp/>[C<sp/>API<sp/>reference](modules.html)</highlight></codeline>
<codeline><highlight class="normal">7.<sp/>\subpage<sp/>Specification_tree_ref<sp/>"Specification<sp/>tree<sp/>reference"</highlight></codeline>
<codeline><highlight class="normal">8.<sp/>\subpage<sp/>Plugins<sp/>"List<sp/>of<sp/>PDI<sp/>plugins"</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">#<sp/>Developer<sp/>documentation</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">1.<sp/>\subpage<sp/>how_to_create_plugin<sp/>"Plugin<sp/>creation<sp/>tutorial"</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>\subpage<sp/>PDI<sp/>"API<sp/>for<sp/>plugin<sp/>developers"</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">#<sp/>Get<sp/>support</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">If<sp/>you<sp/>have<sp/>any<sp/>problem<sp/>with<sp/>installation,<sp/>running<sp/>or<sp/>understanding<sp/>PDI,</highlight></codeline>
<codeline><highlight class="normal">please<sp/>contact<sp/>us<sp/>on<sp/>our<sp/>[**Slack<sp/>channel**<sp/>https://bit.ly/2OPmhA9](https://join.slack.com/t/pdidev/shared_invite/enQtNDk5OTY2MDA0Nzg0LTlkM2U1MGQwZmM3OGM1MjA0M2VlMzUyNWNjODhkNmI4MjMwZmQxMTM1ODc2ODI4MjY4ODNmNDhmY2QzOWI4Nzk).</highlight></codeline>
<codeline><highlight class="normal">We<sp/>will<sp/>be<sp/>happy<sp/>to<sp/>help<sp/>(<sp/>ဖ‿ဖ)人(စ‿စ<sp/>)</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">#<sp/>Join<sp/>the<sp/>team</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">You<sp/>can<sp/>work<sp/>with<sp/>us<sp/>to<sp/>make<sp/>a<sp/>better<sp/>%PDI:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>3-years<sp/>engineer<sp/>position:<sp/>["Improvement<sp/>and<sp/>integration<sp/>of<sp/>the<sp/>PDI<sp/>library<sp/>for<sp/>High-performance<sp/>code<sp/>coupling"](http://www.maisondelasimulation.fr/en/emploi/3-years-engineer-position-improvement-and-integration-of-the-pdi-library-for-high-performance-code-coupling-2/),</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>2-years<sp/>post-doc<sp/>position:<sp/>["Data-driven<sp/>code-coupling<sp/>at<sp/>Exascale"](http://www.maisondelasimulation.fr/en/emploi/2-years-post-doc-position-data-driven-code-coupling-at-exascale-2/),</highlight></codeline>
<codeline><highlight class="normal">*<sp/>and<sp/>we<sp/>are<sp/>always<sp/>looking<sp/>for<sp/>people<sp/>interested<sp/>in<sp/>an<sp/>internship,<sp/>[drop<sp/>an<sp/>email<sp/>if<sp/>you<sp/>are<sp/>insterested](mailto:julien.bigot@cea.fr).</highlight></codeline>
    </programlisting>
    <location file="About.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="array__datatype_8h" kind="file" language="C++">
    <compoundname>array_datatype.h</compoundname>
    <includes local="no">string</includes>
    <includes refid="pdi__fwd_8h" local="no">pdi/pdi_fwd.h</includes>
    <includes refid="datatype_8h" local="no">pdi/datatype.h</includes>
    <incdepgraph>
      <node id="8">
        <label>pdi/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="7">
        <label>pdi/export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="1">
        <label>array_datatype.h</label>
        <link refid="array__datatype_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>pdi/pdi_fwd.h</label>
        <link refid="pdi__fwd_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>paraconf.h</label>
      </node>
      <node id="10">
        <label>pdi/datatype_template.h</label>
        <link refid="datatype__template_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>pdi.h</label>
        <link refid="pdi_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>pdi/datatype.h</label>
        <link refid="datatype_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="classPDI_1_1Array__datatype" prot="public">PDI::Array_datatype</innerclass>
    <innernamespace refid="namespacePDI">PDI</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2015-2019<sp/>Commissariat<sp/>a<sp/>l'energie<sp/>atomique<sp/>et<sp/>aux<sp/>energies<sp/>alternatives<sp/>(CEA)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>CEA<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>"AS<sp/>IS",<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"/></codeline>
<codeline lineno="24"><highlight class="normal"/></codeline>
<codeline lineno="25"><highlight class="normal"/><highlight class="preprocessor">#ifndef<sp/>PDI_ARRAY_DATATYPE_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="26"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_ARRAY_DATATYPE_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="27"><highlight class="normal"/></codeline>
<codeline lineno="28"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="29"><highlight class="normal"/></codeline>
<codeline lineno="30"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/pdi_fwd.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="31"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/datatype.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="32"><highlight class="normal"/></codeline>
<codeline lineno="33" refid="namespacePDI" refkind="compound"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacePDI" kindref="compound">PDI</ref><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"/></codeline>
<codeline lineno="39"><highlight class="keyword">class<sp/></highlight><highlight class="normal">PDI_EXPORT<sp/><ref refid="classPDI_1_1Array__datatype" kindref="compound">Array_datatype</ref>:</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref></highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>m_subtype;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_size;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_start;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_subsize;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"/><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Array__datatype" kindref="compound">Array_datatype</ref>(<ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>subtype,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>subsize);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Array__datatype" kindref="compound">Array_datatype</ref>(<ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>subtype,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref>&amp;<sp/>subtype()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>subsize()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref><sp/>clone()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>clone_type()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>densify()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>evaluate(<ref refid="classPDI_1_1Context" kindref="compound">Context</ref>&amp;)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dense()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>datasize()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffersize()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alignment()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>simple()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data_to_dense_copy(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data_from_dense_copy(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy_data(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>debug_string()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref>&amp;)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal">};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"/></codeline>
<codeline lineno="124"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>PDI</highlight><highlight class="normal"/></codeline>
<codeline lineno="125"><highlight class="normal"/></codeline>
<codeline lineno="126"><highlight class="normal"/><highlight class="preprocessor">#endif<sp/>//<sp/>PDI_ARRAY_DATATYPE_H_</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/array_datatype.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Concepts_8md" kind="file" language="Markdown">
    <compoundname>Concepts.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">\page<sp/>Concepts<sp/>Core<sp/>Concepts</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>pdi_philosophy<sp/>Philosophy<sp/>of<sp/>PDI<sp/></highlight></codeline>
<codeline><highlight class="normal">Similarly<sp/>to<sp/>aspect-oriented<sp/>programming,<sp/>PDI<sp/>distinguishes<sp/>between<sp/>core<sp/>concerns<sp/>and<sp/>cross-cutting<sp/>concerns.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Core<sp/>concerns<sp/>are<sp/>the<sp/>aspects<sp/>of<sp/>the<sp/>code<sp/>that<sp/>fulfill<sp/>its<sp/>main<sp/>goal.<sp/>We<sp/>consider<sp/>as<sp/>core<sp/>concerns<sp/>of<sp/>a<sp/>simulation<sp/>code<sp/>the<sp/>aspects<sp/>handled<sp/>in<sp/>the<sp/>main<sp/>loop<sp/>that<sp/>generate<sp/>elements<sp/>needed<sp/>as<sp/>input<sp/>of<sp/>the<sp/>next<sp/>iteration<sp/>of<sp/>the<sp/>loop.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Cross-cutting<sp/>concerns<sp/>are<sp/>the<sp/>aspect<sp/>of<sp/>the<sp/>code<sp/>that<sp/>are<sp/>not<sp/>core<sp/>concerns.<sp/>We<sp/>consider<sp/>as<sp/>cross-cutting<sp/>concerns<sp/>of<sp/>a<sp/>simulation<sp/>code:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">the<sp/>aspects<sp/>handled<sp/>before<sp/>the<sp/>simulation<sp/>main<sp/>loop<sp/>such<sp/>as<sp/>parameters<sp/>reading,<sp/>data<sp/>initialization,<sp/>etc,</highlight></codeline>
<codeline><highlight class="normal">the<sp/>aspects<sp/>handled<sp/>after<sp/>the<sp/>simulation<sp/>main<sp/>loop,<sp/>such<sp/>as<sp/>result<sp/>post-processing,<sp/>storage<sp/>to<sp/>disk,<sp/>visualization,<sp/>etc,</highlight></codeline>
<codeline><highlight class="normal">the<sp/>aspects<sp/>handled<sp/>during<sp/>the<sp/>simulation<sp/>main<sp/>loop,<sp/>but<sp/>whose<sp/>execution<sp/>is<sp/>not<sp/>required<sp/>for<sp/>the<sp/>next<sp/>iteration<sp/>of<sp/>the<sp/>loop,<sp/>such<sp/>as<sp/>fault<sp/>tolerance,<sp/>logging,<sp/>etc.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>simulation<sp/>could<sp/>run<sp/>with<sp/>none<sp/>of<sp/>the<sp/>cross-cutting<sp/>concerns<sp/>implemented<sp/>(even<sp/>if<sp/>this<sp/>would<sp/>be<sp/>completely<sp/>useless<sp/>with<sp/>no<sp/>result<sp/>ever<sp/>saved).<sp/>The<sp/>deactivation<sp/>of<sp/>a<sp/>core<sp/>concern<sp/>on<sp/>the<sp/>other<sp/>hand<sp/>would<sp/>lead<sp/>to<sp/>a<sp/>failure<sp/>of<sp/>the<sp/>simulation.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">PDI<sp/>supports<sp/>calling<sp/>libraries<sp/>from<sp/>the<sp/>specification<sp/>tree<sp/>instead<sp/>of<sp/>from<sp/>the<sp/>code.<sp/>This<sp/>is<sp/>well<sp/>suited<sp/>for<sp/>cross-cutting<sp/>concerns<sp/>but<sp/>means<sp/>that<sp/>the<sp/>code<sp/>has<sp/>no<sp/>control<sp/>over<sp/>what<sp/>and<sp/>how<sp/>these<sp/>aspects<sp/>are<sp/>handled<sp/>which<sp/>does<sp/>not<sp/>fit<sp/>the<sp/>needs<sp/>of<sp/>core<sp/>concerns.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>PDI_description<sp/>PDI<sp/>description</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">%PDI<sp/>offers<sp/>to<sp/>exchange<sp/>data<sp/>between<sp/>the<sp/>application<sp/>code<sp/>and<sp/>various<sp/>external<sp/>data</highlight></codeline>
<codeline><highlight class="normal">handlers,<sp/>such<sp/>as<sp/>for<sp/>example<sp/>the<sp/>file-system<sp/>for<sp/>I/O<sp/>or<sp/>another<sp/>code<sp/>for</highlight></codeline>
<codeline><highlight class="normal">code-coupling.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Before<sp/>using<sp/>%PDI,<sp/>it<sp/>is<sp/>however<sp/>a<sp/>good<sp/>idea<sp/>to<sp/>understand<sp/>the<sp/>three<sp/>core<sp/>concepts</highlight></codeline>
<codeline><highlight class="normal">that<sp/>make<sp/>this<sp/>possible.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Each<sp/>data<sp/>exchange<sp/>is<sp/>a<sp/>two-step<sp/>process.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>PDI-enabled<sp/>application<sp/>makes<sp/>its<sp/>data<sp/>available<sp/>through<sp/>the</highlight></codeline>
<codeline><highlight class="normal">\ref<sp/>Data_store<sp/>"data<sp/>store".</highlight></codeline>
<codeline><highlight class="normal">The<sp/>\ref<sp/>Event_subsystem<sp/>"event<sp/>subsystem"<sp/>then<sp/>notifies<sp/>interested<sp/>external<sp/>data</highlight></codeline>
<codeline><highlight class="normal">handlers<sp/>about<sp/>this<sp/>change<sp/>in<sp/>the<sp/>store.</highlight></codeline>
<codeline><highlight class="normal">Once<sp/>notified,<sp/>each<sp/>data<sp/>handler<sp/>(implemented<sp/>as<sp/>a<sp/>plugin)<sp/>can<sp/>look<sp/>in<sp/>the<sp/>store<sp/>and</highlight></codeline>
<codeline><highlight class="normal">use<sp/>the<sp/>data<sp/>accessible<sp/>from<sp/>there.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>orchestration<sp/>of<sp/>these<sp/>exchanges,<sp/>the<sp/>description<sp/>of<sp/>what<sp/>data<sp/>can<sp/>be<sp/>put<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">store,<sp/>what<sp/>each<sp/>handler<sp/>should<sp/>do<sp/>with<sp/>it,<sp/>etc.<sp/>is<sp/>described<sp/>in<sp/>the<sp/></highlight></codeline>
<codeline><highlight class="normal">\ref<sp/>Specification_tree<sp/>"specification<sp/>tree".</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\image<sp/>html<sp/>PDI_schema.jpg<sp/>PDI<sp/>structure<sp/>schema</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>Data_store<sp/>Data<sp/>store</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>data<sp/>store<sp/>is<sp/>the<sp/>mechanism<sp/>offered<sp/>by<sp/>%PDI<sp/>to<sp/>handle<sp/>*data<sp/>transfer*<sp/>between<sp/>the</highlight></codeline>
<codeline><highlight class="normal">application<sp/>code<sp/>and<sp/>external<sp/>data<sp/>handlers.</highlight></codeline>
<codeline><highlight class="normal">Data<sp/>transfer<sp/>is<sp/>the<sp/>action<sp/>of<sp/>making<sp/>data<sp/>available<sp/>to<sp/>another<sp/>part<sp/>of<sp/>the<sp/>code.</highlight></codeline>
<codeline><highlight class="normal">For<sp/>example,<sp/>in<sp/>a<sp/>function<sp/>call<sp/>the<sp/>list<sp/>of<sp/>parameters<sp/>determines<sp/>data<sp/>transfer.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">%PDI<sp/>data<sp/>store<sp/>is<sp/>somewhat<sp/>similar<sp/>to<sp/>a<sp/>file-system<sp/>or<sp/>a<sp/>document<sp/>store<sp/>with<sp/>some</highlight></codeline>
<codeline><highlight class="normal">specific<sp/>properties:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>unlike<sp/>in<sp/>traditional<sp/>file-systems,<sp/>data<sp/>stored<sp/>in<sp/>%PDI<sp/>store<sp/>is<sp/>typed,<sp/>one<sp/>can</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>differentiate<sp/>between<sp/>a<sp/>record<sp/>with<sp/>named<sp/>members<sp/>and<sp/>an<sp/>array<sp/>for<sp/>example;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>each<sp/>process<sp/>contains<sp/>a<sp/>distinct<sp/>instance<sp/>of<sp/>the<sp/>store,<sp/>inter-process</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>communications<sp/>might<sp/>be<sp/>offered<sp/>by<sp/>data<sp/>handlers<sp/>accessing<sp/>objects<sp/>in<sp/>the<sp/>store</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>and<sp/>exchanging<sp/>them<sp/>between<sp/>process<sp/>boundaries,<sp/>but<sp/>not<sp/>by<sp/>%PDI<sp/>itself;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>storing<sp/>an<sp/>object<sp/>in<sp/>%PDI<sp/>store<sp/>is<sp/>cheap<sp/>as<sp/>it<sp/>does<sp/>not<sp/>triggers<sp/>any<sp/>copy,<sp/>instead</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>the<sp/>store<sp/>holds<sp/>a<sp/>reference<sp/>to<sp/>the<sp/>exact<sp/>same<sp/>object<sp/>in<sp/>memory<sp/>as<sp/>that<sp/>manipulated</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>by<sp/>the<sp/>code;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>to<sp/>prevent<sp/>invalid<sp/>concurrent<sp/>accesses<sp/>to<sp/>the<sp/>objects,<sp/>the<sp/>stores<sp/>offers<sp/>a<sp/>mutual</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>exclusion<sp/>mechanism<sp/>where<sp/>only<sp/>one<sp/>handler<sp/>can<sp/>access<sp/>the<sp/>object<sp/>for<sp/>write<sp/>but</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>concurrent<sp/>read<sp/>access<sp/>is<sp/>possible.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">This<sp/>approach<sp/>makes<sp/>it<sp/>possible<sp/>to<sp/>exchange<sp/>data<sp/>between<sp/>very<sp/>weakly<sp/>coupled<sp/>code</highlight></codeline>
<codeline><highlight class="normal">modules.</highlight></codeline>
<codeline><highlight class="normal">Each<sp/>module<sp/>can<sp/>add<sp/>or<sp/>access<sp/>objects<sp/>in<sp/>the<sp/>store<sp/>and<sp/>does<sp/>not<sp/>need<sp/>to<sp/>know<sp/>which<sp/></highlight></codeline>
<codeline><highlight class="normal">other<sp/>module<sp/>created<sp/>it<sp/>or<sp/>how.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">In<sp/>summary,<sp/>the<sp/>store<sp/>hold<sp/>a<sp/>set<sp/>of<sp/>object<sp/>references,<sp/>each<sp/>identified<sp/>by<sp/>a<sp/>name<sp/>and</highlight></codeline>
<codeline><highlight class="normal">that<sp/>contains:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>address<sp/>of<sp/>the<sp/>buffer<sp/>storing<sp/>the<sp/>data<sp/>(a<sp/>pointer),</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>description<sp/>of<sp/>the<sp/>type<sp/>of<sp/>the<sp/>data<sp/>(memory<sp/>layout<sp/>and<sp/>interpretation),</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>RW-lock<sp/>to<sp/>ensure<sp/>exclusive<sp/>access.</highlight></codeline>
<codeline/>
<codeline/>
<codeline/>
<codeline><highlight class="normal">\section<sp/>Event_subsystem<sp/>Event<sp/>subsystem</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">While<sp/>the<sp/>\ref<sp/>Data_store<sp/>"data<sp/>store"<sp/>handles<sp/>data<sp/>transfer<sp/>between<sp/>the<sp/>application</highlight></codeline>
<codeline><highlight class="normal">code<sp/>and<sp/>external<sp/>data<sp/>handlers,<sp/>the<sp/>event<sp/>subsystem<sp/>handles<sp/>*control*<sp/>transfer.</highlight></codeline>
<codeline><highlight class="normal">Control<sp/>transfer<sp/>is<sp/>the<sp/>action<sp/>of<sp/>passing<sp/>the<sp/>CPU<sp/>control<sp/>to<sp/>another<sp/>part<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal">code.</highlight></codeline>
<codeline><highlight class="normal">For<sp/>example,<sp/>calling<sp/>a<sp/>function<sp/>is<sp/>a<sp/>way<sp/>to<sp/>transfer<sp/>control,<sp/>creating<sp/>a<sp/>thread<sp/>is</highlight></codeline>
<codeline><highlight class="normal">another<sp/>way.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>event<sp/>subsystem<sp/>makes<sp/>it<sp/>possible<sp/>to<sp/>observe<sp/>the<sp/>store<sp/>and<sp/>to<sp/>be<sp/>notified<sp/>when<sp/>it</highlight></codeline>
<codeline><highlight class="normal">is<sp/>accessed;<sp/>thus<sp/>complementing<sp/>the<sp/>store<sp/>with<sp/>a<sp/>way<sp/>for<sp/>data<sp/>handler<sp/>to<sp/>implement</highlight></codeline>
<codeline><highlight class="normal">their<sp/>expected<sp/>behavior.</highlight></codeline>
<codeline><highlight class="normal">Notifications<sp/>are<sp/>emitted<sp/>when:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>reference<sp/>becomes<sp/>available<sp/>in<sp/>the<sp/>store,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>reference<sp/>ceases<sp/>to<sp/>be<sp/>available<sp/>in<sp/>the<sp/>store,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>someone<sp/>accesses<sp/>a<sp/>reference<sp/>that<sp/>is<sp/>not<sp/>in<sp/>the<sp/>store,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>\ref<sp/>PDI_event<sp/>"named<sp/>event"<sp/>is<sp/>emitted.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">To<sp/>ensure<sp/>minimal<sp/>overhead,<sp/>the<sp/>%PDI<sp/>event<sp/>subsystem<sp/>is<sp/>synchronous<sp/>by<sp/>default<sp/>(like</highlight></codeline>
<codeline><highlight class="normal">a<sp/>function<sp/>call).</highlight></codeline>
<codeline><highlight class="normal">Plugins<sp/>can<sp/>implement<sp/>other<sp/>behaviors<sp/>on<sp/>top<sp/>of<sp/>that.</highlight></codeline>
<codeline><highlight class="normal">For<sp/>example,<sp/>a<sp/>plugin<sp/>could<sp/>create<sp/>a<sp/>thread<sp/>for<sp/>asynchronous<sp/>execution.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">This<sp/>approach<sp/>makes<sp/>it<sp/>possible<sp/>to<sp/>exchange<sp/>data<sp/>between<sp/>very<sp/>weakly<sp/>coupled<sp/>code</highlight></codeline>
<codeline><highlight class="normal">modules.</highlight></codeline>
<codeline><highlight class="normal">Each<sp/>module<sp/>can<sp/>execute<sp/>specific<sp/>code<sp/>when<sp/>the<sp/>required<sp/>data<sp/>becomes<sp/>available<sp/>and</highlight></codeline>
<codeline><highlight class="normal">does<sp/>not<sp/>need<sp/>to<sp/>know<sp/>which<sp/>other<sp/>module<sp/>created<sp/>it<sp/>or<sp/>how.</highlight></codeline>
<codeline/>
<codeline/>
<codeline/>
<codeline><highlight class="normal">\section<sp/>Specification_tree<sp/>Specification<sp/>tree</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>combination<sp/>of<sp/>data<sp/>transfer<sp/>offered<sp/>by<sp/>the<sp/>\ref<sp/>Data_store<sp/>"data<sp/>store"<sp/>and</highlight></codeline>
<codeline><highlight class="normal">control<sp/>transfer<sp/>offered<sp/>by<sp/>the<sp/>\ref<sp/>Event_subsystem<sp/>"event<sp/>subsystem"<sp/>offers<sp/>the</highlight></codeline>
<codeline><highlight class="normal">basis<sp/>for<sp/>weak<sp/>coupling<sp/>of<sp/>multiple<sp/>independent<sp/>modules.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>specification<sp/>tree<sp/>builds<sp/>on<sp/>this<sp/>basis<sp/>and<sp/>orchestrates<sp/>the<sp/>interaction<sp/>between</highlight></codeline>
<codeline><highlight class="normal">the<sp/>multiple<sp/>modules<sp/>used<sp/>in<sp/>an<sp/>execution.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>specification<sp/>tree<sp/>is<sp/>specified<sp/>in<sp/>a<sp/>file<sp/>written<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[YAML](https://en.wikipedia.org/wiki/YAML)<sp/>format<sp/>and<sp/>provided<sp/>to<sp/>%PDI<sp/>at</highlight></codeline>
<codeline><highlight class="normal">\ref<sp/>PDI_init<sp/>"initialization".</highlight></codeline>
<codeline><highlight class="normal">This<sp/>makes<sp/>it<sp/>possible<sp/>to<sp/>change<sp/>the<sp/>list<sp/>of<sp/>modules<sp/>to<sp/>load<sp/>and<sp/>their<sp/>interactions</highlight></codeline>
<codeline><highlight class="normal">without<sp/>having<sp/>to<sp/>recompile<sp/>any<sp/>code.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>specification<sp/>tree<sp/>structure<sp/>is<sp/>described<sp/>in<sp/>details<sp/>in<sp/>its</highlight></codeline>
<codeline><highlight class="normal">\ref<sp/>Specification_tree_ref<sp/>"reference<sp/>documentation".</highlight></codeline>
<codeline><highlight class="normal">It<sp/>contains<sp/>two<sp/>main<sp/>subparts:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>data<sp/>types<sp/>description,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>plugin<sp/>list<sp/>configuration.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>data<sp/>types<sp/>description<sp/>defines<sp/>the<sp/>type<sp/>of<sp/>data<sp/>expected<sp/>in<sp/>the<sp/>store.</highlight></codeline>
<codeline><highlight class="normal">This<sp/>is<sp/>most<sp/>useful<sp/>for<sp/>non-reflexive<sp/>statically<sp/>typed<sp/>languages<sp/>(C,<sp/>C++,<sp/>Fortran)</highlight></codeline>
<codeline><highlight class="normal">for<sp/>which<sp/>this<sp/>information<sp/>can<sp/>not<sp/>be<sp/>automatically<sp/>extracted<sp/>at<sp/>execution.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>types<sp/>can<sp/>be<sp/>expressed<sp/>in<sp/>function<sp/>of<sp/>the<sp/>value<sp/>of<sp/>other<sp/>data<sp/>through</highlight></codeline>
<codeline><highlight class="normal">`$-expressions`.</highlight></codeline>
<codeline><highlight class="normal">For<sp/>example,<sp/>a<sp/>given<sp/>object<sp/>might<sp/>be<sp/>described<sp/>as<sp/>an<sp/>array<sp/>of<sp/>`N`<sp/>`doubles`<sp/>where<sp/>`N`</highlight></codeline>
<codeline><highlight class="normal">is<sp/>an<sp/>integer<sp/>available<sp/>elsewhere<sp/>in<sp/>the<sp/>store.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>plugin<sp/>list<sp/>configuration<sp/>defines<sp/>the<sp/>list<sp/>of<sp/>plugins<sp/>to<sp/>load<sp/>and<sp/>a<sp/>configuration</highlight></codeline>
<codeline><highlight class="normal">for<sp/>each<sp/>of<sp/>them.</highlight></codeline>
<codeline><highlight class="normal">Each<sp/>plugin<sp/>can<sp/>accept<sp/>a<sp/>different<sp/>way<sp/>of<sp/>specifying<sp/>the<sp/>configuration,<sp/>but<sp/>in<sp/>any</highlight></codeline>
<codeline><highlight class="normal">case,<sp/>this<sp/>is<sp/>where<sp/>the<sp/>orchestration<sp/>of<sp/>interactions<sp/>is<sp/>specified.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>\ref<sp/>user_code_plugin<sp/>"user-code<sp/>plugin"<sp/>is<sp/>somewhat<sp/>specific<sp/>in<sp/>that<sp/>instead<sp/>of</highlight></codeline>
<codeline><highlight class="normal">providing<sp/>a<sp/>service<sp/>itself,<sp/>it<sp/>enables<sp/>the<sp/>application<sp/>to<sp/>react<sp/>to<sp/>events<sp/>and</highlight></codeline>
<codeline><highlight class="normal">implement<sp/>specific<sp/>code<sp/>handle<sp/>data<sp/>from<sp/>the<sp/>store.</highlight></codeline>
<codeline/>
<codeline/>
<codeline/>
<codeline><highlight class="normal">\section<sp/>Conclusion</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">To<sp/>summarize,<sp/>interactions<sp/>between<sp/>weakly<sp/>coupled<sp/>modules<sp/>in<sp/>%PDI<sp/>go<sp/>through<sp/>the</highlight></codeline>
<codeline><highlight class="normal">\ref<sp/>Data_store<sp/>"data<sp/>store"<sp/>that<sp/>acts<sp/>somewhat<sp/>like<sp/>a<sp/>file-system.</highlight></codeline>
<codeline><highlight class="normal">One<sp/>can<sp/>share<sp/>data<sp/>buffers<sp/>in<sp/>this<sp/>store<sp/>to<sp/>make<sp/>them<sp/>available<sp/>to<sp/>other<sp/>modules.</highlight></codeline>
<codeline><highlight class="normal">When<sp/>a<sp/>buffer<sp/>becomes<sp/>available<sp/>in<sp/>the<sp/>store,<sp/>the</highlight></codeline>
<codeline><highlight class="normal">\ref<sp/>Event_subsystem<sp/>"event<sp/>subsystem"<sp/>notifies<sp/>interested<sp/>modules<sp/>so<sp/>that<sp/>they<sp/>can</highlight></codeline>
<codeline><highlight class="normal">use<sp/>the<sp/>data.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>plugins<sp/>loaded<sp/>and<sp/>configured<sp/>through<sp/>the</highlight></codeline>
<codeline><highlight class="normal">\ref<sp/>Specification_tree<sp/>"specification<sp/>tree"<sp/>offer<sp/>various<sp/>reusable<sp/>services<sp/>through</highlight></codeline>
<codeline><highlight class="normal">that<sp/>mechanism<sp/>such<sp/>as<sp/>data<sp/>write<sp/>to<sp/>disk,<sp/>fault<sp/>tolerance,<sp/>code<sp/>coupling,<sp/>etc.</highlight></codeline>
<codeline/>
    </programlisting>
    <location file="Concepts.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="context_8h" kind="file" language="C++">
    <compoundname>context.h</compoundname>
    <includes local="no">functional</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">unordered_map</includes>
    <includes refid="pdi__fwd_8h" local="no">pdi/pdi_fwd.h</includes>
    <includes refid="data__descriptor_8h" local="no">pdi/data_descriptor.h</includes>
    <includes refid="datatype__template_8h" local="no">pdi/datatype_template.h</includes>
    <includes refid="ref__any_8h" local="no">pdi/ref_any.h</includes>
    <includedby refid="context__proxy_8h" local="yes">context_proxy.h</includedby>
    <incdepgraph>
      <node id="10">
        <label>pdi/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="2">
        <label>functional</label>
      </node>
      <node id="1">
        <label>context.h</label>
        <link refid="context_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>pdi/ref_any.h</label>
        <link refid="ref__any_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>cassert</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="18">
        <label>exception</label>
      </node>
      <node id="11">
        <label>pdi/data_descriptor.h</label>
        <link refid="data__descriptor_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>pdi/export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="17">
        <label>pdi/error.h</label>
        <link refid="error_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>pdi/pdi_fwd.h</label>
        <link refid="pdi__fwd_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>spdlog/fmt/fmt.h</label>
      </node>
      <node id="15">
        <label>new</label>
      </node>
      <node id="8">
        <label>paraconf.h</label>
      </node>
      <node id="12">
        <label>pdi/datatype_template.h</label>
        <link refid="datatype__template_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>unordered_map</label>
      </node>
      <node id="7">
        <label>pdi.h</label>
        <link refid="pdi_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>pdi/datatype.h</label>
        <link refid="datatype_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>context.h</label>
        <link refid="context_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>context_proxy.h</label>
        <link refid="context__proxy_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classPDI_1_1Context" prot="public">PDI::Context</innerclass>
    <innerclass refid="classPDI_1_1Context_1_1Iterator" prot="public">PDI::Context::Iterator</innerclass>
    <innernamespace refid="namespacePDI">PDI</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2015-2019<sp/>Commissariat<sp/>a<sp/>l'energie<sp/>atomique<sp/>et<sp/>aux<sp/>energies<sp/>alternatives<sp/>(CEA)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>CEA<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>"AS<sp/>IS",<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"/></codeline>
<codeline lineno="24"><highlight class="normal"/></codeline>
<codeline lineno="25"><highlight class="normal"/><highlight class="preprocessor">#ifndef<sp/>PDI_CONTEXT_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="26"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_CONTEXT_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="27"><highlight class="normal"/></codeline>
<codeline lineno="28"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="29"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="30"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="31"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="32"><highlight class="normal"/></codeline>
<codeline lineno="33"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/pdi_fwd.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="34"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/data_descriptor.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="35"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/datatype_template.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="36"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/ref_any.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="37"><highlight class="normal"/></codeline>
<codeline lineno="38"><highlight class="normal"/></codeline>
<codeline lineno="39"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacePDI" kindref="compound">PDI</ref><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"/></codeline>
<codeline lineno="41"><highlight class="normal"/><highlight class="keyword">class<sp/></highlight><highlight class="normal">PDI_EXPORT<sp/>Context</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"/><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Iterator</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Context;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;std::string,<sp/>std::unique_ptr&lt;Data_descriptor&gt;&gt;::iterator<sp/>m_data;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unordered_map&lt;std::string,<sp/>std::unique_ptr&lt;Data_descriptor&gt;&gt;::iterator&amp;<sp/>data);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator(std::unordered_map&lt;std::string,<sp/>std::unique_ptr&lt;Data_descriptor&gt;&gt;::iterator&amp;&amp;<sp/>data);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data_descriptor*<sp/>operator-&gt;<sp/>();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data_descriptor&amp;<sp/>operator*<sp/>();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator&amp;<sp/>operator++<sp/>();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Iterator&amp;);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::function&lt;<ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref>(Context&amp;,<sp/>PC_tree_t)&gt;<sp/>Datatype_template_parser;</highlight></codeline>
<codeline lineno="63" refid="classPDI_1_1Context" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"/><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Context_1_1Iterator" kindref="compound">Iterator</ref><sp/>get_iterator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unordered_map&lt;std::string,<sp/>std::unique_ptr&lt;Data_descriptor&gt;&gt;::iterator&amp;<sp/>data);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Context_1_1Iterator" kindref="compound">Iterator</ref><sp/>get_iterator(std::unordered_map&lt;std::string,<sp/>std::unique_ptr&lt;Data_descriptor&gt;&gt;::iterator&amp;&amp;<sp/>data);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"/><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classPDI_1_1Context" kindref="compound">Context</ref>();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref>&amp;<sp/>desc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref>&amp;<sp/>desc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref>&amp;<sp/>operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref>&amp;<sp/>operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="90" refid="classPDI_1_1Context_1_1Iterator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Context_1_1Iterator" kindref="compound">Iterator</ref><sp/>begin()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Context_1_1Iterator" kindref="compound">Iterator</ref><sp/>end()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>event(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespacePDI_1a9c906943ee4d374699c804e1d94facd2" kindref="member">Logger_sptr</ref><sp/>logger()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref><sp/>datatype(PC_tree_t<sp/>node)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_datatype(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/><ref refid="classPDI_1_1Context_1a69e61f140cdf5555c635e160f85f3c86" kindref="member">Datatype_template_parser</ref><sp/>parser)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::function&lt;void()&gt;<sp/>add_init_callback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;&amp;<sp/>callback)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::function&lt;void()&gt;<sp/>add_data_callback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;,<sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref</ref>)&gt;&amp;<sp/>callback,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name<sp/>=<sp/>{})<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::function&lt;void()&gt;<sp/>add_event_callback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;)&gt;&amp;<sp/>callback,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name<sp/>=<sp/>{})<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::function&lt;void()&gt;<sp/>add_empty_desc_access_callback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;)&gt;&amp;<sp/>callback,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name<sp/>=<sp/>{})<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>finalize_and_exit()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">};</highlight></codeline>
<codeline lineno="154"><highlight class="normal"/></codeline>
<codeline lineno="155"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>PDI</highlight><highlight class="normal"/></codeline>
<codeline lineno="156"><highlight class="normal"/></codeline>
<codeline lineno="157"><highlight class="normal"/><highlight class="preprocessor">#endif<sp/>//<sp/>PDI_CONTEXT_H_</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="context__proxy_8h" kind="file" language="C++">
    <compoundname>context_proxy.h</compoundname>
    <includes refid="context_8h" local="yes">context.h</includes>
    <includes refid="pdi__fwd_8h" local="yes">pdi_fwd.h</includes>
    <includes local="no">functional</includes>
    <includes local="no">string</includes>
    <incdepgraph>
      <node id="11">
        <label>pdi/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="3">
        <label>functional</label>
      </node>
      <node id="2">
        <label>context.h</label>
        <link refid="context_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>pdi/ref_any.h</label>
        <link refid="ref__any_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>cassert</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="19">
        <label>exception</label>
      </node>
      <node id="12">
        <label>pdi/data_descriptor.h</label>
        <link refid="data__descriptor_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>pdi/export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="18">
        <label>pdi/error.h</label>
        <link refid="error_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>pdi/pdi_fwd.h</label>
        <link refid="pdi__fwd_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>spdlog/fmt/fmt.h</label>
      </node>
      <node id="16">
        <label>new</label>
      </node>
      <node id="9">
        <label>paraconf.h</label>
      </node>
      <node id="13">
        <label>pdi/datatype_template.h</label>
        <link refid="datatype__template_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>unordered_map</label>
      </node>
      <node id="8">
        <label>pdi.h</label>
        <link refid="pdi_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>pdi/datatype.h</label>
        <link refid="datatype_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
      <node id="1">
        <label>context_proxy.h</label>
        <link refid="context__proxy_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classPDI_1_1Context__proxy" prot="public">PDI::Context_proxy</innerclass>
    <innernamespace refid="namespacePDI">PDI</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2019<sp/>Institute<sp/>of<sp/>Bioorganic<sp/>Chemistry<sp/>Polish<sp/>Academy<sp/>of<sp/>Science<sp/>(PSNC)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>CEA<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>"AS<sp/>IS",<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"/></codeline>
<codeline lineno="24"><highlight class="normal"/></codeline>
<codeline lineno="25"><highlight class="normal"/><highlight class="preprocessor">#ifndef<sp/>PDI_CONTEXT_PROXY_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="26"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_CONTEXT_PROXY_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="27"><highlight class="normal"/></codeline>
<codeline lineno="28"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>"context.h"</highlight><highlight class="normal"/></codeline>
<codeline lineno="29"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>"pdi_fwd.h"</highlight><highlight class="normal"/></codeline>
<codeline lineno="30"><highlight class="normal"/></codeline>
<codeline lineno="31"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="32"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="33"><highlight class="normal"/></codeline>
<codeline lineno="34"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacePDI" kindref="compound">PDI</ref><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"/></codeline>
<codeline lineno="36"><highlight class="normal"/><highlight class="keyword">class<sp/></highlight><highlight class="normal">PDI_EXPORT<sp/>Context_proxy<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Context</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>Context&amp;<sp/>m_real_context;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a9c906943ee4d374699c804e1d94facd2" kindref="member">Logger_sptr</ref><sp/>m_plugin_logger;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"/><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>Context_proxy(Context&amp;<sp/>ctx,<sp/>std::string<sp/>plugin_name,<sp/>PC_tree_t<sp/>logging_tree);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>Data_descriptor&amp;<sp/>desc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>Data_descriptor&amp;<sp/>desc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>Data_descriptor&amp;<sp/>operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>Data_descriptor&amp;<sp/>operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58" refid="classPDI_1_1Context__proxy" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Context_1_1Iterator" kindref="compound">Iterator</ref><sp/>begin()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Context_1_1Iterator" kindref="compound">Iterator</ref><sp/>end()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>event(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a9c906943ee4d374699c804e1d94facd2" kindref="member">Logger_sptr</ref><sp/>logger()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a9c906943ee4d374699c804e1d94facd2" kindref="member">Logger_sptr</ref><sp/>pdi_core_logger()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref><sp/>datatype(PC_tree_t<sp/>node)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_datatype(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/><ref refid="classPDI_1_1Context_1a69e61f140cdf5555c635e160f85f3c86" kindref="member">Datatype_template_parser</ref><sp/>parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;void()&gt;<sp/>add_init_callback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;&amp;<sp/>callback)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;void()&gt;<sp/>add_data_callback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;,<sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref</ref>)&gt;&amp;<sp/>callback,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name<sp/>=<sp/>{})<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;void()&gt;<sp/>add_event_callback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;)&gt;&amp;<sp/>callback,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name<sp/>=<sp/>{})<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;void()&gt;<sp/>add_empty_desc_access_callback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;)&gt;&amp;<sp/>callback,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name<sp/>=<sp/>{})<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>finalize_and_exit()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"/></codeline>
<codeline lineno="98"><highlight class="normal">}<sp/></highlight><highlight class="comment">//namespace<sp/>PDI</highlight><highlight class="normal"/></codeline>
<codeline lineno="99"><highlight class="normal"/></codeline>
<codeline lineno="100"><highlight class="normal"/><highlight class="preprocessor">#endif<sp/>//<sp/>PDI_CONTEXT_PROXY_H_</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/context_proxy.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="data__descriptor_8h" kind="file" language="C++">
    <compoundname>data_descriptor.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">paraconf.h</includes>
    <includes refid="pdi__fwd_8h" local="no">pdi/pdi_fwd.h</includes>
    <includes refid="datatype__template_8h" local="no">pdi/datatype_template.h</includes>
    <includes refid="ref__any_8h" local="no">pdi/ref_any.h</includes>
    <includedby refid="context_8h" local="no">context.h</includedby>
    <incdepgraph>
      <node id="8">
        <label>pdi/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="12">
        <label>functional</label>
      </node>
      <node id="10">
        <label>pdi/ref_any.h</label>
        <link refid="ref__any_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>cassert</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="17">
        <label>exception</label>
      </node>
      <node id="1">
        <label>data_descriptor.h</label>
        <link refid="data__descriptor_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>pdi/export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="16">
        <label>pdi/error.h</label>
        <link refid="error_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>pdi/pdi_fwd.h</label>
        <link refid="pdi__fwd_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>spdlog/fmt/fmt.h</label>
      </node>
      <node id="13">
        <label>new</label>
      </node>
      <node id="3">
        <label>paraconf.h</label>
      </node>
      <node id="9">
        <label>pdi/datatype_template.h</label>
        <link refid="datatype__template_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>unordered_map</label>
      </node>
      <node id="6">
        <label>pdi.h</label>
        <link refid="pdi_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>pdi/datatype.h</label>
        <link refid="datatype_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>context.h</label>
        <link refid="context_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>data_descriptor.h</label>
        <link refid="data__descriptor_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>context_proxy.h</label>
        <link refid="context__proxy_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classPDI_1_1Data__descriptor" prot="public">PDI::Data_descriptor</innerclass>
    <innernamespace refid="namespacePDI">PDI</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2015-2019<sp/>Commissariat<sp/>a<sp/>l'energie<sp/>atomique<sp/>et<sp/>aux<sp/>energies<sp/>alternatives<sp/>(CEA)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>CEA<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>"AS<sp/>IS",<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"/></codeline>
<codeline lineno="24"><highlight class="normal"/></codeline>
<codeline lineno="25"><highlight class="normal"/><highlight class="preprocessor">#ifndef<sp/>PDI_DATA_DESCRIPTOR_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="26"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_DATA_DESCRIPTOR_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="27"><highlight class="normal"/></codeline>
<codeline lineno="28"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="29"><highlight class="normal"/></codeline>
<codeline lineno="30"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;paraconf.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="31"><highlight class="normal"/></codeline>
<codeline lineno="32"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/pdi_fwd.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="33"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/datatype_template.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="34"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/ref_any.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="35"><highlight class="normal"/></codeline>
<codeline lineno="36"><highlight class="normal"/></codeline>
<codeline lineno="37"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacePDI" kindref="compound">PDI</ref><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"/></codeline>
<codeline lineno="39"><highlight class="normal"/><highlight class="keyword">class<sp/></highlight><highlight class="normal">PDI_EXPORT<sp/>Data_descriptor</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"/><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="42"><highlight class="normal"/></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~Data_descriptor();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>default_type(<ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref><sp/>type)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref><sp/>default_type()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61" refid="classPDI_1_1Data__descriptor" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>metadata()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>metadata(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>metadata)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref</ref><sp/>ref()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>empty()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>share(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>read,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>write)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>share(<ref refid="classPDI_1_1Ref__any" kindref="compound">Ref</ref><sp/>ref,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>read,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>write)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>release()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>reclaim()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>Data_descriptor</highlight><highlight class="normal"/></codeline>
<codeline lineno="110"><highlight class="normal"/></codeline>
<codeline lineno="111"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>PDI</highlight><highlight class="normal"/></codeline>
<codeline lineno="112"><highlight class="normal"/></codeline>
<codeline lineno="113"><highlight class="normal"/><highlight class="preprocessor">#endif<sp/>//<sp/>PDI_DATA_DESCRIPTOR_H_</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/data_descriptor.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="datatype_8h" kind="file" language="C++">
    <compoundname>datatype.h</compoundname>
    <includes local="no">string</includes>
    <includes refid="pdi__fwd_8h" local="no">pdi/pdi_fwd.h</includes>
    <includes refid="datatype__template_8h" local="no">pdi/datatype_template.h</includes>
    <includedby refid="array__datatype_8h" local="no">array_datatype.h</includedby>
    <includedby refid="ref__any_8h" local="no">ref_any.h</includedby>
    <includedby refid="pointer__datatype_8h" local="no">pointer_datatype.h</includedby>
    <includedby refid="record__datatype_8h" local="no">record_datatype.h</includedby>
    <includedby refid="scalar__datatype_8h" local="no">scalar_datatype.h</includedby>
    <incdepgraph>
      <node id="8">
        <label>pdi/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="7">
        <label>pdi/export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="3">
        <label>pdi/pdi_fwd.h</label>
        <link refid="pdi__fwd_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>paraconf.h</label>
      </node>
      <node id="9">
        <label>pdi/datatype_template.h</label>
        <link refid="datatype__template_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>pdi.h</label>
        <link refid="pdi_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>datatype.h</label>
        <link refid="datatype_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>context.h</label>
        <link refid="context_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ref_any.h</label>
        <link refid="ref__any_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>data_descriptor.h</label>
        <link refid="data__descriptor_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>pointer_datatype.h</label>
        <link refid="pointer__datatype_8h_source"/>
      </node>
      <node id="9">
        <label>record_datatype.h</label>
        <link refid="record__datatype_8h_source"/>
      </node>
      <node id="2">
        <label>array_datatype.h</label>
        <link refid="array__datatype_8h_source"/>
      </node>
      <node id="10">
        <label>scalar_datatype.h</label>
        <link refid="scalar__datatype_8h_source"/>
      </node>
      <node id="7">
        <label>expression.h</label>
        <link refid="expression_8h_source"/>
      </node>
      <node id="1">
        <label>datatype.h</label>
        <link refid="datatype_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>context_proxy.h</label>
        <link refid="context__proxy_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classPDI_1_1Datatype" prot="public">PDI::Datatype</innerclass>
    <innernamespace refid="namespacePDI">PDI</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2015-2019<sp/>Commissariat<sp/>a<sp/>l'energie<sp/>atomique<sp/>et<sp/>aux<sp/>energies<sp/>alternatives<sp/>(CEA)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>CEA<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>"AS<sp/>IS",<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"/></codeline>
<codeline lineno="24"><highlight class="normal"/></codeline>
<codeline lineno="25"><highlight class="normal"/><highlight class="preprocessor">#ifndef<sp/>PDI_DATATYPE_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="26"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_DATATYPE_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="27"><highlight class="normal"/></codeline>
<codeline lineno="28"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="29"><highlight class="normal"/></codeline>
<codeline lineno="30"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/pdi_fwd.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="31"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/datatype_template.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="32"><highlight class="normal"/></codeline>
<codeline lineno="33"><highlight class="normal"/></codeline>
<codeline lineno="34"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacePDI" kindref="compound">PDI</ref><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"/></codeline>
<codeline lineno="42"><highlight class="keyword">class<sp/></highlight><highlight class="normal">PDI_EXPORT<sp/>Datatype:</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Datatype_template</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"/><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>~Datatype()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>clone_type()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Datatype&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Datatype&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>densify()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dense()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>datasize()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffersize()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alignment()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>simple()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data_to_dense_copy(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data_from_dense_copy(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy_data(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>debug_string()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal">};</highlight></codeline>
<codeline lineno="139"><highlight class="normal"/></codeline>
<codeline lineno="140"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>PDI</highlight><highlight class="normal"/></codeline>
<codeline lineno="141"><highlight class="normal"/></codeline>
<codeline lineno="142"><highlight class="normal"/><highlight class="preprocessor">#endif<sp/>//<sp/>PDI_DATATYPE_H_</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="datatype__template_8h" kind="file" language="C++">
    <compoundname>datatype_template.h</compoundname>
    <includes local="no">paraconf.h</includes>
    <includes refid="pdi__fwd_8h" local="no">pdi/pdi_fwd.h</includes>
    <includedby refid="datatype_8h" local="no">datatype.h</includedby>
    <includedby refid="data__descriptor_8h" local="no">data_descriptor.h</includedby>
    <includedby refid="context_8h" local="no">context.h</includedby>
    <incdepgraph>
      <node id="7">
        <label>pdi/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="6">
        <label>pdi/export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="3">
        <label>pdi/pdi_fwd.h</label>
        <link refid="pdi__fwd_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>paraconf.h</label>
      </node>
      <node id="1">
        <label>datatype_template.h</label>
        <link refid="datatype__template_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>pdi.h</label>
        <link refid="pdi_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6">
        <label>context.h</label>
        <link refid="context_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ref_any.h</label>
        <link refid="ref__any_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>data_descriptor.h</label>
        <link refid="data__descriptor_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>pointer_datatype.h</label>
        <link refid="pointer__datatype_8h_source"/>
      </node>
      <node id="10">
        <label>record_datatype.h</label>
        <link refid="record__datatype_8h_source"/>
      </node>
      <node id="3">
        <label>array_datatype.h</label>
        <link refid="array__datatype_8h_source"/>
      </node>
      <node id="11">
        <label>scalar_datatype.h</label>
        <link refid="scalar__datatype_8h_source"/>
      </node>
      <node id="1">
        <label>datatype_template.h</label>
        <link refid="datatype__template_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>expression.h</label>
        <link refid="expression_8h_source"/>
      </node>
      <node id="2">
        <label>datatype.h</label>
        <link refid="datatype_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>context_proxy.h</label>
        <link refid="context__proxy_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classPDI_1_1Datatype__template" prot="public">PDI::Datatype_template</innerclass>
    <innernamespace refid="namespacePDI">PDI</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2015-2019<sp/>Commissariat<sp/>a<sp/>l'energie<sp/>atomique<sp/>et<sp/>aux<sp/>energies<sp/>alternatives<sp/>(CEA)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>CEA<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>"AS<sp/>IS",<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"/></codeline>
<codeline lineno="24"><highlight class="normal"/></codeline>
<codeline lineno="25"><highlight class="normal"/><highlight class="preprocessor">#ifndef<sp/>PDI_DATATYPE_TEMPLATE_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="26"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_DATATYPE_TEMPLATE_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="27"><highlight class="normal"/></codeline>
<codeline lineno="28"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;paraconf.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="29"><highlight class="normal"/></codeline>
<codeline lineno="30"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/pdi_fwd.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="31"><highlight class="normal"/></codeline>
<codeline lineno="32"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacePDI" kindref="compound">PDI</ref><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"/></codeline>
<codeline lineno="34"><highlight class="normal"/><highlight class="keyword">class<sp/></highlight><highlight class="normal">PDI_EXPORT<sp/>Datatype_template</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"/><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~Datatype_template();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref><sp/>clone()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>evaluate(Context&amp;<sp/>ctx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>load_basic_datatypes(Context&amp;<sp/>ctx);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal">};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"/></codeline>
<codeline lineno="63"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>PDI</highlight><highlight class="normal"/></codeline>
<codeline lineno="64"><highlight class="normal"/></codeline>
<codeline lineno="65"><highlight class="normal"/><highlight class="preprocessor">#endif<sp/>//<sp/>PDI_DATATYPE_TEMPLATE_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="66"><highlight class="normal"/></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/datatype_template.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="error_8h" kind="file" language="C++">
    <compoundname>error.h</compoundname>
    <includes local="no">exception</includes>
    <includes local="no">string</includes>
    <includes local="no">paraconf.h</includes>
    <includes refid="pdi__fwd_8h" local="no">pdi/pdi_fwd.h</includes>
    <includes local="no">spdlog/fmt/fmt.h</includes>
    <includedby refid="ref__any_8h" local="no">ref_any.h</includedby>
    <incdepgraph>
      <node id="9">
        <label>pdi/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="2">
        <label>exception</label>
      </node>
      <node id="8">
        <label>pdi/export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="1">
        <label>error.h</label>
        <link refid="error_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>pdi/pdi_fwd.h</label>
        <link refid="pdi__fwd_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>spdlog/fmt/fmt.h</label>
      </node>
      <node id="4">
        <label>paraconf.h</label>
      </node>
      <node id="7">
        <label>pdi.h</label>
        <link refid="pdi_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>context.h</label>
        <link refid="context_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ref_any.h</label>
        <link refid="ref__any_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>data_descriptor.h</label>
        <link refid="data__descriptor_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>error.h</label>
        <link refid="error_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>expression.h</label>
        <link refid="expression_8h_source"/>
      </node>
      <node id="5">
        <label>context_proxy.h</label>
        <link refid="context__proxy_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classPDI_1_1Error" prot="public">PDI::Error</innerclass>
    <innernamespace refid="namespacePDI">PDI</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2015-2019<sp/>Commissariat<sp/>a<sp/>l'energie<sp/>atomique<sp/>et<sp/>aux<sp/>energies<sp/>alternatives<sp/>(CEA)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>CEA<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>"AS<sp/>IS",<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"/></codeline>
<codeline lineno="24"><highlight class="normal"/></codeline>
<codeline lineno="25"><highlight class="normal"/><highlight class="preprocessor">#ifndef<sp/>PDI_ERROR_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="26"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_ERROR_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="27"><highlight class="normal"/></codeline>
<codeline lineno="28"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="29"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="30"><highlight class="normal"/></codeline>
<codeline lineno="31"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;paraconf.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="32"><highlight class="normal"/></codeline>
<codeline lineno="33"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/pdi_fwd.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="34"><highlight class="normal"/></codeline>
<codeline lineno="35"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;spdlog/fmt/fmt.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="36"><highlight class="normal"/></codeline>
<codeline lineno="37"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacePDI" kindref="compound">PDI</ref><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"/></codeline>
<codeline lineno="39"><highlight class="normal"/><highlight class="keyword">class<sp/></highlight><highlight class="normal">PDI_EXPORT<sp/>Error:</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::exception</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>m_what;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_status_t<sp/>m_status;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"/><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>Error(PDI_status_t<sp/>errcode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args&amp;<sp/>...<sp/>args):</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_what{fmt::format(fmt,<sp/>args...)},</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_status{errcode}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>Error(PDI_status_t<sp/>errcode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61" refid="classPDI_1_1Error" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>what()<sp/>const<sp/>noexcept<sp/>override;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_status_t<sp/>status()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal">};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"/></codeline>
<codeline lineno="67"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>PDI</highlight><highlight class="normal"/></codeline>
<codeline lineno="68"><highlight class="normal"/></codeline>
<codeline lineno="69"><highlight class="normal"/><highlight class="preprocessor">#endif<sp/>//<sp/>PDI_ERROR_H_</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/error.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="export_8h" kind="file" language="C++">
    <compoundname>export.h</compoundname>
    <includedby refid="pdi_8h" local="no">pdi.h</includedby>
    <invincdepgraph>
      <node id="8">
        <label>context.h</label>
        <link refid="context_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ref_any.h</label>
        <link refid="ref__any_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>paraconf_wrapper.h</label>
        <link refid="paraconf__wrapper_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>data_descriptor.h</label>
        <link refid="data__descriptor_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>pointer_datatype.h</label>
        <link refid="pointer__datatype_8h_source"/>
      </node>
      <node id="1">
        <label>export.h</label>
        <link refid="export_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>record_datatype.h</label>
        <link refid="record__datatype_8h_source"/>
      </node>
      <node id="15">
        <label>error.h</label>
        <link refid="error_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>plugin.h</label>
        <link refid="plugin_8h_source"/>
      </node>
      <node id="4">
        <label>array_datatype.h</label>
        <link refid="array__datatype_8h_source"/>
      </node>
      <node id="3">
        <label>pdi_fwd.h</label>
        <link refid="pdi__fwd_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>scalar_datatype.h</label>
        <link refid="scalar__datatype_8h_source"/>
      </node>
      <node id="14">
        <label>datatype_template.h</label>
        <link refid="datatype__template_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>expression.h</label>
        <link refid="expression_8h_source"/>
      </node>
      <node id="2">
        <label>pdi.h</label>
        <link refid="pdi_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>logger.h</label>
        <link refid="logger_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>datatype.h</label>
        <link refid="datatype_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>context_proxy.h</label>
        <link refid="context__proxy_8h_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="export_8h_1ac957cd52670b6eeb581ce8c6dc964162" prot="public" static="no">
        <name>PDI_DEPRECATED</name>
        <initializer>__attribute__ ((__deprecated__))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/build/pdi/export.h" line="25" column="11" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/build/pdi/export.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="export_8h_1a29ac3520969cf5bbab71db1bd5a0c0ac" prot="public" static="no">
        <name>PDI_DEPRECATED_NO_EXPORT</name>
        <initializer>PDI_NO_EXPORT PDI_DEPRECATED</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/build/pdi/export.h" line="33" column="11" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/build/pdi/export.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"/></codeline>
<codeline lineno="2"><highlight class="normal"/><highlight class="preprocessor">#ifndef<sp/>PDI_EXPORT_H</highlight><highlight class="normal"/></codeline>
<codeline lineno="3"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_EXPORT_H</highlight><highlight class="normal"/></codeline>
<codeline lineno="4"><highlight class="normal"/></codeline>
<codeline lineno="5"><highlight class="normal"/><highlight class="preprocessor">#ifdef<sp/>PDI_STATIC_DEFINE</highlight><highlight class="normal"/></codeline>
<codeline lineno="6"><highlight class="normal"/><highlight class="preprocessor">#<sp/><sp/>define<sp/>PDI_EXPORT</highlight><highlight class="normal"/></codeline>
<codeline lineno="7"><highlight class="normal"/><highlight class="preprocessor">#<sp/><sp/>define<sp/>PDI_NO_EXPORT</highlight><highlight class="normal"/></codeline>
<codeline lineno="8"><highlight class="normal"/><highlight class="preprocessor">#else</highlight><highlight class="normal"/></codeline>
<codeline lineno="9"><highlight class="normal"/><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/>PDI_EXPORT</highlight><highlight class="normal"/></codeline>
<codeline lineno="10"><highlight class="normal"/><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>ifdef<sp/>PDI_C_EXPORTS</highlight><highlight class="normal"/></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>are<sp/>building<sp/>this<sp/>library<sp/>*/</highlight><highlight class="normal"/></codeline>
<codeline lineno="12"><highlight class="normal"/><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>PDI_EXPORT<sp/>__attribute__((visibility("default")))</highlight><highlight class="normal"/></codeline>
<codeline lineno="13"><highlight class="normal"/><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"/></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>are<sp/>using<sp/>this<sp/>library<sp/>*/</highlight><highlight class="normal"/></codeline>
<codeline lineno="15"><highlight class="normal"/><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>PDI_EXPORT<sp/>__attribute__((visibility("default")))</highlight><highlight class="normal"/></codeline>
<codeline lineno="16"><highlight class="normal"/><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"/></codeline>
<codeline lineno="17"><highlight class="normal"/><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"/></codeline>
<codeline lineno="18"><highlight class="normal"/></codeline>
<codeline lineno="19"><highlight class="normal"/><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/>PDI_NO_EXPORT</highlight><highlight class="normal"/></codeline>
<codeline lineno="20"><highlight class="normal"/><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>PDI_NO_EXPORT<sp/>__attribute__((visibility("hidden")))</highlight><highlight class="normal"/></codeline>
<codeline lineno="21"><highlight class="normal"/><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"/></codeline>
<codeline lineno="22"><highlight class="normal"/><highlight class="preprocessor">#endif</highlight><highlight class="normal"/></codeline>
<codeline lineno="23"><highlight class="normal"/></codeline>
<codeline lineno="24"><highlight class="normal"/><highlight class="preprocessor">#ifndef<sp/>PDI_DEPRECATED</highlight><highlight class="normal"/></codeline>
<codeline lineno="25"><highlight class="normal"/><highlight class="preprocessor">#<sp/><sp/>define<sp/>PDI_DEPRECATED<sp/>__attribute__<sp/>((__deprecated__))</highlight><highlight class="normal"/></codeline>
<codeline lineno="26"><highlight class="normal"/><highlight class="preprocessor">#endif</highlight><highlight class="normal"/></codeline>
<codeline lineno="27"><highlight class="normal"/></codeline>
<codeline lineno="28"><highlight class="normal"/><highlight class="preprocessor">#ifndef<sp/>PDI_DEPRECATED_EXPORT</highlight><highlight class="normal"/></codeline>
<codeline lineno="29"><highlight class="normal"/><highlight class="preprocessor">#<sp/><sp/>define<sp/>PDI_DEPRECATED_EXPORT<sp/>PDI_EXPORT<sp/>PDI_DEPRECATED</highlight><highlight class="normal"/></codeline>
<codeline lineno="30"><highlight class="normal"/><highlight class="preprocessor">#endif</highlight><highlight class="normal"/></codeline>
<codeline lineno="31"><highlight class="normal"/></codeline>
<codeline lineno="32"><highlight class="normal"/><highlight class="preprocessor">#ifndef<sp/>PDI_DEPRECATED_NO_EXPORT</highlight><highlight class="normal"/></codeline>
<codeline lineno="33"><highlight class="normal"/><highlight class="preprocessor">#<sp/><sp/>define<sp/>PDI_DEPRECATED_NO_EXPORT<sp/>PDI_NO_EXPORT<sp/>PDI_DEPRECATED</highlight><highlight class="normal"/></codeline>
<codeline lineno="34"><highlight class="normal"/><highlight class="preprocessor">#endif</highlight><highlight class="normal"/></codeline>
<codeline lineno="35"><highlight class="normal"/></codeline>
<codeline lineno="36"><highlight class="normal"/><highlight class="preprocessor">#if<sp/>0<sp/></highlight><highlight class="comment">/*<sp/>DEFINE_NO_DEPRECATED<sp/>*/</highlight><highlight class="preprocessor"/><highlight class="normal"/></codeline>
<codeline lineno="37"><highlight class="normal"/><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/>PDI_NO_DEPRECATED</highlight><highlight class="normal"/></codeline>
<codeline lineno="38"><highlight class="normal"/><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>PDI_NO_DEPRECATED</highlight><highlight class="normal"/></codeline>
<codeline lineno="39"><highlight class="normal"/><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"/></codeline>
<codeline lineno="40"><highlight class="normal"/><highlight class="preprocessor">#endif</highlight><highlight class="normal"/></codeline>
<codeline lineno="41"><highlight class="normal"/></codeline>
<codeline lineno="42"><highlight class="normal"/><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>PDI_EXPORT_H<sp/>*/</highlight><highlight class="preprocessor"/></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/build/pdi/export.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="expression_8h" kind="file" language="C++">
    <compoundname>expression.h</compoundname>
    <includes local="no">map</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="pdi__fwd_8h" local="no">pdi/pdi_fwd.h</includes>
    <includes refid="paraconf__wrapper_8h" local="no">pdi/paraconf_wrapper.h</includes>
    <includes refid="ref__any_8h" local="no">pdi/ref_any.h</includes>
    <incdepgraph>
      <node id="11">
        <label>pdi/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="13">
        <label>functional</label>
      </node>
      <node id="14">
        <label>pdi/ref_any.h</label>
        <link refid="ref__any_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>cassert</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="2">
        <label>map</label>
      </node>
      <node id="12">
        <label>pdi/paraconf_wrapper.h</label>
        <link refid="paraconf__wrapper_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>exception</label>
      </node>
      <node id="10">
        <label>pdi/export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="20">
        <label>pdi/error.h</label>
        <link refid="error_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>pdi/pdi_fwd.h</label>
        <link refid="pdi__fwd_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="22">
        <label>spdlog/fmt/fmt.h</label>
      </node>
      <node id="16">
        <label>new</label>
      </node>
      <node id="9">
        <label>paraconf.h</label>
      </node>
      <node id="5">
        <label>utility</label>
      </node>
      <node id="19">
        <label>pdi/datatype_template.h</label>
        <link refid="datatype__template_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>unordered_map</label>
      </node>
      <node id="1">
        <label>expression.h</label>
        <link refid="expression_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>pdi.h</label>
        <link refid="pdi_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>pdi/datatype.h</label>
        <link refid="datatype_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="classPDI_1_1Expression" prot="public">PDI::Expression</innerclass>
    <innernamespace refid="namespacePDI">PDI</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2015-2019<sp/>Commissariat<sp/>a<sp/>l'energie<sp/>atomique<sp/>et<sp/>aux<sp/>energies<sp/>alternatives<sp/>(CEA)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>CEA<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>"AS<sp/>IS",<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"/></codeline>
<codeline lineno="24"><highlight class="normal"/></codeline>
<codeline lineno="25"><highlight class="normal"/><highlight class="preprocessor">#ifndef<sp/>PDI_EXPRESSION_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="26"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_EXPRESSION_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="27"><highlight class="normal"/></codeline>
<codeline lineno="28"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="29"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="30"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="31"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="32"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="33"><highlight class="normal"/></codeline>
<codeline lineno="34"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/pdi_fwd.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="35"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/paraconf_wrapper.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="36"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/ref_any.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="37"><highlight class="normal"/></codeline>
<codeline lineno="38"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacePDI" kindref="compound">PDI</ref><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"/></codeline>
<codeline lineno="40"><highlight class="normal"/><highlight class="keyword">class<sp/></highlight><highlight class="normal">PDI_EXPORT<sp/>Expression</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PDI_NO_EXPORT<sp/>Impl;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Impl&gt;<sp/>m_impl;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>Expression(std::unique_ptr&lt;Impl&gt;);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"/><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>Expression();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>Expression(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>expr);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>Expression(Expression&amp;&amp;<sp/>expr);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>Expression(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>Expression(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>expr);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>Expression(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>expr);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>Expression(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>expr);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>Expression(PC_tree_t<sp/>expr);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>~Expression();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>Expression&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>expr);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>Expression&amp;<sp/>operator=(Expression&amp;&amp;<sp/>expr);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool<sp/>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespacePDI_1ac4e2b53893618edfb9bff90c65c4ee01" kindref="member">to_long</ref>(Context&amp;<sp/>ctx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacePDI_1a9cd51216ced09ea3b6c63b86f8f5950c" kindref="member">to_double</ref>(Context&amp;<sp/>ctx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="namespacePDI_1ae1a842c5cdb57b5185c035de9a99c3c8" kindref="member">to_string</ref>(Context&amp;<sp/>ctx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1adc363df268e6e68e68947a4fc799ca00" kindref="member">Ref</ref><sp/>to_ref(Context&amp;<sp/>ctx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1adc363df268e6e68e68947a4fc799ca00" kindref="member">Ref</ref><sp/>to_ref(Context&amp;<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Datatype&amp;<sp/>type)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">};</highlight></codeline>
<codeline lineno="160"><highlight class="normal"/></codeline>
<codeline lineno="161"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>PDI</highlight><highlight class="normal"/></codeline>
<codeline lineno="162"><highlight class="normal"/></codeline>
<codeline lineno="163"><highlight class="normal"/><highlight class="preprocessor">#endif<sp/>//<sp/>PDI_EXPRESSION_H_</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/expression.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="expression__grammar_8in_8txt" kind="file" language="C++">
    <compoundname>expression_grammar.in.txt</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>parsing<sp/>as<sp/>a<sp/>REFERENCE<sp/>is<sp/>preferred<sp/>over<sp/>OPERATION</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/>parsing<sp/>as<sp/>an<sp/>OPERATION<sp/>is<sp/>preferred<sp/>over<sp/>STRING_LITERAL</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*/</highlight><highlight class="normal"/></codeline>
<codeline lineno="4"><highlight class="normal">EXPRESSION<sp/><sp/><sp/><sp/><sp/>:=<sp/>REFERENCE<sp/>|<sp/>OPERATION<sp/>|<sp/>STRING_LITERAL</highlight></codeline>
<codeline lineno="5"><highlight class="normal"/></codeline>
<codeline lineno="6"><highlight class="normal">STRING_LITERAL<sp/>:=<sp/>(<sp/>CHAR<sp/>|<sp/></highlight><highlight class="charliteral">'\'</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">'\'</highlight><highlight class="normal"><sp/>|<sp/></highlight><highlight class="charliteral">'\'</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">'$'</highlight><highlight class="normal"/></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>REFERENCE</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/></highlight><highlight class="charliteral">'$'</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">'('</highlight><highlight class="normal"><sp/>OPERATION<sp/></highlight><highlight class="charliteral">')'</highlight><highlight class="normal"/></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)*</highlight></codeline>
<codeline lineno="10"><highlight class="normal"/></codeline>
<codeline lineno="11"><highlight class="normal"/><highlight class="comment">/*<sp/>The<sp/>operator<sp/>descending<sp/>precedence<sp/>order<sp/>is:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/>1.<sp/>*,<sp/>/,<sp/>%:<sp/>multiplication,<sp/>division<sp/>and<sp/>modulo,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/>2.<sp/>+,<sp/>-:<sp/>addition<sp/>and<sp/>subtraction,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/>3.<sp/>&lt;,<sp/>&gt;:<sp/>less<sp/>than<sp/>and<sp/>greater<sp/>than,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/>4.<sp/>=:<sp/>equality,</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/>5.<sp/>&amp;:<sp/>logical<sp/>AND,</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/>6.<sp/>|:<sp/>logical<sp/>OR.</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*/</highlight><highlight class="normal"/></codeline>
<codeline lineno="19"><highlight class="normal">OPERATION<sp/><sp/><sp/><sp/><sp/><sp/>:=<sp/>TERM<sp/>(<sp/>OPERATOR<sp/>TERM<sp/>)*</highlight></codeline>
<codeline lineno="20"><highlight class="normal"/></codeline>
<codeline lineno="21"><highlight class="normal">TERM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:=<sp/>(<sp/>INT_LITERAL<sp/>|<sp/>REFERENCE<sp/>|<sp/></highlight><highlight class="charliteral">'('</highlight><highlight class="normal"><sp/>OPERATION<sp/></highlight><highlight class="charliteral">')'</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"/></codeline>
<codeline lineno="23"><highlight class="normal">REFERENCE<sp/><sp/><sp/><sp/><sp/><sp/>:=<sp/></highlight><highlight class="charliteral">'$'</highlight><highlight class="normal"><sp/>(<sp/>IREFERENCE<sp/>|<sp/></highlight><highlight class="charliteral">'{'</highlight><highlight class="normal"><sp/>IREFERENCE<sp/></highlight><highlight class="charliteral">'}'</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"/></codeline>
<codeline lineno="25"><highlight class="normal">IREFERENCE<sp/><sp/><sp/><sp/><sp/>:=<sp/>ID<sp/>(<sp/></highlight><highlight class="charliteral">'['</highlight><highlight class="normal"><sp/>OPERATION<sp/></highlight><highlight class="charliteral">']'</highlight><highlight class="normal"><sp/>)*</highlight></codeline>
<codeline lineno="26"><highlight class="normal"/></codeline>
<codeline lineno="27"><highlight class="normal"/></codeline>
<codeline lineno="28"><highlight class="normal"/></codeline>
<codeline lineno="29"><highlight class="normal">INT_LITERAL<sp/>~=<sp/>(0x)?<sp/>[0-9]+<sp/>(<sp/>\.<sp/><sp/>)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~=<sp/>[a-zA-Z_][a-zA-Z0-9_]*</highlight></codeline>
<codeline lineno="31"><highlight class="normal">CHAR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~=<sp/>[^$\\]</highlight></codeline>
<codeline lineno="32"><highlight class="normal">OPERATOR<sp/><sp/><sp/><sp/>~=<sp/>[|&amp;=&lt;&gt;+\-\*/%]</highlight></codeline>
    </programlisting>
    <location file="expression_grammar.in.txt"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="First__steps_8md" kind="file" language="Markdown">
    <compoundname>First_steps.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">\page<sp/>First_steps<sp/>First<sp/>steps<sp/>with<sp/>%PDI</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>Yaml<sp/>Yaml<sp/>language</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Yaml<sp/>is<sp/>used<sp/>to<sp/>create<sp/>the<sp/>specification<sp/>tree<sp/>of<sp/>%PDI.</highlight></codeline>
<codeline><highlight class="normal">There<sp/>are<sp/>3<sp/>basic<sp/>values<sp/>in<sp/>yaml:</highlight></codeline>
<codeline><highlight class="normal">1.<sp/>Scalar<sp/>-<sp/>is<sp/>a<sp/>single<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>List<sp/>-<sp/>is<sp/>an<sp/>array<sp/>of<sp/>values.<sp/></highlight></codeline>
<codeline><highlight class="normal">3.<sp/>Map<sp/>-<sp/>consist<sp/>of<sp/>mulitple<sp/>keys<sp/>and<sp/>values.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Indentation<sp/>level<sp/>indicates<sp/>the<sp/>level<sp/>in<sp/>the<sp/>tree.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Here<sp/>is<sp/>an<sp/>example:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">tree_1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>array_1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>scalar_1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>scalar_2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>array_2:<sp/>[1,<sp/>2,<sp/>3]</highlight></codeline>
<codeline><highlight class="normal">tree_2:<sp/>{subtree_1:<sp/>scalar_1,<sp/>subtree_2:<sp/>scalar_2}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\image<sp/>html<sp/>yaml_example.jpg<sp/>Visualization<sp/>of<sp/>the<sp/>yaml<sp/>tree.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>blue<sp/>nodes<sp/>are<sp/>map<sp/>values,<sp/>yellow<sp/>are<sp/>lists<sp/>and<sp/>pink<sp/>are<sp/>scalars.<sp/>As<sp/>can<sp/>be<sp/>seen,<sp/>the<sp/>list<sp/>and<sp/>map<sp/>can<sp/>be<sp/>defined<sp/>in<sp/>both<sp/>ways<sp/>(in<sp/>one<sp/>line<sp/>and<sp/>multiple<sp/>lines).</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>PDI_init<sp/>function<sp/>gets<sp/>as<sp/>parameter<sp/>a<sp/>tree<sp/>with<sp/>`logging`,<sp/>`data`,<sp/>`metadata`<sp/>and<sp/>`plugins`<sp/>maps<sp/>defined<sp/>in<sp/>its<sp/>root.<sp/>User<sp/>can<sp/>define<sp/>its<sp/>own<sp/>values<sp/>in<sp/>yaml<sp/>and<sp/>pass<sp/>to<sp/>%PDI<sp/>only<sp/>the<sp/>subtree:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">duration:<sp/>0.75</highlight></codeline>
<codeline><highlight class="normal">size:<sp/>[64,<sp/>64]</highlight></codeline>
<codeline><highlight class="normal">parallelism:<sp/>{<sp/>height:<sp/>4,<sp/>width:<sp/>4<sp/>}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>only<sp/>the<sp/>following<sp/>config<sp/>will<sp/>be<sp/>passed<sp/>to<sp/>PDI</highlight></codeline>
<codeline><highlight class="normal">pdi_subtree:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>iteration:<sp/><sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>main_field:<sp/>double</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>decl_hdf5:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">PC_tree_t<sp/>root<sp/>=<sp/>PC_parse_path("example.yaml");</highlight></codeline>
<codeline><highlight class="normal">PDI_init(PC_get(root,<sp/>"pdi_subtree"));</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">\section<sp/>fs_hello_event<sp/>Hello<sp/>Event</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">As<sp/>mentioned<sp/>in<sp/>\ref<sp/>Specification_tree<sp/>we<sp/>have<sp/>to<sp/>provide<sp/>specification<sp/>tree<sp/>to</highlight></codeline>
<codeline><highlight class="normal">instruct<sp/>%PDI<sp/>what<sp/>data<sp/>we<sp/>will<sp/>share<sp/>and<sp/>what<sp/>to<sp/>do<sp/>with<sp/>it.</highlight></codeline>
<codeline><highlight class="normal">We<sp/>want<sp/>to<sp/>show<sp/>what<sp/>happens<sp/>on<sp/>each<sp/>%PDI<sp/>API<sp/>call.<sp/>We<sp/>will<sp/>use</highlight></codeline>
<codeline><highlight class="normal">\ref<sp/>trace_plugin,<sp/>which<sp/>is<sp/>very<sp/>simple<sp/>plugin<sp/>that<sp/>just<sp/>prints<sp/>every</highlight></codeline>
<codeline><highlight class="normal">information<sp/>it<sp/>gets.</highlight></codeline>
<codeline><highlight class="normal">Let's<sp/>create<sp/>a<sp/>specification<sp/>tree<sp/>named<sp/>`hello_event.yml`<sp/>that<sp/>will<sp/>load<sp/>trace</highlight></codeline>
<codeline><highlight class="normal">plugin:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>trace:<sp/>~</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Yes,<sp/>that<sp/>is<sp/>whole<sp/>specification<sp/>tree.</highlight></codeline>
<codeline><highlight class="normal">Trace<sp/>plugin<sp/>prints<sp/>everything,<sp/>so<sp/>there<sp/>is<sp/>no<sp/>need<sp/>to<sp/>specify<sp/>what<sp/>we<sp/>want<sp/>it</highlight></codeline>
<codeline><highlight class="normal">to<sp/>do.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">We<sp/>need<sp/>to<sp/>write<sp/>a<sp/>source<sp/>code<sp/>of<sp/>our<sp/>application:</highlight></codeline>
<codeline><highlight class="normal">```C</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi.h&gt;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_init(PC_parse_path("hello_event.yml"));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_event("Hello<sp/>World<sp/>Event");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_finalize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Let's<sp/>analyze<sp/>what<sp/>happens<sp/>in<sp/>each<sp/>line.<sp/>Firstly<sp/>we<sp/>have<sp/>PDI_init()<sp/>function<sp/>which<sp/>take<sp/>parameter<sp/>of<sp/>type<sp/>`PC_tree_t`.<sp/>It's<sp/>a<sp/>tree<sp/>structure<sp/>parsed<sp/>from<sp/>some<sp/>YAML<sp/>file,<sp/>in<sp/>our<sp/>case<sp/>we<sp/>parse<sp/>it<sp/>with<sp/>`paraconf`<sp/>library<sp/>build<sp/>in<sp/>%PDI.<sp/>To<sp/>parse<sp/>a<sp/>file<sp/>we<sp/>need<sp/>to<sp/>call<sp/>`PC_parse_path`<sp/>function<sp/>passing<sp/>file<sp/>path<sp/>as<sp/>argument.<sp/>The<sp/>next<sp/>step<sp/>is<sp/>to<sp/>call<sp/>an<sp/>event<sp/>in<sp/>%PDI<sp/>named<sp/>"Hello<sp/>World<sp/>Event".<sp/>At<sp/>the<sp/>end<sp/>we<sp/>have<sp/>to<sp/>call<sp/>PDI_finalize().<sp/>The<sp/>output<sp/>from<sp/>this<sp/>program<sp/>is<sp/>presented<sp/>below:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][10:25:28]<sp/>***<sp/>info:<sp/>Welcome!</highlight></codeline>
<codeline><highlight class="normal">[PDI][10:25:28]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][10:25:28]<sp/>***<sp/>info:<sp/>!!!<sp/>named<sp/>event:<sp/>Hello<sp/>World<sp/>Event</highlight></codeline>
<codeline><highlight class="normal">[PDI][10:25:28]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][10:25:28]<sp/>***<sp/>info:<sp/>Goodbye!</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">The<sp/>first<sp/>line<sp/>indicates<sp/>that<sp/>plugin<sp/>has<sp/>loaded<sp/>successfully.<sp/>The<sp/>second<sp/>is<sp/>%PDI<sp/>message,<sp/>that<sp/>tells<sp/>it<sp/>managed<sp/>to<sp/>create<sp/>all<sp/>descriptors<sp/>and<sp/>load<sp/>all<sp/>defined<sp/>plugins.<sp/>Then<sp/>we<sp/>have<sp/>message<sp/>from<sp/>loaded<sp/>trace<sp/>plugin<sp/>which<sp/>printed<sp/>the<sp/>event<sp/>name<sp/>it<sp/>has<sp/>received.<sp/>The<sp/>next<sp/>information<sp/>is<sp/>from<sp/>%PDI<sp/>and<sp/>indicates<sp/>that<sp/>finalization<sp/>has<sp/>started<sp/>and<sp/>now<sp/>it<sp/>will<sp/>deallocate<sp/>resources.<sp/>Last<sp/>message<sp/>is<sp/>from<sp/>trace<sp/>plugin<sp/>destructor.<sp/></highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>fs_hello_data<sp/>Hello<sp/>Data</highlight></codeline>
<codeline><highlight class="normal">In<sp/>\ref<sp/>fs_hello_event<sp/>we<sp/>learned<sp/>how<sp/>to<sp/>call<sp/>an<sp/>event.<sp/>In<sp/>this<sp/>chapter<sp/>we<sp/>will<sp/>see<sp/>how<sp/>to<sp/>share<sp/>and<sp/>reclaim<sp/>data.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Firstly<sp/>we<sp/>have<sp/>to<sp/>create<sp/>a<sp/>specification<sp/>tree<sp/>named<sp/>`hello_data.yml`<sp/>with<sp/>`data`<sp/>and<sp/>trace<sp/>plugin<sp/>tree<sp/>declared:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>world:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>trace:<sp/>~</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">We<sp/>have<sp/>declared<sp/>trace<sp/>plugin<sp/>and<sp/>one<sp/>descriptor<sp/>named<sp/>`world`<sp/>of<sp/>integer<sp/>type.</highlight></codeline>
<codeline><highlight class="normal">Now<sp/>let's<sp/>write<sp/>our<sp/>program:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```C</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi.h&gt;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_init(PC_parse_path("hello_data.yml"));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>my_world<sp/>=<sp/>42;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_share("world",<sp/>&amp;my_world,<sp/>PDI_OUT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//variable<sp/>my_world<sp/>is<sp/>shared<sp/>with<sp/>PDI</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_reclaim("world");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//variable<sp/>my_world<sp/>is<sp/>no<sp/>longer<sp/>shared<sp/>with<sp/>PDI</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_finalize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Let's<sp/>analyze<sp/>new<sp/>functions:</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`PDI_share`<sp/>shares<sp/>access<sp/>to<sp/>the<sp/>variable<sp/>with<sp/>%PDI.<sp/>The<sp/>first<sp/>argument<sp/>is<sp/>a<sp/>descriptor<sp/>name<sp/>and<sp/>indicates<sp/>what<sp/>data<sp/>we<sp/>are<sp/>sharing.<sp/>The<sp/>second<sp/>one<sp/>is<sp/>pointer<sp/>to<sp/>our<sp/>variable<sp/>and<sp/>the<sp/>last<sp/>one<sp/>is<sp/>access<sp/>direction.<sp/>`PDI_OUT`<sp/>means<sp/>data<sp/>direction<sp/>from<sp/>application<sp/>to<sp/>%PDI,<sp/>`PDI_IN`<sp/>is<sp/>a<sp/>direction<sp/>from<sp/>%PDI<sp/>to<sp/>the<sp/>program,<sp/>`PDI_INOUT`<sp/>includes<sp/>both<sp/>directions.<sp/></highlight></codeline>
<codeline><highlight class="normal">-<sp/>`PDI_reclaim`<sp/>reclaims<sp/>the<sp/>share<sp/>which<sp/>means<sp/>that<sp/>%PDI<sp/>will<sp/>no<sp/>longer<sp/>have<sp/>access<sp/>to<sp/>shared<sp/>variable.<sp/>As<sp/>an<sp/>argument<sp/>it<sp/>takes<sp/>name<sp/>of<sp/>the<sp/>descriptor.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>output<sp/>from<sp/>our<sp/>application:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][10:59:35]<sp/>***<sp/>info:<sp/>Welcome!</highlight></codeline>
<codeline><highlight class="normal">[PDI][10:59:35]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][10:59:35]<sp/>***<sp/>info:<sp/>=&gt;&gt;<sp/><sp/><sp/>data<sp/>becoming<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>world</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][10:59:35]<sp/>***<sp/>info:<sp/>&lt;&lt;=<sp/>data<sp/>stop<sp/>being<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>world</highlight></codeline>
<codeline><highlight class="normal">[PDI][10:59:35]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][10:59:35]<sp/>***<sp/>info:<sp/>Goodbye!</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">As<sp/>we<sp/>can<sp/>see<sp/>from<sp/>the<sp/>logs<sp/>above,<sp/>when<sp/>we<sp/>called<sp/>`PDI_share`<sp/>plugin<sp/>gained<sp/>access<sp/>to<sp/>the<sp/>shared<sp/>variable<sp/>and<sp/>after<sp/>`PDI_reclaim`<sp/>the<sp/>variable<sp/>has<sp/>become<sp/>no<sp/>longer<sp/>available<sp/>for<sp/>the<sp/>plugin.<sp/>The<sp/>share<sp/>notification<sp/>gives<sp/>plugin<sp/>possibility<sp/>to<sp/>operate<sp/>on<sp/>data<sp/>dependently<sp/>what<sp/>has<sp/>been<sp/>declared<sp/>in<sp/>specification<sp/>tree.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>same<sp/>exact<sp/>result<sp/>we<sp/>can<sp/>achieve<sp/>with<sp/>`PDI_expose`<sp/>which<sp/>is<sp/>just<sp/>`PDI_share`<sp/>call<sp/>and<sp/>right<sp/>after<sp/>`PDI_reclaim`<sp/>is<sp/>called.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_share("world",<sp/>&amp;my_world,<sp/>PDI_OUT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_reclaim("world");</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">is<sp/>the<sp/>same<sp/>as:</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_expose("world",<sp/>&amp;my_world,<sp/>PDI_OUT);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>fs_access<sp/>Hello<sp/>Access</highlight></codeline>
<codeline><highlight class="normal">Now<sp/>we<sp/>will<sp/>try<sp/>to<sp/>access<sp/>a<sp/>descriptor<sp/>we<sp/>share<sp/>with<sp/>%PDI.<sp/>In<sp/>this<sp/>case<sp/>we<sp/>won't<sp/>need<sp/>any<sp/>plugin.<sp/>We<sp/>want<sp/>to<sp/>define<sp/>string<sp/>in<sp/>our<sp/>`world_access.yml`:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_message:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>32}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Now<sp/>let's<sp/>write<sp/>some<sp/>simple<sp/>program:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```C</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi.h&gt;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">void<sp/>print_secret_msg()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char*<sp/>message;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_access("my_message",<sp/>(void**)&amp;message,<sp/>PDI_IN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf("%s\n",<sp/>message);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_release("my_message");</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_init(PC_parse_path("world_access.yml"));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char*<sp/>secret_msg<sp/>=<sp/>"Watermelon<sp/>is<sp/>the<sp/>tastiest<sp/>fruit";</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_share("my_message",<sp/>secret_msg,<sp/>PDI_OUT);</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>print_secret_msg();</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_reclaim("my_message");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_finalize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">We<sp/>will<sp/>focus<sp/>on<sp/>`print_secret_msg`<sp/>function.<sp/>If<sp/>you<sp/>don't<sp/>understand<sp/>what<sp/>happens<sp/>in<sp/>`main`<sp/>function,<sp/>please<sp/>see<sp/>\ref<sp/>fs_hello_data<sp/>example.<sp/>`PDI_access`<sp/>sets<sp/>our<sp/>pointer<sp/>to<sp/>the<sp/>data<sp/>location.<sp/>We<sp/>need<sp/>to<sp/>pass<sp/>`PDI_IN`<sp/>because<sp/>data<sp/>flows<sp/>from<sp/>%PDI<sp/>to<sp/>our<sp/>application.<sp/>We<sp/>also<sp/>want<sp/>to<sp/>use<sp/>`PDI_release`,<sp/>because<sp/>`PDI_reclaim`<sp/>would<sp/>end<sp/>the<sp/>sharing<sp/>status<sp/>of<sp/>this<sp/>descriptor<sp/>and<sp/>we<sp/>reclaim<sp/>this<sp/>data<sp/>later<sp/>in<sp/>`main`<sp/>function.</highlight></codeline>
<codeline><highlight class="normal">Output<sp/>from<sp/>the<sp/>program:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:42:31]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">Watermelon<sp/>is<sp/>the<sp/>tastiest<sp/>fruit</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:42:31]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">As<sp/>you<sp/>can<sp/>see,<sp/>we<sp/>manage<sp/>to<sp/>access<sp/>data<sp/>descriptor<sp/>from<sp/>function<sp/>only<sp/>by<sp/>passing<sp/>its<sp/>name<sp/>and<sp/>correct<sp/>direction<sp/>access.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>fs_multiexpose<sp/>Hello<sp/>multi<sp/>expose</highlight></codeline>
<codeline><highlight class="normal">In<sp/>some<sp/>cases<sp/>we<sp/>would<sp/>want<sp/>to<sp/>expose<sp/>many<sp/>descriptors<sp/>at<sp/>once.<sp/>For<sp/>this<sp/>we<sp/>have<sp/>multi<sp/>expose<sp/>which<sp/>shares<sp/>all<sp/>the<sp/>given<sp/>descriptors,<sp/>then<sp/>call<sp/>given<sp/>event<sp/>and<sp/>then<sp/>reclaim<sp/>all<sp/>passed<sp/>data.<sp/>Let's<sp/>look<sp/>at<sp/>the<sp/>example.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_int:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_float:<sp/>float</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_string:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>32}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugin:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>trace:<sp/>~</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">We<sp/>have<sp/>defined<sp/>3<sp/>descriptors<sp/>and<sp/>trace<sp/>plugin.<sp/>Now<sp/>it's<sp/>time<sp/>for<sp/>our<sp/>application:</highlight></codeline>
<codeline><highlight class="normal">```C</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi.h&gt;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_init(PC_parse_path("hello_multi_expose.yml"));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>y<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char*<sp/>z<sp/>=<sp/>"RGB<sp/>=<sp/>Really<sp/>Gawky<sp/>Biscuit";</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_multi_expose("event_between",<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"my_int",<sp/>&amp;x,<sp/>PDI_OUT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"my_float",<sp/>&amp;y,<sp/>PDI_OUT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"my_string",<sp/>&amp;z,<sp/>PDI_OUT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_finalize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">First<sp/>argument<sp/>of<sp/>the<sp/>`PDI_multi_expose`<sp/>is<sp/>the<sp/>event<sp/>name<sp/>we<sp/>want<sp/>to<sp/>call<sp/>when<sp/>all<sp/>the<sp/>descriptors<sp/>are<sp/>shared.<sp/>After<sp/>this<sp/>we<sp/>pass<sp/>in<sp/>loop:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">-<sp/>name<sp/>of<sp/>the<sp/>descriptor</highlight></codeline>
<codeline><highlight class="normal">-<sp/>pointer<sp/>to<sp/>the<sp/>data</highlight></codeline>
<codeline><highlight class="normal">-<sp/>direction<sp/>access</highlight></codeline>
<codeline><highlight class="normal">As<sp/>the<sp/>last<sp/>argument<sp/>we<sp/>have<sp/>to<sp/>pass<sp/>`NULL`.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>output<sp/>of<sp/>the<sp/>execution:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][14:14:51]<sp/>***<sp/>info:<sp/>Welcome!</highlight></codeline>
<codeline><highlight class="normal">[PDI][14:14:51]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][14:14:51]<sp/>***<sp/>info:<sp/>=&gt;&gt;<sp/><sp/><sp/>data<sp/>becoming<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>my_int</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][14:14:51]<sp/>***<sp/>info:<sp/>=&gt;&gt;<sp/><sp/><sp/>data<sp/>becoming<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>my_float</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][14:14:51]<sp/>***<sp/>info:<sp/>=&gt;&gt;<sp/><sp/><sp/>data<sp/>becoming<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>my_string</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][14:14:51]<sp/>***<sp/>info:<sp/>!!!<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>event:<sp/>event_between</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][14:14:51]<sp/>***<sp/>info:<sp/>&lt;&lt;=<sp/>data<sp/>stop<sp/>being<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>my_string</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][14:14:51]<sp/>***<sp/>info:<sp/>&lt;&lt;=<sp/>data<sp/>stop<sp/>being<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>my_float</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][14:14:51]<sp/>***<sp/>info:<sp/>&lt;&lt;=<sp/>data<sp/>stop<sp/>being<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>my_int</highlight></codeline>
<codeline><highlight class="normal">[PDI][14:14:51]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][14:14:51]<sp/>***<sp/>info:<sp/>Goodbye!</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>logs<sp/>from<sp/>trace<sp/>plugin<sp/>confirm<sp/>the<sp/>execution<sp/>order<sp/>we<sp/>were<sp/>expecting.</highlight></codeline>
    </programlisting>
    <location file="First_steps.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="How__to__create__plugin_8md" kind="file" language="Markdown">
    <compoundname>How_to_create_plugin.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">\page<sp/>how_to_create_plugin<sp/>How<sp/>to<sp/>create<sp/>a<sp/>plugin</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>plugin_class<sp/>Plugin<sp/>class</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Plugin<sp/>is<sp/>a<sp/>class,<sp/>that<sp/>handles<sp/>shared<sp/>data<sp/>and<sp/>triggered<sp/>events<sp/>to<sp/>perform<sp/>an<sp/>I/O<sp/>operations.<sp/>It<sp/>is<sp/>dynamically<sp/>linked<sp/>to<sp/>the<sp/>user<sp/>program<sp/>by<sp/>PDI.<sp/>Behavior<sp/>of<sp/>each<sp/>plugin<sp/>is<sp/>defined<sp/>by<sp/>specification<sp/>tree<sp/>in<sp/>plugins<sp/>subtree.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>example:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">The<sp/>given<sp/>example<sp/>will<sp/>load<sp/>example<sp/>plugin<sp/>and<sp/>pass<sp/>its<sp/>subtree<sp/>to<sp/>the<sp/>plugin's<sp/>constructor.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>plugin<sp/>has<sp/>to<sp/>inherit<sp/>from<sp/>PDI::Plugin<sp/>and<sp/>have<sp/>a<sp/>constructor<sp/>with<sp/>arguments<sp/>PDI::Context&amp;<sp/>and<sp/>PC_tree_t.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>example_plugin<sp/>Example<sp/>plugin</highlight></codeline>
<codeline><highlight class="normal">Example<sp/>of<sp/>the<sp/>simplest<sp/>plugin,<sp/>that<sp/>does<sp/>nothing:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/context.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/paraconf_wrapper.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/plugin.h&gt;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">struct<sp/>example_plugin<sp/>:<sp/>public<sp/>PDI::Plugin</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>example_plugin(PDI::Context&amp;<sp/>ctx,<sp/>PC_tree_t<sp/>spec_tree):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Plugin{ctx}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">PDI_PLUGIN(example)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>adding_callback<sp/>Adding<sp/>a<sp/>callback</highlight></codeline>
<codeline><highlight class="normal">PDI::Context<sp/>has<sp/>a<sp/>container<sp/>with<sp/>all<sp/>the<sp/>functions<sp/>(callbacks)<sp/>that<sp/>are<sp/>called<sp/>when<sp/>user<sp/>is<sp/>sharing<sp/>the<sp/>data<sp/>(calls<sp/>PDI_share).<sp/>To<sp/>add<sp/>a<sp/>new<sp/>function<sp/>to<sp/>this<sp/>container<sp/>the<sp/>plugin<sp/>must<sp/>call<sp/>add_data_callback.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">std::function&lt;void()&gt;<sp/>add_data_callback(const<sp/>std::function&lt;void(const<sp/>std::string&amp;,<sp/>Ref)&gt;&amp;<sp/>callback,<sp/>const<sp/>std::string&amp;<sp/>name<sp/>=<sp/>{}))</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>first<sp/>argument<sp/>is<sp/>the<sp/>function<sp/>to<sp/>be<sp/>called<sp/>when<sp/>user<sp/>shares<sp/>the<sp/>data.</highlight></codeline>
<codeline><highlight class="normal">If<sp/>the<sp/>second<sp/>parameter<sp/>(name)<sp/>is<sp/>given,<sp/>the<sp/>function<sp/>will<sp/>be<sp/>called<sp/>only<sp/>on<sp/>a<sp/>specified<sp/>data<sp/>name.</highlight></codeline>
<codeline><highlight class="normal">Returns<sp/>a<sp/>function<sp/>that<sp/>removes<sp/>the<sp/>callback<sp/>from<sp/>PDI::Context<sp/>container.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Example<sp/>of<sp/>adding<sp/>new<sp/>callback:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/context.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/paraconf_wrapper.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/plugin.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/ref_any.h&gt;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">struct<sp/>example_plugin<sp/>:<sp/>public<sp/>PDI::Plugin</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>example_plugin(PDI::Context&amp;<sp/>ctx,<sp/>PC_tree_t<sp/>spec_tree):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Plugin{ctx}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.add_data_callback([](const<sp/>std::string&amp;<sp/>data_name,<sp/>PDI::Ref<sp/>ref){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>"User<sp/>has<sp/>shared<sp/>a<sp/>data<sp/>named<sp/>"<sp/>&lt;&lt;<sp/>data_name<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">PDI_PLUGIN(example)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">If<sp/>user<sp/>create<sp/>specification<sp/>tree:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>some_integer:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>example:<sp/>~</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">And<sp/>a<sp/>program:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi.h&gt;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">int<sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_init(PC_parse_path("spec_tree.yaml"));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>some_integer<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_expose("some_integer",<sp/>&amp;some_integer,<sp/>PDI_OUT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_finalize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">The<sp/>console<sp/>will<sp/>display:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:42:41]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">User<sp/>has<sp/>shared<sp/>a<sp/>data<sp/>named<sp/>some_integer</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:42:42]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>rw_data<sp/>Reading<sp/>and<sp/>writing<sp/>data</highlight></codeline>
<codeline><highlight class="normal">Example<sp/>of<sp/>reading<sp/>and<sp/>writing<sp/>data:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/context.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/paraconf_wrapper.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/plugin.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/ref_any.h&gt;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">struct<sp/>example_plugin<sp/>:<sp/>public<sp/>PDI::Plugin</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>example_plugin(PDI::Context&amp;<sp/>ctx,<sp/>PC_tree_t<sp/>spec_tree):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Plugin{ctx}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.add_data_callback([](const<sp/>std::string&amp;<sp/>data_name,<sp/>PDI::Ref<sp/>ref){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(PDI::Ref_rw<sp/>ref_rw{ref})<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Plugin<sp/>can<sp/>read<sp/>and<sp/>write</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>some_integer<sp/>=<sp/>ref_rw.get();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if(PDI::Ref_r<sp/>ref_r{ref})<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Plugin<sp/>can<sp/>read</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int*<sp/>some_integer<sp/>=<sp/>ref_r.get();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if(PDI::Ref_w<sp/>ref_w{ref})<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Plugin<sp/>can<sp/>write</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>some_integer<sp/>=<sp/>ref_w.get();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Plugin<sp/>cannot<sp/>read<sp/>nor<sp/>write</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">PDI_PLUGIN(example)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>example_events<sp/>Handling<sp/>events</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/context.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/paraconf_wrapper.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/plugin.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/ref_any.h&gt;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">struct<sp/>example_plugin<sp/>:<sp/>public<sp/>PDI::Plugin</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>example_plugin(PDI::Context&amp;<sp/>ctx,<sp/>PC_tree_t<sp/>spec_tree):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Plugin{ctx}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.add_event_callback([this](const<sp/>std::string&amp;<sp/>event_name){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;handle_event(event_name);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.add_event_callback([this](const<sp/>std::string&amp;<sp/>event_name){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;handle_special_event(event_name);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>"special_event");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">private:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>handle_event(const<sp/>std::string&amp;<sp/>event_name)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>"Event"<sp/>&lt;&lt;<sp/>event_name<sp/>&lt;&lt;<sp/>"called."<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>handle_special_event(const<sp/>std::string&amp;<sp/>event_name)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>"Special<sp/>event<sp/>`"<sp/>&lt;&lt;<sp/>event_name<sp/>&lt;&lt;<sp/>"'<sp/>called."<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">PDI_PLUGIN(example)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>reading_pc_tree<sp/>Reading<sp/>scalar<sp/>and<sp/>array<sp/>from<sp/>specification<sp/>tree</highlight></codeline>
<codeline><highlight class="normal">Specification<sp/>tree:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>example:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scalar:<sp/>some_string</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>array:<sp/>[0,<sp/>1,<sp/>2]</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">Reading<sp/>a<sp/>scalar<sp/>and<sp/>an<sp/>array:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/context.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/paraconf_wrapper.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/plugin.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/ref_any.h&gt;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">struct<sp/>example_plugin<sp/>:<sp/>public<sp/>PDI::Plugin</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>example_plugin(PDI::Context&amp;<sp/>ctx,<sp/>PC_tree_t<sp/>spec_tree):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Plugin{ctx}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//scalar</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PC_tree_t<sp/>scalar_tree<sp/>=<sp/>PC_get(spec_tree,<sp/>".scalar");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>string_scalar<sp/>=<sp/>PDI::to_string(scalar_tree);</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PC_tree_t<sp/>array_tree<sp/>=<sp/>PC_get(spec_tree,<sp/>".array");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>array_size<sp/>=<sp/>PDI::len(array_tree);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;long&gt;<sp/>array;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>array_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PC_tree_t<sp/>array_element<sp/>=<sp/>PC_get(array_tree,<sp/>"[%d]",<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array.emplace_back(PDI::to_long(array_element));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">PDI_PLUGIN(example)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">\subsection<sp/>reading_pc_tree_2<sp/>Reading<sp/>maps<sp/>from<sp/>specification<sp/>tree</highlight></codeline>
<codeline><highlight class="normal">Specification<sp/>tree:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>example:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>custom_subtree:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can:<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be:<sp/>2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>any:<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtree:<sp/>4</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">Reading<sp/>a<sp/>scalar<sp/>and<sp/>an<sp/>array:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;unordered_map&gt;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/context.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/paraconf_wrapper.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/plugin.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi/ref_any.h&gt;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">struct<sp/>example_plugin<sp/>:<sp/>public<sp/>PDI::Plugin</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>example_plugin(PDI::Context&amp;<sp/>ctx,<sp/>PC_tree_t<sp/>spec_tree):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Plugin{ctx}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PC_tree_t<sp/>subtree<sp/>=<sp/>PC_get(spec_tree,<sp/>".custom_subtree");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>subtree_size<sp/>=<sp/>PDI::len(subtree);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;std::string,<sp/>long&gt;<sp/>custom_map;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>subtree_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PC_tree_t<sp/>key<sp/>=<sp/>PC_get(subtree,<sp/>"{%d}",<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PC_tree_t<sp/>value<sp/>=<sp/>PC_get(subtree,<sp/>"&lt;%d&gt;",<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>custom_map.emplace_back(PDI::to_string(key),<sp/>PDI::to_long(value));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">PDI_PLUGIN(example)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>create_true_plugin<sp/>Creating<sp/>a<sp/>true<sp/>plugin:<sp/>POSIX<sp/>plugin</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>step_1<sp/>Step<sp/>1:<sp/>Think<sp/>what<sp/>your<sp/>plugin<sp/>will<sp/>be<sp/>for.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Simple<sp/>checkpointing.<sp/>Each<sp/>data<sp/>will<sp/>be<sp/>saved<sp/>in<sp/>separate<sp/>file.<sp/>User<sp/>can<sp/>check<sp/>the<sp/>status<sp/>of<sp/>all<sp/>files<sp/>at<sp/>once<sp/>and<sp/>then<sp/>recover<sp/>the<sp/>data.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>step_2<sp/>Step<sp/>2:<sp/>Prepare<sp/>your<sp/>specification<sp/>tree<sp/>schema.</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>some_data:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>64}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>can_recover_data:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>posix:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>some_data:<sp/>/file_path/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>can_recover_all:<sp/>can_recover_data</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">/file_path/<sp/>is<sp/>a<sp/>path<sp/>where<sp/>to<sp/>save<sp/>and<sp/>load<sp/>from<sp/>some_data.<sp/>can_recover_data<sp/>is<sp/>a<sp/>flag<sp/>that<sp/>indicates<sp/>if<sp/>the<sp/>recover<sp/>is<sp/>possible.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>fastest<sp/>way<sp/>to<sp/>learn<sp/>is<sp/>by<sp/>examples.<sp/>To<sp/>show<sp/>how<sp/>to<sp/>create<sp/>a<sp/>plugin,<sp/>we<sp/>will<sp/>create<sp/>"posix<sp/>plugin".<sp/>It<sp/>won't<sp/>do<sp/>anything<sp/>special,<sp/>but<sp/>give<sp/>you<sp/>a<sp/>basic<sp/>knowledge<sp/>how<sp/>to<sp/>create<sp/>one.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>step_3<sp/>Step<sp/>3:<sp/>Write<sp/>your<sp/>plugin.</highlight></codeline>
<codeline><highlight class="normal">Members<sp/>and<sp/>constructor:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">class<sp/>posix_plugin<sp/>:<sp/>public<sp/>PDI::Plugin</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>m_can_recover_data;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;std::string,<sp/>std::string&gt;<sp/>m_data_to_path_map;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>posix_plugin(PDI::Context&amp;<sp/>ctx,<sp/>PC_tree_t<sp/>spec_tree):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Plugin{ctx}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">PDI_PLUGIN(posix)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Read<sp/>recover<sp/>tree:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>read_recover_tree(PC_tree_t<sp/>spec_tree)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PC_tree_t<sp/>recover_tree<sp/>=<sp/>PC_get(spec_tree,<sp/>".can_recover_all");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(!PC_status(recover_tree))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_can_recover_data<sp/>=<sp/>PDI::to_string(recover_tree);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Read<sp/>data<sp/>tree:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>read_data_tree(PC_tree_t<sp/>spec_tree)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PC_tree_t<sp/>data_tree<sp/>=<sp/>PC_get(spec_tree,<sp/>".data");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!PC_status(data_tree))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>data_tree_size<sp/>=<sp/>PDI::len(data_tree);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>data_tree_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PC_tree_t<sp/>key<sp/>=<sp/>PC_get(data_tree,<sp/>"{%d}",<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PC_tree_t<sp/>value<sp/>=<sp/>PC_get(data_tree,<sp/>"&lt;%d&gt;",<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_data_to_path_map.emplace_back(PDI::to_string(key),<sp/>PDI::to_string(value));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Create<sp/>a<sp/>function<sp/>that<sp/>writes<sp/>data<sp/>to<sp/>temporary<sp/>file<sp/>and<sp/>check<sp/>if<sp/>file<sp/>was<sp/>created,<sp/>size<sp/>is<sp/>correct<sp/>and<sp/>then<sp/>replace<sp/>old<sp/>file:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>write_data(const<sp/>std::string&amp;<sp/>data_name,<sp/>PDI::Ref_r<sp/>ref_r)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(!ref_r)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>tmp_path<sp/>=<sp/>m_data_to_path_map[data_name]<sp/>+<sp/>".tmp";</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>file{tmp_path,<sp/>std::ios::binary};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(ref_r.type().buffersize()<sp/>==<sp/>ref_r.type().datasize())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//dense<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.write((const<sp/>char*)ref_r.get(),<sp/>ref_r.type().buffersize());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//sparse<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;char&gt;<sp/>data_copy<sp/>{new<sp/>char[ref_r.type().dataSize()]};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_r.type().data_to_dense_copy(data_copy.get(),<sp/>ref_r.get());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.write(data_copy.get(),<sp/>ref_r.type().datasize());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>file.close();</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//replace<sp/>old<sp/>file</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>stat<sp/>status;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!stat(tmp_path.c_str(),<sp/>&amp;status)<sp/>&amp;&amp;<sp/>status.st_size<sp/>==<sp/>ref_r.type().datasize())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!stat(m_data_to_path_map[data_name].c_str())<sp/>&amp;&amp;<sp/>std::remove(m_data_to_path_map[data_name].c_str()))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>PDI::Error<sp/>{PDI_ERR_SYSTEM,<sp/>"Cannot<sp/>remove<sp/>old<sp/>file<sp/>{}",<sp/>m_data_to_path_map[data_name]};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(std::rename(tmp_path.c_str(),<sp/>m_data_to_path_map[data_name].c_str()))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>PDI::Error<sp/>{PDI_ERR_SYSTEM,<sp/>"Cannot<sp/>rename<sp/>temporary<sp/>file<sp/>{}",<sp/>tmp_path};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>PDI::Error<sp/>{PDI_ERR_SYSTEM,<sp/>"Data<sp/>write<sp/>not<sp/>complete"};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Create<sp/>a<sp/>function<sp/>that<sp/>reads<sp/>data<sp/>from<sp/>file:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>read_data(const<sp/>std::string&amp;<sp/>data_name,<sp/>PDI::Ref_w<sp/>ref_w)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(!ref_w)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>file{m_data_to_path_map[data_name],<sp/>std::ios::binary};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(ref_w.type().buffersize()<sp/>==<sp/>ref_w.type().datasize())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//dense<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.read((char*)ref_w.get(),<sp/>ref_w.type().buffersize());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//sparse<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;char&gt;<sp/>data_copy<sp/>{new<sp/>char[ref_w.type().dataSize()]};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.read(data_copy.get(),<sp/>ref_w.type().datasize());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_w.type().data_from_dense_copy(ref_w.get(),<sp/>data_copy.get());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Handle<sp/>can_recover_all<sp/>data:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>can_recover(const<sp/>std::string&amp;<sp/>data_name,<sp/>PDI::Ref_w<sp/>ref_w)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!ref_w)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>PDI::Error<sp/>{PDI_ERR_RIGHT,<sp/>"Cannot<sp/>write<sp/>to<sp/>`can_recover_all'<sp/>data"};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>data_path_pair<sp/>:<sp/>m_data_to_path_map)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>stat<sp/>status;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(stat(data_path_pair.second.c_str(),<sp/>&amp;status))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*static_cast&lt;int*&gt;(ref_w.get())<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*static_cast&lt;int*&gt;(ref_w.get())<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Add<sp/>created<sp/>functions<sp/>to<sp/>callbacks:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">class<sp/>posix_plugin<sp/>:<sp/>public<sp/>PDI::Plugin</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>m_can_recover_data;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;std::string,<sp/>std::string&gt;<sp/>m_data_to_path_map;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>posix_plugin(PDI::Context&amp;<sp/>ctx,<sp/>PC_tree_t<sp/>spec_tree):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Plugin{ctx}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_recover_tree(spec_tree);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_data_tree(spec_tree);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>data_path_pair<sp/>:<sp/>m_data_to_path_map)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.add_data_callback([this](const<sp/>std::string&amp;<sp/>data_name,<sp/>PDI::Ref<sp/>ref)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;write_data(data_name,<sp/>ref);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>data_path_pair.first);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.add_data_callback([this](const<sp/>std::string&amp;<sp/>data_name,<sp/>PDI::Ref<sp/>ref)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;read_data(data_name,<sp/>ref);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>data_path_pair.first);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!m_can_recover_data.empty())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.add_data_callback([this](const<sp/>std::string&amp;<sp/>data_name,<sp/>PDI::Ref<sp/>ref)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;can_recover(data_name,<sp/>ref);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>m_can_recover_all_data);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>plugin_compile<sp/>Next<sp/>steps</highlight></codeline>
<codeline><highlight class="normal">1.<sp/>Compile:<sp/></highlight></codeline>
<codeline><highlight class="normal">g++<sp/>posix.cxx<sp/>-o<sp/>libpdi_posix_plugin.so<sp/>-lpdi<sp/>-shared<sp/>-fPIC<sp/>-std=c++11</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">2.<sp/>Copy<sp/>created<sp/>file<sp/>to<sp/>path<sp/>where<sp/>dynamic<sp/>linker<sp/>can<sp/>find<sp/>it.<sp/>For<sp/>example:</highlight></codeline>
<codeline><highlight class="normal">sudo<sp/>cp<sp/>libpdi_posix_plugin.so<sp/>/usr/local/lib/</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">3.<sp/>Configure<sp/>dynamic<sp/>linker<sp/>run-time<sp/>bindings:</highlight></codeline>
<codeline><highlight class="normal">sudo<sp/>ldconfig</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">4.<sp/>Create<sp/>program<sp/>that<sp/>uses<sp/>posix<sp/>plugin.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">5.<sp/>Compile<sp/>your<sp/>test<sp/>program:</highlight></codeline>
<codeline><highlight class="normal">gcc<sp/>example_use.cxx<sp/>-o<sp/>example_use<sp/>-lpdi<sp/>-lparaconf</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">6.<sp/>Run<sp/>your<sp/>test<sp/>program:</highlight></codeline>
<codeline><highlight class="normal">./example_use</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">You<sp/>can<sp/>see<sp/>example<sp/>of<sp/>the<sp/>program<sp/>that<sp/>uses<sp/>this<sp/>plugin<sp/>on<sp/>these<sp/>[slides](https://docs.google.com/presentation/d/1jT416oALDkquBBgq_XkVrU48o4qx72wGHUPb4emXJw4).</highlight></codeline>
<codeline/>
    </programlisting>
    <location file="How_to_create_plugin.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Installation_8md" kind="file" language="Markdown">
    <compoundname>Installation.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">\page<sp/>Installation<sp/>Installation<sp/>of<sp/>%PDI<sp/>source<sp/>distribution</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\warning</highlight></codeline>
<codeline><highlight class="normal">The<sp/>recommended<sp/>approach<sp/>to<sp/>install<sp/>%PDI<sp/>is<sp/>to<sp/>use<sp/>the<sp/>stable<sp/>pre-compiled</highlight></codeline>
<codeline><highlight class="normal">binary<sp/>packages<sp/>for<sp/>Debian,<sp/>Fedora<sp/>and<sp/>Ubuntu<sp/>available<sp/>at</highlight></codeline>
<codeline><highlight class="normal">https://github.com/pdidev/pkgs/tree/repo<sp/>.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\warning</highlight></codeline>
<codeline><highlight class="normal">On<sp/>other<sp/>distributions,<sp/>in<sp/>case<sp/>you<sp/>do<sp/>not<sp/>have<sp/>root<sp/>acces,<sp/>or<sp/>if<sp/>you<sp/>want<sp/>a</highlight></codeline>
<codeline><highlight class="normal">more<sp/>recent<sp/>version,<sp/>the<sp/>**%PDI<sp/>source<sp/>distribution**<sp/>can<sp/>be<sp/>easily<sp/>downloaded</highlight></codeline>
<codeline><highlight class="normal">and<sp/>compiled.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>%PDI<sp/>source<sp/>distribution<sp/>includes:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>%PDI<sp/>core<sp/>and<sp/>its<sp/>bindings<sp/>for<sp/>Fortran<sp/>and<sp/>python,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>all<sp/>%PDI<sp/>plugins,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>%PDI<sp/>configuration<sp/>validator,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>examples<sp/>and<sp/>tests,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>most<sp/>dependencies<sp/>of<sp/>all<sp/>the<sp/>above.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>downloading_distribution<sp/>Downloading<sp/>PDI<sp/>source<sp/>distribution</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">To<sp/>download<sp/>the<sp/>sources,<sp/>have<sp/>a<sp/>look<sp/>at<sp/>the<sp/>list<sp/>of<sp/>all<sp/>releases<sp/>from:</highlight></codeline>
<codeline><highlight class="normal">https://gitlab.maisondelasimulation.fr/pdidev/pdi/tags</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">For<sp/>example,<sp/>release<sp/>0.6.1<sp/>can<sp/>be<sp/>downloaded<sp/>by<sp/>following<sp/>these<sp/>instructions:</highlight></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">wget<sp/>https://gitlab.maisondelasimulation.fr/pdidev/pdi/-/archive/0.6.1/pdi-0.6.1.tar.bz2</highlight></codeline>
<codeline><highlight class="normal">tar<sp/>-xjf<sp/>pdi-0.6.1.tar.bz2</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>default_installation<sp/>Default<sp/>installation</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\attention</highlight></codeline>
<codeline><highlight class="normal">The<sp/>*default<sp/>%PDI<sp/>source<sp/>distribution*<sp/>consists<sp/>in<sp/>a<sp/>subset<sp/>of<sp/>the<sp/>%PDI<sp/>source</highlight></codeline>
<codeline><highlight class="normal">distribution<sp/>considered<sp/>stable<sp/>enough<sp/>for<sp/>production<sp/>use.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Installing<sp/>the<sp/>default<sp/>%PDI<sp/>source<sp/>distribution<sp/>is<sp/>fairly<sp/>easy.</highlight></codeline>
<codeline><highlight class="normal">Most<sp/>dependencies<sp/>are<sp/>embedded<sp/>in<sp/>the<sp/>distribution<sp/>and<sp/>the<sp/>only<sp/>required</highlight></codeline>
<codeline><highlight class="normal">external<sp/>dependencies<sp/>are:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[cmake](https://cmake.org),<sp/>version<sp/>&gt;=<sp/>3.5,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>C<sp/>99,<sp/>C++<sp/>14<sp/>and<sp/>Fortran<sp/>95<sp/>compiler<sp/>([gcc](https://gcc.gnu.org/)<sp/>5.4<sp/>is</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tested),</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>POSIX<sp/>compatible<sp/>OS<sp/>with<sp/>a<sp/>[bash](https://www.gnu.org/software/bash/)<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[python](https://www.python.org/)<sp/>interpreter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>([linux](https://www.kernel.org/)<sp/>with</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[GNU<sp/>libc](https://www.gnu.org/software/libc/)<sp/>2.27<sp/>is<sp/>tested),</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>MPI<sp/>implementation.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">For<sp/>example,<sp/>release<sp/>0.6.1<sp/>can<sp/>be<sp/>installed<sp/>by<sp/>following<sp/>these<sp/>instructions<sp/>(but</highlight></codeline>
<codeline><highlight class="normal">look<sp/>for<sp/>the<sp/>latest<sp/>release<sp/>at</highlight></codeline>
<codeline><highlight class="normal">https://gitlab.maisondelasimulation.fr/pdidev/pdi/tags):</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">mkdir<sp/>pdi-0.6.1/build<sp/>&amp;&amp;<sp/>cd<sp/>pdi-0.6.1/build</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-DCMAKE_INSTALL_PREFIX=/usr/<sp/>..<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>configuration</highlight></codeline>
<codeline><highlight class="normal">make<sp/>install<sp/><sp/><sp/>#<sp/>compilation<sp/>and<sp/>installation</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\attention</highlight></codeline>
<codeline><highlight class="normal">The<sp/>`cmake`<sp/>command<sp/>must<sp/>be<sp/>followed<sp/>by<sp/>the<sp/>path<sp/>to<sp/>the<sp/>`pdi`<sp/>directory,<sp/>here</highlight></codeline>
<codeline><highlight class="normal">`..`<sp/>because<sp/>we<sp/>have<sp/>just<sp/>created<sp/>and<sp/>moved<sp/>to<sp/>the<sp/>`build`<sp/>subdirectory.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\attention</highlight></codeline>
<codeline><highlight class="normal">The<sp/>`-DCMAKE_INSTALL_PREFIX=/usr/`<sp/>flag<sp/>is<sp/>used<sp/>to<sp/>specify<sp/>where<sp/>to<sp/>install<sp/>the</highlight></codeline>
<codeline><highlight class="normal">distribution,<sp/>flags<sp/>are<sp/>\ref<sp/>cmake_config<sp/>"discussed<sp/>in<sp/>more<sp/>detail<sp/>below".</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">If<sp/>the<sp/>default<sp/>installation<sp/>fails<sp/>or<sp/>if<sp/>you<sp/>need<sp/>an<sp/>installation<sp/>better<sp/>tailored</highlight></codeline>
<codeline><highlight class="normal">to<sp/>your<sp/>needs,<sp/>keep<sp/>reading.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>cmake_config<sp/>Configuration</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>%PDI<sp/>source<sp/>distribution<sp/>is<sp/>compiled<sp/>using<sp/>CMake.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>`cmake`<sp/>command<sp/>accepts<sp/>options<sp/>to<sp/>configure<sp/>the<sp/>distribution<sp/>with<sp/>flags.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>syntax<sp/>is<sp/>`-D&lt;FLAG&gt;=&lt;VALUE&gt;`<sp/>to<sp/>set<sp/>`FLAG`<sp/>value<sp/>to<sp/>`VALUE`.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">For<sp/>example,<sp/>the<sp/>installation<sp/>directory<sp/>can<sp/>be<sp/>changed<sp/>with<sp/>the<sp/>following<sp/>command:</highlight></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-DCMAKE_INSTALL_PREFIX=/home/user/<sp/>..</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>following<sp/>general<sp/>flags<sp/>are<sp/>useful<sp/>to<sp/>configure<sp/>the<sp/>distribution<sp/>as<sp/>a<sp/>whole.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|Flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|Default<sp/><sp/><sp/><sp/><sp/>|Description|</highlight></codeline>
<codeline><highlight class="normal">|:---------------------|:-----------|:----------|</highlight></codeline>
<codeline><highlight class="normal">|`CMAKE_INSTALL_PREFIX`|`/usr/local`|The<sp/>path<sp/>where<sp/>to<sp/>install<sp/>the<sp/>distribution.|</highlight></codeline>
<codeline><highlight class="normal">|`CMAKE_PREFIX_PATH`<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|A<sp/>semicolon-separated<sp/>list<sp/>of<sp/>prefix<sp/>where<sp/>to<sp/>look<sp/>for<sp/>%PDI<sp/>dependencies<sp/>in<sp/>addition<sp/>to<sp/>system<sp/>path.|</highlight></codeline>
<codeline><highlight class="normal">|`DIST_PROFILE`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|`User`<sp/><sp/><sp/><sp/><sp/><sp/>|Sets<sp/>the<sp/>default<sp/>values<sp/>of<sp/>other<sp/>flags.<sp/>The<sp/>possible<sp/>values<sp/>are<sp/>`User`<sp/>for<sp/>the<sp/>%PDI<sp/>use<sp/>profile<sp/>and<sp/>`Devel`<sp/>for<sp/>the<sp/>developer<sp/>profile.|</highlight></codeline>
<codeline><highlight class="normal">|`USE_DEFAULT`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|`AUTO`<sp/><sp/><sp/><sp/><sp/><sp/>|Whether<sp/>to<sp/>compile<sp/>the<sp/>embedded<sp/>versions<sp/>of<sp/>the<sp/>dependencies.<sp/>The<sp/>possible<sp/>values<sp/>are<sp/>`SYSTEM`<sp/>to<sp/>use<sp/>the<sp/>system<sp/>versions,<sp/>`EMBEDDED`<sp/>to<sp/>compile<sp/>the<sp/>version<sp/>provided<sp/>in<sp/>the<sp/>distribution<sp/>and<sp/>`AUTO`<sp/>to<sp/>prefer<sp/>a<sp/>system<sp/>version<sp/>but<sp/>fall-back<sp/>on<sp/>the<sp/>embedded<sp/>version<sp/>if<sp/>unavailable.|</highlight></codeline>
<codeline><highlight class="normal">|`BUILD_UNSTABLE`<sp/><sp/><sp/><sp/><sp/><sp/>|`OFF`<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|Whether<sp/>to<sp/>build<sp/>the<sp/>unstable<sp/>parts<sp/>of<sp/>the<sp/>distribution,<sp/>either<sp/>`ON`<sp/>or<sp/>`OFF`.|</highlight></codeline>
<codeline><highlight class="normal">|`CMAKE_BUILD_TYPE`<sp/><sp/><sp/><sp/>|`Release`<sp/><sp/><sp/>|Optimization<sp/>level<sp/>and<sp/>debug<sp/>verbosity.<sp/>The<sp/>possible<sp/>values<sp/>are<sp/>`Release`<sp/>and<sp/>`Debug`.|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>following<sp/>flags<sp/>define<sp/>which<sp/>features<sp/>of<sp/>the<sp/>distribution<sp/>to<sp/>enable<sp/>or<sp/>not.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|Flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|Default|Description|</highlight></codeline>
<codeline><highlight class="normal">|:------------------------|:------|:----------|</highlight></codeline>
<codeline><highlight class="normal">|`BUILD_FORTRAN`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|`ON`<sp/><sp/><sp/>|Build<sp/>the<sp/>Fortran<sp/>interface.|</highlight></codeline>
<codeline><highlight class="normal">|`BUILD_DECL_HDF5_PLUGIN`<sp/>|`ON`<sp/><sp/><sp/>|Build<sp/>the<sp/>Decl'HDF5<sp/>plug-in.|</highlight></codeline>
<codeline><highlight class="normal">|`BUILD_HDF5_PARALLEL`<sp/><sp/><sp/><sp/>|`ON`<sp/><sp/><sp/>|Build<sp/>the<sp/>parallel<sp/>version<sp/>of<sp/>the<sp/>Decl'HDF5<sp/>plugin<sp/>instead<sp/>of<sp/>the<sp/>sequential<sp/>one.|</highlight></codeline>
<codeline><highlight class="normal">|`BUILD_MPI_PLUGIN`<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|`ON`<sp/><sp/><sp/>|Build<sp/>the<sp/>MPI<sp/>plug-in.|</highlight></codeline>
<codeline><highlight class="normal">|`BUILD_TEST_PLUGIN`<sp/><sp/><sp/><sp/><sp/><sp/>|`ON`<sp/><sp/><sp/>|Build<sp/>the<sp/>Test<sp/>plug-in.|</highlight></codeline>
<codeline><highlight class="normal">|`BUILD_TRACE_PLUGIN`<sp/><sp/><sp/><sp/><sp/>|`ON`<sp/><sp/><sp/>|Build<sp/>the<sp/>Trace<sp/>plug-in.|</highlight></codeline>
<codeline><highlight class="normal">|`BUILD_USER_CODE_PLUGIN`<sp/>|`ON`<sp/><sp/><sp/>|Build<sp/>the<sp/>User-code<sp/>plug-in.|</highlight></codeline>
<codeline><highlight class="normal">|`BUILD_PYTHON`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|`OFF`<sp/><sp/>|Build<sp/>the<sp/>Python<sp/>interface.|</highlight></codeline>
<codeline><highlight class="normal">|`BUILD_DECL_SION_PLUGIN`<sp/>|`OFF`<sp/><sp/>|Build<sp/>the<sp/>decl'SION<sp/>plug-in.|</highlight></codeline>
<codeline><highlight class="normal">|`BUILD_FLOWVR_PLUGIN`<sp/><sp/><sp/><sp/>|`OFF`<sp/><sp/>|Build<sp/>the<sp/>FlowVR<sp/>plug-in.|</highlight></codeline>
<codeline><highlight class="normal">|`BUILD_FTI_PLUGIN`<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|`OFF`<sp/><sp/>|Build<sp/>the<sp/>FTI<sp/>plug-in.|</highlight></codeline>
<codeline><highlight class="normal">|`BUILD_PYCALL_PLUGIN`<sp/><sp/><sp/><sp/>|`OFF`<sp/><sp/>|Build<sp/>Pycall<sp/>plug-in.|</highlight></codeline>
<codeline><highlight class="normal">|`BUILD_TESTING`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|`OFF`<sp/><sp/>|Build<sp/>the<sp/>tests.|</highlight></codeline>
<codeline><highlight class="normal">|`BUILD_DOCUMENTATION`<sp/><sp/><sp/><sp/>|`OFF`<sp/><sp/>|Build<sp/>the<sp/>documentation<sp/>website.|</highlight></codeline>
<codeline><highlight class="normal">|`BUILD_INDENT`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|`OFF`<sp/><sp/>|Build<sp/>the<sp/>code<sp/>auto-indentation<sp/>tools.|</highlight></codeline>
<codeline><highlight class="normal">|`BUILD_CFG_VALIDATOR`<sp/><sp/><sp/><sp/>|`OFF`<sp/><sp/>|Build<sp/>the<sp/>PDI<sp/>configuration<sp/>validation<sp/>script.|</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">The<sp/>following<sp/>flags<sp/>define<sp/>whether<sp/>to:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>use<sp/>the<sp/>preinstalled<sp/>version<sp/>of<sp/>a<sp/>dependency<sp/>(`SYSTEM`),<sp/>it<sp/>will<sp/>be<sp/>looked<sp/>for</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>in<sp/>the<sp/>system<sp/>directories<sp/>and<sp/>those<sp/>specified<sp/>by<sp/>the<sp/>`CMAKE_PREFIX_PATH`<sp/>list,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>compile<sp/>the<sp/>version<sp/>of<sp/>the<sp/>dependency<sp/>provided<sp/>in<sp/>the<sp/>distribution</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>(`EMBEDDED`),</highlight></codeline>
<codeline><highlight class="normal">*<sp/>compile<sp/>another<sp/>version<sp/>of<sp/>the<sp/>dependency<sp/>(the<sp/>path<sp/>to<sp/>the<sp/>source<sp/>archive),</highlight></codeline>
<codeline><highlight class="normal">*<sp/>use<sp/>the<sp/>preinstalled<sp/>version<sp/>of<sp/>a<sp/>dependency<sp/>if<sp/>available<sp/>and<sp/>fallback<sp/>on<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>compilation<sp/>of<sp/>the<sp/>version<sp/>of<sp/>the<sp/>dependency<sp/>provided<sp/>in<sp/>the<sp/>distribution<sp/>if</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>no<sp/>preinstalled<sp/>version<sp/>is<sp/>found.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|Flag<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|Default<sp/><sp/><sp/>|Description|</highlight></codeline>
<codeline><highlight class="normal">|:-------------|:---------|:----------|</highlight></codeline>
<codeline><highlight class="normal">|`USE_Astyle`<sp/><sp/>|`AUTO`<sp/><sp/><sp/><sp/>|the<sp/>[astyle](http://astyle.sourceforge.net/)<sp/>tool.|</highlight></codeline>
<codeline><highlight class="normal">|`USE_Bpp`<sp/><sp/><sp/><sp/><sp/>|`EMBEDDED`|the<sp/>[bpp/zpp](https://github.com/jbigot/zpp)<sp/>preprocessor.|</highlight></codeline>
<codeline><highlight class="normal">|`USE_Doxygen`<sp/>|`AUTO`<sp/><sp/><sp/><sp/>|the<sp/>[doxygen](http://www.doxygen.nl/)<sp/>tool.|</highlight></codeline>
<codeline><highlight class="normal">|`USE_FlowVR`<sp/><sp/>|`AUTO`<sp/><sp/><sp/><sp/>|the<sp/>[FlowVR](https://gitlab.inria.fr/flowvr/flowvr-ex)<sp/>framework.|</highlight></codeline>
<codeline><highlight class="normal">|`USE_FTI`<sp/><sp/><sp/><sp/><sp/>|`AUTO`<sp/><sp/><sp/><sp/>|the<sp/>[FTI](https://github.com/leobago/fti)<sp/>library.|</highlight></codeline>
<codeline><highlight class="normal">|`USE_GTest`<sp/><sp/><sp/>|`EMBEDDED`|the<sp/>[googletest](https://github.com/google/googletest)<sp/>framework.|</highlight></codeline>
<codeline><highlight class="normal">|`USE_HDF5`<sp/><sp/><sp/><sp/>|`AUTO`<sp/><sp/><sp/><sp/>|the<sp/>[HDF5](https://www.hdfgroup.org/solutions/hdf5/)<sp/>library.|</highlight></codeline>
<codeline><highlight class="normal">|`USE_paraconf`|`AUTO`<sp/><sp/><sp/><sp/>|the<sp/>[paraconf](https://github.com/pdidev/paraconf)<sp/>library.|</highlight></codeline>
<codeline><highlight class="normal">|`USE_pybind11`|`AUTO`<sp/><sp/><sp/><sp/>|the<sp/>[pybind11](https://pybind11.readthedocs.io/en/stable)<sp/>library.|</highlight></codeline>
<codeline><highlight class="normal">|`USE_SIONlib`<sp/>|`AUTO`<sp/><sp/><sp/><sp/>|the<sp/>SIONlib<sp/>library.|</highlight></codeline>
<codeline><highlight class="normal">|`USE_spdlog`<sp/><sp/>|`AUTO`<sp/><sp/><sp/><sp/>|the<sp/>[spdlog](https://github.com/gabime/spdlog)<sp/>library.|</highlight></codeline>
<codeline><highlight class="normal">|`USE_yaml`<sp/><sp/><sp/><sp/>|`AUTO`<sp/><sp/><sp/><sp/>|the<sp/>[yaml](https://github.com/jbigot/zpp)<sp/>library.|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>dependecies<sp/>List<sp/>of<sp/>dependencies</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Here<sp/>is<sp/>a<sp/>list<sp/>of<sp/>all<sp/>dependencies<sp/>required<sp/>by<sp/>one<sp/>feature<sp/>or<sp/>another.</highlight></codeline>
<codeline><highlight class="normal">All<sp/>dependencies<sp/>are<sp/>provided<sp/>in<sp/>the<sp/>distribution<sp/>unless<sp/>specified<sp/>otherwise.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Dependencies<sp/>of<sp/>**%PDI**:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>**[cmake](https://cmake.org/)<sp/>version<sp/>3.5<sp/>or<sp/>above<sp/>(not<sp/>provided)**,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>**a<sp/>C<sp/>99<sp/>and<sp/>C++<sp/>14<sp/>compiler<sp/>such<sp/>as<sp/>[gcc](https://gcc.gnu.org/)<sp/>5.4<sp/>or<sp/>above<sp/>(not<sp/>provided)**,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>[paraconf](https://github.com/pdidev/paraconf)<sp/>library<sp/>version<sp/>0.4<sp/>or<sp/>above,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>[libyaml](https://pyyaml.org/wiki/LibYAML)<sp/>library<sp/>version<sp/>0.1<sp/>or<sp/>above,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>[spdlog](https://github.com/gabime/spdlog)<sp/>library.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Dependencies<sp/>of<sp/>**the<sp/>Fortran<sp/>API**:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>the<sp/>PDI<sp/>library,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>**a<sp/>Fortran<sp/>95<sp/>compiler<sp/>such<sp/>as<sp/>[gcc](https://gcc.gnu.org/)<sp/>5.4<sp/>or<sp/>above<sp/>(not<sp/>provided)**,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>**a<sp/>[python](https://www.python.org/)<sp/>interpreter<sp/>version<sp/>2.7<sp/>or<sp/>above<sp/>(not<sp/>provided)**,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>**a<sp/>[bash](https://www.gnu.org/software/bash/)<sp/>interpreter<sp/>(not<sp/>provided)**,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>[bpp/zpp](https://github.com/jbigot/zpp)<sp/>preprocessor<sp/>version<sp/>0.3.0<sp/>or<sp/>above.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Dependencies<sp/>of<sp/>**the<sp/>Decl'HDF5<sp/>plugin**:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>the<sp/>PDI<sp/>library,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>[HDF5](https://www.hdfgroup.org/solutions/hdf5/)<sp/>library<sp/>version<sp/>1.8<sp/>or<sp/>above,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>**a<sp/>MPI<sp/>implementation<sp/>for<sp/>the<sp/>parallel<sp/>version<sp/>of<sp/>the<sp/>plugin<sp/>(not<sp/>provided)**.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Dependencies<sp/>of<sp/>**the<sp/>MPI<sp/>plugin**:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>the<sp/>PDI<sp/>library,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>**a<sp/>MPI<sp/>implementation<sp/>(not<sp/>provided)**.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Dependencies<sp/>of<sp/>**the<sp/>Python<sp/>API**:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>the<sp/>PDI<sp/>library,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>**the<sp/>[python](https://www.python.org/)<sp/>development<sp/>environment<sp/>version<sp/>3.5<sp/>or<sp/>above<sp/>(not<sp/>provided)**,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>[pybind11](https://pybind11.readthedocs.io/en/stable)<sp/>library<sp/>version<sp/>2.3<sp/>or<sp/>above,</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Dependencies<sp/>of<sp/>**the<sp/>Decl'SION<sp/>plugin**:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>the<sp/>PDI<sp/>library,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[SIONlib](https://www.fz-juelich.de/ias/jsc/EN/Expertise/Support/Software/SIONlib/_node.html)<sp/>version<sp/>1.7.2<sp/>or<sp/>above,</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Dependencies<sp/>of<sp/>**the<sp/>FlowVR<sp/>plugin**:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>the<sp/>PDI<sp/>library,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[FlowVR](https://gitlab.inria.fr/flowvr/flowvr-ex).</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Dependencies<sp/>of<sp/>**the<sp/>FTI<sp/>plugin**:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>the<sp/>PDI<sp/>library,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>[FTI](https://github.com/leobago/fti)<sp/>library<sp/>version<sp/>1.3<sp/>or<sp/>above.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Dependencies<sp/>of<sp/>**the<sp/>Pycall<sp/>plugin**:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>the<sp/>PDI<sp/>library<sp/>with<sp/>python<sp/>API.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Dependencies<sp/>of<sp/>**the<sp/>tests**:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>the<sp/>PDI<sp/>library,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>**[cmake](https://www.cmake.org/)<sp/>version<sp/>3.10<sp/>or<sp/>above<sp/>(not<sp/>provided)**,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>[googletest](https://github.com/google/googletest)<sp/>framework<sp/>version<sp/>1.8<sp/>or<sp/>above,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[astyle](http://astyle.sourceforge.net/)<sp/>version<sp/>3.1<sp/>or<sp/>above.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Dependencies<sp/>of<sp/>**the<sp/>documentation<sp/>website<sp/>builder**:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>[doxygen](http://www.doxygen.nl/)<sp/>version<sp/>1.8<sp/>or<sp/>above.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Dependencies<sp/>of<sp/>**the<sp/>PDI<sp/>configuration<sp/>validation<sp/>tool**:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>**a<sp/>[python](https://www.python.org/)<sp/>interpreter<sp/>version<sp/>2.7<sp/>or<sp/>above<sp/>(not<sp/>provided)**,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>**the<sp/>[python<sp/>YAML](https://pyyaml.org/)<sp/>module<sp/>(not<sp/>provided)**.</highlight></codeline>
    </programlisting>
    <location file="Installation.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="logger_8h" kind="file" language="C++">
    <compoundname>logger.h</compoundname>
    <includes local="no">string</includes>
    <includes refid="pdi__fwd_8h" local="no">pdi/pdi_fwd.h</includes>
    <includes refid="paraconf__wrapper_8h" local="no">pdi/paraconf_wrapper.h</includes>
    <includedby refid="plugin_8h" local="no">plugin.h</includedby>
    <incdepgraph>
      <node id="8">
        <label>pdi/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="10">
        <label>functional</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="9">
        <label>pdi/paraconf_wrapper.h</label>
        <link refid="paraconf__wrapper_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>pdi/export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="3">
        <label>pdi/pdi_fwd.h</label>
        <link refid="pdi__fwd_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>paraconf.h</label>
      </node>
      <node id="5">
        <label>pdi.h</label>
        <link refid="pdi_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>logger.h</label>
        <link refid="logger_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>plugin.h</label>
        <link refid="plugin_8h_source"/>
      </node>
      <node id="1">
        <label>logger.h</label>
        <link refid="logger_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacePDI">PDI</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2018<sp/>Institute<sp/>of<sp/>Bioorganic<sp/>Chemistry<sp/>Polish<sp/>Academy<sp/>of<sp/>Science<sp/>(PSNC)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>CEA<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>"AS<sp/>IS",<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"/></codeline>
<codeline lineno="24"><highlight class="normal"/></codeline>
<codeline lineno="25"><highlight class="normal"/><highlight class="preprocessor">#ifndef<sp/>PDI_LOGGER_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="26"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_LOGGER_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="27"><highlight class="normal"/></codeline>
<codeline lineno="28"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="29"><highlight class="normal"/></codeline>
<codeline lineno="30"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/pdi_fwd.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="31"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/paraconf_wrapper.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="32"><highlight class="normal"/></codeline>
<codeline lineno="33"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacePDI" kindref="compound">PDI</ref><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"/></codeline>
<codeline lineno="42"><highlight class="normal"><ref refid="namespacePDI_1a9c906943ee4d374699c804e1d94facd2" kindref="member">Logger_sptr</ref><sp/>PDI_EXPORT<sp/><ref refid="namespacePDI_1a42e9ee1648fdf7f23e961974261fc480" kindref="member">configure_logger</ref>(PC_tree_t<sp/>config,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"/></codeline>
<codeline lineno="44"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>PDI</highlight><highlight class="normal"/></codeline>
<codeline lineno="45"><highlight class="normal"/></codeline>
<codeline lineno="46"><highlight class="normal"/><highlight class="preprocessor">#endif<sp/>//<sp/>PDI_LOGGER_H_</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/logger.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="paraconf__wrapper_8h" kind="file" language="C++">
    <compoundname>paraconf_wrapper.h</compoundname>
    <includes local="no">functional</includes>
    <includes local="no">string</includes>
    <includes local="no">paraconf.h</includes>
    <includes refid="pdi__fwd_8h" local="no">pdi/pdi_fwd.h</includes>
    <includedby refid="expression_8h" local="no">expression.h</includedby>
    <includedby refid="logger_8h" local="no">logger.h</includedby>
    <incdepgraph>
      <node id="9">
        <label>pdi/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="2">
        <label>functional</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="1">
        <label>paraconf_wrapper.h</label>
        <link refid="paraconf__wrapper_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>pdi/export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="5">
        <label>pdi/pdi_fwd.h</label>
        <link refid="pdi__fwd_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>paraconf.h</label>
      </node>
      <node id="7">
        <label>pdi.h</label>
        <link refid="pdi_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>paraconf_wrapper.h</label>
        <link refid="paraconf__wrapper_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>plugin.h</label>
        <link refid="plugin_8h_source"/>
      </node>
      <node id="2">
        <label>expression.h</label>
        <link refid="expression_8h_source"/>
      </node>
      <node id="3">
        <label>logger.h</label>
        <link refid="logger_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structPDI_1_1Paraconf__wrapper" prot="public">PDI::Paraconf_wrapper</innerclass>
    <innernamespace refid="namespacePDI">PDI</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>C++ wrapper for the paraconf API </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2015-2019<sp/>Commissariat<sp/>a<sp/>l'energie<sp/>atomique<sp/>et<sp/>aux<sp/>energies<sp/>alternatives<sp/>(CEA)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>CEA<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>"AS<sp/>IS",<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"/></codeline>
<codeline lineno="24"><highlight class="normal"/></codeline>
<codeline lineno="29"><highlight class="preprocessor">#ifndef<sp/>PDI_PARACONF_WRAPPER_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="30"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_PARACONF_WRAPPER_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="31"><highlight class="normal"/></codeline>
<codeline lineno="32"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="33"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="34"><highlight class="normal"/></codeline>
<codeline lineno="35"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;paraconf.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="36"><highlight class="normal"/></codeline>
<codeline lineno="37"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/pdi_fwd.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="38"><highlight class="normal"/></codeline>
<codeline lineno="39"><highlight class="normal"/></codeline>
<codeline lineno="40"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacePDI" kindref="compound">PDI</ref><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"/></codeline>
<codeline lineno="45" refid="structPDI_1_1Paraconf__wrapper" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PDI_EXPORT<sp/><ref refid="structPDI_1_1Paraconf__wrapper" kindref="compound">Paraconf_wrapper</ref><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"/></codeline>
<codeline lineno="47" refid="structPDI_1_1Paraconf__wrapper_1a56789d196b0927308bf1f89625b8eb58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PC_errhandler_t<sp/><ref refid="structPDI_1_1Paraconf__wrapper_1a56789d196b0927308bf1f89625b8eb58" kindref="member">m_handler</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structPDI_1_1Paraconf__wrapper" kindref="compound">Paraconf_wrapper</ref>();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="structPDI_1_1Paraconf__wrapper" kindref="compound">Paraconf_wrapper</ref>();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal">};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"/></codeline>
<codeline lineno="67"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PDI_EXPORT<sp/><ref refid="namespacePDI_1a00f2173a7fb0dc37655e9e39756e135e" kindref="member">len</ref>(PC_tree_t<sp/>tree);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"/></codeline>
<codeline lineno="81"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PDI_EXPORT<sp/><ref refid="namespacePDI_1a00f2173a7fb0dc37655e9e39756e135e" kindref="member">len</ref>(PC_tree_t<sp/>tree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dflt);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"/></codeline>
<codeline lineno="90"><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>PDI_EXPORT<sp/><ref refid="namespacePDI_1ac4e2b53893618edfb9bff90c65c4ee01" kindref="member">to_long</ref>(PC_tree_t<sp/>tree);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"/></codeline>
<codeline lineno="100"><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>PDI_EXPORT<sp/><ref refid="namespacePDI_1ac4e2b53893618edfb9bff90c65c4ee01" kindref="member">to_long</ref>(PC_tree_t<sp/>tree,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dflt);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"/></codeline>
<codeline lineno="109"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>PDI_EXPORT<sp/><ref refid="namespacePDI_1a9cd51216ced09ea3b6c63b86f8f5950c" kindref="member">to_double</ref>(PC_tree_t<sp/>tree);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"/></codeline>
<codeline lineno="119"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>PDI_EXPORT<sp/><ref refid="namespacePDI_1a9cd51216ced09ea3b6c63b86f8f5950c" kindref="member">to_double</ref>(PC_tree_t<sp/>tree,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dflt);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"/></codeline>
<codeline lineno="128"><highlight class="normal">std::string<sp/>PDI_EXPORT<sp/><ref refid="namespacePDI_1ae1a842c5cdb57b5185c035de9a99c3c8" kindref="member">to_string</ref>(PC_tree_t<sp/>tree);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"/></codeline>
<codeline lineno="138"><highlight class="normal">std::string<sp/>PDI_EXPORT<sp/><ref refid="namespacePDI_1ae1a842c5cdb57b5185c035de9a99c3c8" kindref="member">to_string</ref>(PC_tree_t<sp/>tree,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dflt);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"/></codeline>
<codeline lineno="147"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PDI_EXPORT<sp/><ref refid="namespacePDI_1a120efc71a80014361117d6a3f6822a92" kindref="member">to_bool</ref>(PC_tree_t<sp/>tree);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"/></codeline>
<codeline lineno="157"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PDI_EXPORT<sp/><ref refid="namespacePDI_1a120efc71a80014361117d6a3f6822a92" kindref="member">to_bool</ref>(PC_tree_t<sp/>tree,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dflt);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"/></codeline>
<codeline lineno="159"><highlight class="normal"/></codeline>
<codeline lineno="165"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PDI_EXPORT<sp/><ref refid="namespacePDI_1a06633db186ab479dbb26d5933a6a43bc" kindref="member">is_list</ref>(PC_tree_t<sp/>tree);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"/></codeline>
<codeline lineno="172"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PDI_EXPORT<sp/><ref refid="namespacePDI_1a86fb4c3a71e29599a21350e00cbba655" kindref="member">is_map</ref>(PC_tree_t<sp/>tree);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"/></codeline>
<codeline lineno="179"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PDI_EXPORT<sp/><ref refid="namespacePDI_1ad14a52d54a9db1a67744827fb1d1eaa4" kindref="member">is_scalar</ref>(PC_tree_t<sp/>tree);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"/></codeline>
<codeline lineno="186"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDI_EXPORT<sp/><ref refid="namespacePDI_1aa497f0078e25af462c413eafea53a138" kindref="member">each</ref>(PC_tree_t<sp/>tree,<sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(PC_tree_t)&gt;<sp/>operation);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"/></codeline>
<codeline lineno="194"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDI_EXPORT<sp/><ref refid="namespacePDI_1a52a22706f3987319f51859ce8319c074" kindref="member">opt_each</ref>(PC_tree_t<sp/>tree,<sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(PC_tree_t)&gt;<sp/>operation);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"/></codeline>
<codeline lineno="201"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDI_EXPORT<sp/><ref refid="namespacePDI_1aa497f0078e25af462c413eafea53a138" kindref="member">each</ref>(PC_tree_t<sp/>tree,<sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(PC_tree_t,PC_tree_t)&gt;<sp/>operation);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"/></codeline>
<codeline lineno="203"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>PDI</highlight><highlight class="normal"/></codeline>
<codeline lineno="204"><highlight class="normal"/></codeline>
<codeline lineno="205"><highlight class="normal"/><highlight class="preprocessor">#endif<sp/>//<sp/>PDI_PARACONF_WRAPPER_H_</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/paraconf_wrapper.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="pdi_8h" kind="file" language="C++">
    <compoundname>pdi.h</compoundname>
    <includes local="no">paraconf.h</includes>
    <includes refid="export_8h" local="no">pdi/export.h</includes>
    <includes refid="version_8h" local="no">pdi/version.h</includes>
    <includedby refid="pdi__fwd_8h" local="no">pdi_fwd.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>pdi/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="3">
        <label>pdi/export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="2">
        <label>paraconf.h</label>
      </node>
      <node id="1">
        <label>pdi.h</label>
        <link refid="pdi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7">
        <label>context.h</label>
        <link refid="context_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ref_any.h</label>
        <link refid="ref__any_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>paraconf_wrapper.h</label>
        <link refid="paraconf__wrapper_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>data_descriptor.h</label>
        <link refid="data__descriptor_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>pointer_datatype.h</label>
        <link refid="pointer__datatype_8h_source"/>
      </node>
      <node id="11">
        <label>record_datatype.h</label>
        <link refid="record__datatype_8h_source"/>
      </node>
      <node id="14">
        <label>error.h</label>
        <link refid="error_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>plugin.h</label>
        <link refid="plugin_8h_source"/>
      </node>
      <node id="3">
        <label>array_datatype.h</label>
        <link refid="array__datatype_8h_source"/>
      </node>
      <node id="2">
        <label>pdi_fwd.h</label>
        <link refid="pdi__fwd_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>scalar_datatype.h</label>
        <link refid="scalar__datatype_8h_source"/>
      </node>
      <node id="13">
        <label>datatype_template.h</label>
        <link refid="datatype__template_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>expression.h</label>
        <link refid="expression_8h_source"/>
      </node>
      <node id="1">
        <label>pdi.h</label>
        <link refid="pdi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>logger.h</label>
        <link refid="logger_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>datatype.h</label>
        <link refid="datatype_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>context_proxy.h</label>
        <link refid="context__proxy_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structPDI__errhandler__s" prot="public">PDI_errhandler_s</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__error_1ga85517a933cd17af89b7b921c6671ff54" prot="public" static="no" strong="no">
        <type/>
        <name>PDI_status_e</name>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54a752e28c3de06c8d7c6e270a7c7eef906" prot="public">
          <name>PDI_OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>everything went well </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54a167ca60326e4c984b2d84d5bb226b854" prot="public">
          <name>PDI_UNAVAILABLE</name>
          <briefdescription>
<para>on an input call, no such data is available </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54a65609429c408deee8f6ad265b6549518" prot="public">
          <name>PDI_ERR_CONFIG</name>
          <briefdescription>
<para>The configuration file is invalid. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54a3f8ad0c92399f5fd4d03a69bf5cc1eb7" prot="public">
          <name>PDI_ERR_VALUE</name>
          <briefdescription>
<para>A value expression is invalid. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54ad6308770d341201db122e30829c718af" prot="public">
          <name>PDI_ERR_PLUGIN</name>
          <briefdescription>
<para>Tried to load a non-existing plugin. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54ab4f8142de69e35811e0e1f231e544534" prot="public">
          <name>PDI_ERR_IMPL</name>
          <briefdescription>
<para>Implementation limitation (typically an unimplemented feature) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54a9b282d8284fbacc7a4fd81e81964260b" prot="public">
          <name>PDI_ERR_SYSTEM</name>
          <briefdescription>
<para>A system error occured (OS, etc.) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54a501534fa48095e939e2d553cc72640b7" prot="public">
          <name>PDI_ERR_STATE</name>
          <briefdescription>
<para>A call to a function has been made at a wrong time (e.g. </para>
          </briefdescription>
          <detaileddescription>
<para>closing an unopened transaction) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54ae573fb10e871f40c2b37182ff415f454" prot="public">
          <name>PDI_ERR_RIGHT</name>
          <briefdescription>
<para>A conflict of onwership over a content has been raised. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54a7eb3671f2fe468efe6b23291d3a11ade" prot="public">
          <name>PDI_ERR_TYPE</name>
          <briefdescription>
<para>Invalid type error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Error codes of <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="77" column="26" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" bodystart="77" bodyend="101"/>
      </memberdef>
      <memberdef kind="enum" id="group__annotation_1gafa02617bd8d016f3f931adc107b38027" prot="public" static="no" strong="no">
        <type/>
        <name>PDI_inout_e</name>
        <enumvalue id="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a90e36abac02b52f568e5cd3100e77d7a" prot="public">
          <name>PDI_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>No data transfert. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a70fa3cd94e02b997794d9eaaea34b0b6" prot="public">
          <name>PDI_IN</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>data tranfer from <ref refid="namespacePDI" kindref="compound">PDI</ref> to the main code </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" prot="public">
          <name>PDI_OUT</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>data transfer from the main code to <ref refid="namespacePDI" kindref="compound">PDI</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a5cf752cb5cd43b4ae3d7590af61c9939" prot="public">
          <name>PDI_INOUT</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>data transfer in both direction </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Access directions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="187" column="25" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" bodystart="187" bodyend="197"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__error_1ga9e635248278d0dda3d5df7142a720f81" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* PDI_errfunc_f) (PDI_status_t status, const char *message, void *context)</definition>
        <argsstring>)(PDI_status_t status, const char *message, void *context)</argsstring>
        <name>PDI_errfunc_f</name>
        <briefdescription>
<para>Type of a callback function used when an error occurs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>the error code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the human-readable error message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>a user-provided context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="108" column="9" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__error_1ga071fa4de35e77bd21db91b92659c7341" prot="public" static="no" mutable="no">
        <type>const PDI_errhandler_t</type>
        <definition>const PDI_errhandler_t PDI_ASSERT_HANDLER</definition>
        <argsstring/>
        <name>PDI_ASSERT_HANDLER</name>
        <briefdescription>
<para>Prints the error message and aborts if the status is invalid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="125" column="32" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="125" declcolumn="32"/>
      </memberdef>
      <memberdef kind="variable" id="group__error_1ga9807c58ccf192137c930993273a31cf9" prot="public" static="no" mutable="no">
        <type>const PDI_errhandler_t</type>
        <definition>const PDI_errhandler_t PDI_WARN_HANDLER</definition>
        <argsstring/>
        <name>PDI_WARN_HANDLER</name>
        <briefdescription>
<para>Prints the error message and continue if the status is invalid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="129" column="32" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="129" declcolumn="32"/>
      </memberdef>
      <memberdef kind="variable" id="group__error_1ga5d883a6c102ceeb7d3527201df2ab877" prot="public" static="no" mutable="no">
        <type>const PDI_errhandler_t</type>
        <definition>const PDI_errhandler_t PDI_NULL_HANDLER</definition>
        <argsstring/>
        <name>PDI_NULL_HANDLER</name>
        <briefdescription>
<para>Does nothing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="133" column="32" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="133" declcolumn="32"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__error_1gad969c54dedc6a5e579dc8f9c894a92ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* PDI_errmsg</definition>
        <argsstring>(void)</argsstring>
        <name>PDI_errmsg</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return a human-readabe message describing the last error that occured in <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="138" column="13" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="138" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__error_1ga01fffcbd0a27c1fe0624cb8d64372a25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_errhandler_t</type>
        <definition>PDI_errhandler_t PDI_errhandler</definition>
        <argsstring>(PDI_errhandler_t handler)</argsstring>
        <name>PDI_errhandler</name>
        <param>
          <type>PDI_errhandler_t</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Sets the error handler to use. </para>
        </briefdescription>
        <detaileddescription>
<para>PDI_asserthandler is the default handler before this function is called</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the new handler to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the previous handler </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="147" column="19" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="147" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__init__final_1ga3dc660be40c93c169337e3d2692b2ed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_init</definition>
        <argsstring>(PC_tree_t conf)</argsstring>
        <name>PDI_init</name>
        <param>
          <type>PC_tree_t</type>
          <declname>conf</declname>
        </param>
        <briefdescription>
<para>Initializes <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">conf</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="162" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="162" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__init__final_1ga7995fbda2099950ed4ffc7fd4c0bb969" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_finalize</definition>
        <argsstring>(void)</argsstring>
        <name>PDI_finalize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Finalizes <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an error status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="167" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="167" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__init__final_1gaddd32ea29cf9dfa21587abbd0b5a8fd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_version</definition>
        <argsstring>(unsigned long *provided, unsigned long expected)</argsstring>
        <name>PDI_version</name>
        <param>
          <type>unsigned long *</type>
          <declname>provided</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>expected</declname>
        </param>
        <briefdescription>
<para>Checks <ref refid="namespacePDI" kindref="compound">PDI</ref> API version. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">provided</parametername>
</parameternamelist>
<parameterdescription>
<para>version if non-null it is filled with the provided API version </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">expected</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-zero the expected API version </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status if the expected version is incompatible with the provided one </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="176" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="176" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__annotation_1ga34e34cede8627c47c07e6ede997e37fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_share</definition>
        <argsstring>(const char *name, void *data, PDI_inout_t access)</argsstring>
        <name>PDI_share</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>PDI_inout_t</type>
          <declname>access</declname>
        </param>
        <briefdescription>
<para>Shares some data with <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The user code should not modify it before a call to either PDI_release or PDI_reclaim. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the data name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">data</parametername>
</parameternamelist>
<parameterdescription>
<para>the accessed data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">access</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the data can be accessed for read or write by <ref refid="namespacePDI" kindref="compound">PDI</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status </para>
</simplesect>
<simplesect kind="pre"><para>the user code owns the data buffer </para>
</simplesect>
<simplesect kind="post"><para>ownership of the data buffer is shared between <ref refid="namespacePDI" kindref="compound">PDI</ref> and the user code</para>
</simplesect>
the access parameter is a binary OR of PDI_IN &amp; PDI_OUT.<itemizedlist>
<listitem><para>PDI_IN means <ref refid="namespacePDI" kindref="compound">PDI</ref> can set the buffer content</para>
</listitem><listitem><para>PDI_OUT means the buffer contains data that can be accessed by <ref refid="namespacePDI" kindref="compound">PDI</ref> </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="214" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="214" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__annotation_1ga8dcd0c81d7697ea473a55bd57efb717d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_access</definition>
        <argsstring>(const char *name, void **buffer, PDI_inout_t inout)</argsstring>
        <name>PDI_access</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>PDI_inout_t</type>
          <declname>inout</declname>
        </param>
        <briefdescription>
<para>Requests for <ref refid="namespacePDI" kindref="compound">PDI</ref> to access a data buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the data name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the accessed data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">inout</parametername>
</parameternamelist>
<parameterdescription>
<para>the access properties (PDI_IN, PDI_OUT, PDI_INOUT) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="namespacePDI" kindref="compound">PDI</ref> owns the data buffer </para>
</simplesect>
<simplesect kind="post"><para>ownership of the data buffer is shared between <ref refid="namespacePDI" kindref="compound">PDI</ref> and the user code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="224" column="16" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="224" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__annotation_1ga001117ae897dd4e4a25c312b5d00c43a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_release</definition>
        <argsstring>(const char *name)</argsstring>
        <name>PDI_release</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Releases ownership of a data shared with <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespacePDI" kindref="compound">PDI</ref> is then responsible to free the associated memory whenever necessary. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the data to release </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status </para>
</simplesect>
<simplesect kind="pre"><para>ownership of the data buffer is shared between <ref refid="namespacePDI" kindref="compound">PDI</ref> and the user code </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="namespacePDI" kindref="compound">PDI</ref> owns the data buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="233" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="233" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__annotation_1gabf58b7c146cbf7e3341245f60cec0f7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_reclaim</definition>
        <argsstring>(const char *name)</argsstring>
        <name>PDI_reclaim</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Reclaims ownership of a data buffer shared with <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespacePDI" kindref="compound">PDI</ref> does not manage the buffer memory anymore. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the data to reclaim </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status </para>
</simplesect>
<simplesect kind="pre"><para>ownership of the data buffer is shared between <ref refid="namespacePDI" kindref="compound">PDI</ref> and the user code </para>
</simplesect>
<simplesect kind="post"><para>the user code owns the data buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="242" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="242" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__annotation_1gab21d59fd8d6532f6b8d7a4ac69a2388b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_event</definition>
        <argsstring>(const char *event)</argsstring>
        <name>PDI_event</name>
        <param>
          <type>const char *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Triggers a <ref refid="namespacePDI" kindref="compound">PDI</ref> "event". </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>the event name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="248" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="248" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_expose</definition>
        <argsstring>(const char *name, void *data, PDI_inout_t access)</argsstring>
        <name>PDI_expose</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>PDI_inout_t</type>
          <declname>access</declname>
        </param>
        <briefdescription>
<para>Shortly exposes some data to <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to PDI_share + PDI_reclaim. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the data name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>the exposed data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">access</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the data can be accessed for read or write by <ref refid="namespacePDI" kindref="compound">PDI</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="263" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="263" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__hl__annotation_1gae5c670b378e423e3083122f62c1f0a59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_multi_expose</definition>
        <argsstring>(const char *event_name, const char *name, void *data, PDI_inout_t access,...)</argsstring>
        <name>PDI_multi_expose</name>
        <param>
          <type>const char *</type>
          <declname>event_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>PDI_inout_t</type>
          <declname>access</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Performs multiple exposes at once. </para>
        </briefdescription>
        <detaileddescription>
<para>All the data is shared in order they were specified and reclaimed in reversed order after an event is triggered.</para>
<para>NULL argument indicates an end of the list.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the event that will be triggered when all data become available </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the data name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>the exposed data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">access</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the data can be accessed for read or write by <ref refid="namespacePDI" kindref="compound">PDI</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>(additional arguments) additional list of data to expose, each should contain name, data and access, NULL argument inidactes an end of the list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="280" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="280" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__hl__annotation_1ga39bceccdb0528be91cc79df784a161bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_transaction_begin</definition>
        <argsstring>(const char *name)</argsstring>
        <name>PDI_transaction_begin</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Begin a transaction in which all PDI_expose calls are grouped. </para>
        </briefdescription>
        <detaileddescription>
<para>This requires a call to PDI_transaction_end to close the transaction.</para>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>the transaction part of the API is deprecated, the PDI_multi_expose function should be used instead.</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref> the function used to expose data inside the transaction </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__hl__annotation_1gac11c4c2885e34660a40f789f049d3d34" kindref="member">PDI_transaction_end</ref> the function used to end the transaction</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the transaction (an event thus named will be triggered when all data become available) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="296" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="296" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__hl__annotation_1gac11c4c2885e34660a40f789f049d3d34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_transaction_end</definition>
        <argsstring>(void)</argsstring>
        <name>PDI_transaction_end</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Ends the previously opened transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>the transaction part of the API is deprecated, the PDI_multi_expose function should be used instead.</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__hl__annotation_1ga39bceccdb0528be91cc79df784a161bc" kindref="member">PDI_transaction_begin</ref> the function used to start the transaction </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref> the function used to expose data inside the transaction</para>
</simplesect>
<simplesect kind="return"><para>an error status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="308" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="308" declcolumn="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>C user API</para>
<para>The user facing API is the interface offered by <ref refid="namespacePDI" kindref="compound">PDI</ref> to C application developers. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/>Copyright<sp/>(C)<sp/>2015-2019<sp/>Commissariat<sp/>a<sp/>l'energie<sp/>atomique<sp/>et<sp/>aux<sp/>energies<sp/>alternatives<sp/>(CEA)</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment">*<sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>CEA<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/><sp/><sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>"AS<sp/>IS",<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment">*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment">*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment">******************************************************************************/</highlight><highlight class="normal"/></codeline>
<codeline lineno="24"><highlight class="normal"/></codeline>
<codeline lineno="59"><highlight class="preprocessor">#ifndef<sp/>PDI_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="60"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="61"><highlight class="normal"/></codeline>
<codeline lineno="62"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;paraconf.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="63"><highlight class="normal"/></codeline>
<codeline lineno="64"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/export.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="65"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/version.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="66"><highlight class="normal"/></codeline>
<codeline lineno="67"><highlight class="normal"/><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"/></codeline>
<codeline lineno="68"><highlight class="normal"/><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">"C"</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"/><highlight class="preprocessor">#endif</highlight><highlight class="normal"/></codeline>
<codeline lineno="70"><highlight class="normal"/></codeline>
<codeline lineno="77" refid="group__error_1ga85517a933cd17af89b7b921c6671ff54" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__error_1ga85517a933cd17af89b7b921c6671ff54" kindref="member">PDI_status_e</ref><sp/>{</highlight></codeline>
<codeline lineno="79" refid="group__error_1gga85517a933cd17af89b7b921c6671ff54a752e28c3de06c8d7c6e270a7c7eef906" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__error_1gga85517a933cd17af89b7b921c6671ff54a752e28c3de06c8d7c6e270a7c7eef906" kindref="member">PDI_OK</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="81" refid="group__error_1gga85517a933cd17af89b7b921c6671ff54a167ca60326e4c984b2d84d5bb226b854" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__error_1gga85517a933cd17af89b7b921c6671ff54a167ca60326e4c984b2d84d5bb226b854" kindref="member">PDI_UNAVAILABLE</ref>,</highlight></codeline>
<codeline lineno="83" refid="group__error_1gga85517a933cd17af89b7b921c6671ff54a65609429c408deee8f6ad265b6549518" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__error_1gga85517a933cd17af89b7b921c6671ff54a65609429c408deee8f6ad265b6549518" kindref="member">PDI_ERR_CONFIG</ref>,</highlight></codeline>
<codeline lineno="85" refid="group__error_1gga85517a933cd17af89b7b921c6671ff54a3f8ad0c92399f5fd4d03a69bf5cc1eb7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__error_1gga85517a933cd17af89b7b921c6671ff54a3f8ad0c92399f5fd4d03a69bf5cc1eb7" kindref="member">PDI_ERR_VALUE</ref>,</highlight></codeline>
<codeline lineno="87" refid="group__error_1gga85517a933cd17af89b7b921c6671ff54ad6308770d341201db122e30829c718af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__error_1gga85517a933cd17af89b7b921c6671ff54ad6308770d341201db122e30829c718af" kindref="member">PDI_ERR_PLUGIN</ref>,</highlight></codeline>
<codeline lineno="89" refid="group__error_1gga85517a933cd17af89b7b921c6671ff54ab4f8142de69e35811e0e1f231e544534" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__error_1gga85517a933cd17af89b7b921c6671ff54ab4f8142de69e35811e0e1f231e544534" kindref="member">PDI_ERR_IMPL</ref>,</highlight></codeline>
<codeline lineno="91" refid="group__error_1gga85517a933cd17af89b7b921c6671ff54a9b282d8284fbacc7a4fd81e81964260b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__error_1gga85517a933cd17af89b7b921c6671ff54a9b282d8284fbacc7a4fd81e81964260b" kindref="member">PDI_ERR_SYSTEM</ref>,</highlight></codeline>
<codeline lineno="95" refid="group__error_1gga85517a933cd17af89b7b921c6671ff54a501534fa48095e939e2d553cc72640b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__error_1gga85517a933cd17af89b7b921c6671ff54a501534fa48095e939e2d553cc72640b7" kindref="member">PDI_ERR_STATE</ref>,</highlight></codeline>
<codeline lineno="97" refid="group__error_1gga85517a933cd17af89b7b921c6671ff54ae573fb10e871f40c2b37182ff415f454" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__error_1gga85517a933cd17af89b7b921c6671ff54ae573fb10e871f40c2b37182ff415f454" kindref="member">PDI_ERR_RIGHT</ref>,</highlight></codeline>
<codeline lineno="99" refid="group__error_1gga85517a933cd17af89b7b921c6671ff54a7eb3671f2fe468efe6b23291d3a11ade" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__error_1gga85517a933cd17af89b7b921c6671ff54a7eb3671f2fe468efe6b23291d3a11ade" kindref="member">PDI_ERR_TYPE</ref></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal">}<sp/>PDI_status_t;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"/></codeline>
<codeline lineno="108" refid="group__error_1ga9e635248278d0dda3d5df7142a720f81" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__error_1ga9e635248278d0dda3d5df7142a720f81" kindref="member">PDI_errfunc_f</ref>)(PDI_status_t<sp/>status,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"/></codeline>
<codeline lineno="112" refid="structPDI__errhandler__s" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structPDI__errhandler__s" kindref="compound">PDI_errhandler_s</ref><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"/></codeline>
<codeline lineno="115" refid="structPDI__errhandler__s_1aeb6ecc29ac9110c09823eacbacf4c9c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__error_1ga9e635248278d0dda3d5df7142a720f81" kindref="member">PDI_errfunc_f</ref><sp/><ref refid="structPDI__errhandler__s_1aeb6ecc29ac9110c09823eacbacf4c9c8" kindref="member">func</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118" refid="structPDI__errhandler__s_1a442f211babbc93c5625050dcf0159b84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structPDI__errhandler__s_1a442f211babbc93c5625050dcf0159b84" kindref="member">context</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="120"><highlight class="normal">}<sp/>PDI_errhandler_t;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"/></codeline>
<codeline lineno="122"><highlight class="normal"/></codeline>
<codeline lineno="125"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PDI_errhandler_t<sp/>PDI_EXPORT<sp/><ref refid="group__error_1ga071fa4de35e77bd21db91b92659c7341" kindref="member">PDI_ASSERT_HANDLER</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"/></codeline>
<codeline lineno="129"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PDI_errhandler_t<sp/>PDI_EXPORT<sp/><ref refid="group__error_1ga9807c58ccf192137c930993273a31cf9" kindref="member">PDI_WARN_HANDLER</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"/></codeline>
<codeline lineno="133"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PDI_errhandler_t<sp/>PDI_EXPORT<sp/><ref refid="group__error_1ga5d883a6c102ceeb7d3527201df2ab877" kindref="member">PDI_NULL_HANDLER</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"/></codeline>
<codeline lineno="135"><highlight class="normal"/></codeline>
<codeline lineno="138"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>PDI_EXPORT*<sp/><ref refid="group__error_1gad969c54dedc6a5e579dc8f9c894a92ff" kindref="member">PDI_errmsg</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"/></codeline>
<codeline lineno="147"><highlight class="normal">PDI_errhandler_t<sp/>PDI_EXPORT<sp/><ref refid="group__error_1ga01fffcbd0a27c1fe0624cb8d64372a25" kindref="member">PDI_errhandler</ref>(PDI_errhandler_t<sp/>handler);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"/></codeline>
<codeline lineno="150"/>
<codeline lineno="162"><highlight class="normal">PDI_status_t<sp/>PDI_EXPORT<sp/><ref refid="group__init__final_1ga3dc660be40c93c169337e3d2692b2ed0" kindref="member">PDI_init</ref>(PC_tree_t<sp/>conf);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"/></codeline>
<codeline lineno="167"><highlight class="normal">PDI_status_t<sp/>PDI_EXPORT<sp/><ref refid="group__init__final_1ga7995fbda2099950ed4ffc7fd4c0bb969" kindref="member">PDI_finalize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"/></codeline>
<codeline lineno="176"><highlight class="normal">PDI_status_t<sp/>PDI_EXPORT<sp/><ref refid="group__init__final_1gaddd32ea29cf9dfa21587abbd0b5a8fd7" kindref="member">PDI_version</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>provided,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>expected);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"/></codeline>
<codeline lineno="179"/>
<codeline lineno="187" refid="group__annotation_1gafa02617bd8d016f3f931adc107b38027" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__annotation_1gafa02617bd8d016f3f931adc107b38027" kindref="member">PDI_inout_e</ref><sp/>{</highlight></codeline>
<codeline lineno="189" refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a90e36abac02b52f568e5cd3100e77d7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a90e36abac02b52f568e5cd3100e77d7a" kindref="member">PDI_NONE</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="191" refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a70fa3cd94e02b997794d9eaaea34b0b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a70fa3cd94e02b997794d9eaaea34b0b6" kindref="member">PDI_IN</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="193" refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="195" refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a5cf752cb5cd43b4ae3d7590af61c9939" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a5cf752cb5cd43b4ae3d7590af61c9939" kindref="member">PDI_INOUT</ref><sp/>=<sp/>3</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="197"><highlight class="normal">}<sp/>PDI_inout_t;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"/></codeline>
<codeline lineno="199"><highlight class="normal"/></codeline>
<codeline lineno="214"><highlight class="normal">PDI_status_t<sp/>PDI_EXPORT<sp/><ref refid="group__annotation_1ga34e34cede8627c47c07e6ede997e37fe" kindref="member">PDI_share</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/>PDI_inout_t<sp/>access);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"/></codeline>
<codeline lineno="224"><highlight class="normal">PDI_status_t<sp/><sp/>PDI_EXPORT<sp/><ref refid="group__annotation_1ga8dcd0c81d7697ea473a55bd57efb717d" kindref="member">PDI_access</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>buffer,<sp/>PDI_inout_t<sp/>inout);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"/></codeline>
<codeline lineno="233"><highlight class="normal">PDI_status_t<sp/>PDI_EXPORT<sp/><ref refid="group__annotation_1ga001117ae897dd4e4a25c312b5d00c43a" kindref="member">PDI_release</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"/></codeline>
<codeline lineno="242"><highlight class="normal">PDI_status_t<sp/>PDI_EXPORT<sp/><ref refid="group__annotation_1gabf58b7c146cbf7e3341245f60cec0f7e" kindref="member">PDI_reclaim</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"/></codeline>
<codeline lineno="248"><highlight class="normal">PDI_status_t<sp/>PDI_EXPORT<sp/><ref refid="group__annotation_1gab21d59fd8d6532f6b8d7a4ac69a2388b" kindref="member">PDI_event</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>event);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"/></codeline>
<codeline lineno="251"/>
<codeline lineno="263"><highlight class="normal">PDI_status_t<sp/>PDI_EXPORT<sp/><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/>PDI_inout_t<sp/>access);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"/></codeline>
<codeline lineno="280"><highlight class="normal">PDI_status_t<sp/>PDI_EXPORT<sp/><ref refid="group__hl__annotation_1gae5c670b378e423e3083122f62c1f0a59" kindref="member">PDI_multi_expose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>event_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/>PDI_inout_t<sp/>access,<sp/>...);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"/></codeline>
<codeline lineno="296"><highlight class="normal">PDI_status_t<sp/>PDI_DEPRECATED_EXPORT<sp/><ref refid="group__hl__annotation_1ga39bceccdb0528be91cc79df784a161bc" kindref="member">PDI_transaction_begin</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"/></codeline>
<codeline lineno="308"><highlight class="normal">PDI_status_t<sp/>PDI_DEPRECATED_EXPORT<sp/><ref refid="group__hl__annotation_1gac11c4c2885e34660a40f789f049d3d34" kindref="member">PDI_transaction_end</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"/></codeline>
<codeline lineno="311"><highlight class="normal"/></codeline>
<codeline lineno="312"><highlight class="normal"/><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"/></codeline>
<codeline lineno="313"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>extern<sp/>C</highlight><highlight class="normal"/></codeline>
<codeline lineno="314"><highlight class="normal"/><highlight class="preprocessor">#endif</highlight><highlight class="normal"/></codeline>
<codeline lineno="315"><highlight class="normal"/></codeline>
<codeline lineno="316"><highlight class="normal"/></codeline>
<codeline lineno="317"><highlight class="normal"/><highlight class="preprocessor">#endif<sp/>//<sp/>PDI_H_</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="pdi__fwd_8h" kind="file" language="C++">
    <compoundname>pdi_fwd.h</compoundname>
    <includes local="no">memory</includes>
    <includes refid="pdi_8h" local="no">pdi.h</includes>
    <includedby refid="array__datatype_8h" local="no">array_datatype.h</includedby>
    <includedby refid="datatype_8h" local="no">datatype.h</includedby>
    <includedby refid="datatype__template_8h" local="no">datatype_template.h</includedby>
    <includedby refid="context_8h" local="no">context.h</includedby>
    <includedby refid="data__descriptor_8h" local="no">data_descriptor.h</includedby>
    <includedby refid="ref__any_8h" local="no">ref_any.h</includedby>
    <includedby refid="error_8h" local="no">error.h</includedby>
    <includedby refid="context__proxy_8h" local="yes">context_proxy.h</includedby>
    <includedby refid="expression_8h" local="no">expression.h</includedby>
    <includedby refid="paraconf__wrapper_8h" local="no">paraconf_wrapper.h</includedby>
    <includedby refid="logger_8h" local="no">logger.h</includedby>
    <includedby refid="plugin_8h" local="no">plugin.h</includedby>
    <includedby refid="pointer__datatype_8h" local="no">pointer_datatype.h</includedby>
    <includedby refid="record__datatype_8h" local="no">record_datatype.h</includedby>
    <includedby refid="scalar__datatype_8h" local="no">scalar_datatype.h</includedby>
    <incdepgraph>
      <node id="6">
        <label>pdi/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="5">
        <label>pdi/export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="1">
        <label>pdi_fwd.h</label>
        <link refid="pdi__fwd_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>paraconf.h</label>
      </node>
      <node id="3">
        <label>pdi.h</label>
        <link refid="pdi_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6">
        <label>context.h</label>
        <link refid="context_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ref_any.h</label>
        <link refid="ref__any_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>paraconf_wrapper.h</label>
        <link refid="paraconf__wrapper_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>data_descriptor.h</label>
        <link refid="data__descriptor_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>pointer_datatype.h</label>
        <link refid="pointer__datatype_8h_source"/>
      </node>
      <node id="10">
        <label>record_datatype.h</label>
        <link refid="record__datatype_8h_source"/>
      </node>
      <node id="13">
        <label>error.h</label>
        <link refid="error_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>plugin.h</label>
        <link refid="plugin_8h_source"/>
      </node>
      <node id="2">
        <label>array_datatype.h</label>
        <link refid="array__datatype_8h_source"/>
      </node>
      <node id="1">
        <label>pdi_fwd.h</label>
        <link refid="pdi__fwd_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>scalar_datatype.h</label>
        <link refid="scalar__datatype_8h_source"/>
      </node>
      <node id="12">
        <label>datatype_template.h</label>
        <link refid="datatype__template_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>expression.h</label>
        <link refid="expression_8h_source"/>
      </node>
      <node id="15">
        <label>logger.h</label>
        <link refid="logger_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>datatype.h</label>
        <link refid="datatype_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>context_proxy.h</label>
        <link refid="context__proxy_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classPDI_1_1Ref__any" prot="public">PDI::Ref_any</innerclass>
    <innernamespace refid="namespacespdlog">spdlog</innernamespace>
    <innernamespace refid="namespacePDI">PDI</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Forward declaration of all public <ref refid="namespacePDI" kindref="compound">PDI</ref> types </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2015-2019<sp/>Commissariat<sp/>a<sp/>l'energie<sp/>atomique<sp/>et<sp/>aux<sp/>energies<sp/>alternatives<sp/>(CEA)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>CEA<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>"AS<sp/>IS",<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"/></codeline>
<codeline lineno="24"><highlight class="normal"/></codeline>
<codeline lineno="29"><highlight class="preprocessor">#ifndef<sp/>PDI_PDI_FWD_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="30"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_PDI_FWD_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="31"><highlight class="normal"/></codeline>
<codeline lineno="32"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="33"><highlight class="normal"/></codeline>
<codeline lineno="34"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="35"><highlight class="normal"/></codeline>
<codeline lineno="36"><highlight class="normal"/></codeline>
<codeline lineno="37" refid="namespacespdlog" refkind="compound"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacespdlog" kindref="compound">spdlog</ref><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"/><highlight class="keyword">class<sp/></highlight><highlight class="normal">logger;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"/></codeline>
<codeline lineno="41"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacePDI" kindref="compound">PDI</ref><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"/></codeline>
<codeline lineno="46"><highlight class="keyword">class<sp/></highlight><highlight class="normal">Context;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"/></codeline>
<codeline lineno="52"><highlight class="keyword">class<sp/></highlight><highlight class="normal">Datatype;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"/></codeline>
<codeline lineno="58" refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" refkind="member"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classPDI_1_1Datatype__template" kindref="compound">Datatype_template</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"/></codeline>
<codeline lineno="60"><highlight class="normal"/><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;Datatype_template&gt;<sp/><ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"/></codeline>
<codeline lineno="62" refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" refkind="member"><highlight class="normal"/><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;Datatype&gt;<sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"/></codeline>
<codeline lineno="67" refid="namespacePDI_1a9c906943ee4d374699c804e1d94facd2" refkind="member"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classPDI_1_1Data__descriptor" kindref="compound">Data_descriptor</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"/></codeline>
<codeline lineno="71"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/><ref refid="namespacePDI_1a9c906943ee4d374699c804e1d94facd2" kindref="member">Logger_sptr</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"/></codeline>
<codeline lineno="75"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classPDI_1_1Plugin" kindref="compound">Plugin</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"/></codeline>
<codeline lineno="77" refid="namespacePDI_1adc363df268e6e68e68947a4fc799ca00" refkind="member"><highlight class="normal"/><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"/></codeline>
<codeline lineno="79"><highlight class="normal"/><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any&lt;false, false&gt;</ref><sp/><ref refid="namespacePDI_1adc363df268e6e68e68947a4fc799ca00" kindref="member">Ref</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"/></codeline>
<codeline lineno="81" refid="namespacePDI_1a7d5272dcf2920dfbe084e779e942b2e3" refkind="member"><highlight class="normal"/><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any&lt;true, false&gt;</ref><sp/><ref refid="namespacePDI_1a7d5272dcf2920dfbe084e779e942b2e3" kindref="member">Ref_r</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"/></codeline>
<codeline lineno="83" refid="namespacePDI_1a2fc7c8ee4f0e355a07b1306858598907" refkind="member"><highlight class="normal"/><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any&lt;false, true&gt;</ref><sp/><ref refid="namespacePDI_1a2fc7c8ee4f0e355a07b1306858598907" kindref="member">Ref_w</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"/></codeline>
<codeline lineno="85" refid="namespacePDI_1a05ccfa4dec93f965d88b20106f99f49a" refkind="member"><highlight class="normal"/><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any&lt;true, true&gt;</ref><sp/><ref refid="namespacePDI_1a05ccfa4dec93f965d88b20106f99f49a" kindref="member">Ref_rw</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"/></codeline>
<codeline lineno="89" refid="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7" refkind="member"><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7" kindref="member">Scalar_kind</ref><sp/>:<sp/>uint8_t<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7a696b031073e74bf2cb98e5ef201d4aa3" kindref="member">UNKNOWN</ref>,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7a6898b46a1cde8a1572e2722c44c5ab07" kindref="member">SIGNED</ref>,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7aaf36b47f395cd01f48b8fc1013665054" kindref="member">UNSIGNED</ref>,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7ae738c26bf4ce1037fa81b039a915cbf6" kindref="member">FLOAT</ref></highlight></codeline>
<codeline lineno="94"><highlight class="normal">};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"/></codeline>
<codeline lineno="100"><highlight class="keyword">class<sp/></highlight><highlight class="normal">Expression;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"/></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"/></codeline>
<codeline lineno="104"><highlight class="normal"/><highlight class="preprocessor">#endif<sp/>//<sp/>PDI_PDI_FWD_H_</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pdi_fwd.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="plugin_8h" kind="file" language="C++">
    <compoundname>plugin.h</compoundname>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">unordered_set</includes>
    <includes local="no">utility</includes>
    <includes refid="pdi__fwd_8h" local="no">pdi/pdi_fwd.h</includes>
    <includes refid="logger_8h" local="no">pdi/logger.h</includes>
    <incdepgraph>
      <node id="11">
        <label>pdi/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="14">
        <label>functional</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="13">
        <label>pdi/paraconf_wrapper.h</label>
        <link refid="paraconf__wrapper_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>unordered_set</label>
      </node>
      <node id="10">
        <label>pdi/export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="1">
        <label>plugin.h</label>
        <link refid="plugin_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>pdi/pdi_fwd.h</label>
        <link refid="pdi__fwd_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>paraconf.h</label>
      </node>
      <node id="6">
        <label>utility</label>
      </node>
      <node id="8">
        <label>pdi.h</label>
        <link refid="pdi_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>pdi/logger.h</label>
        <link refid="logger_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>type_traits</label>
      </node>
      <node id="2">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="classPDI_1_1Plugin" prot="public">PDI::Plugin</innerclass>
    <innernamespace refid="namespacePDI">PDI</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="plugin_8h_1a1745a1b4f1c6c817c54250450c61cb4f" prot="public" static="no">
        <name>PLUGIN_API_VERSION_MAJOR</name>
        <initializer>(0ul)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" line="65" column="9" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="plugin_8h_1ae5e70e5617f5e2b881f9a52925866d81" prot="public" static="no">
        <name>PLUGIN_API_VERSION_MINOR</name>
        <initializer>(0ul)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" line="67" column="9" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="plugin_8h_1adbf9b5ffc96f18822a8ae077e7296cb7" prot="public" static="no">
        <name>PLUGIN_API_VERSION_PATCH</name>
        <initializer>(1ul)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" line="69" column="9" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="plugin_8h_1ac3bcb9217a74830c51b6c46c9b5f997f" prot="public" static="no">
        <name>PLUGIN_API_VERSION</name>
        <initializer>((PLUGIN_API_VERSION_MAJOR&lt;&lt;24) + (PLUGIN_API_VERSION_MINOR&lt;&lt;16) + (PLUGIN_API_VERSION_PATCH&lt;&lt;8))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" line="71" column="9" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="plugin_8h_1a7e4dfd8f6c67e3c1ba6fe7322b01f274" prot="public" static="no">
        <name>PDI_PLUGIN</name>
        <param><defname>name</defname></param>
        <initializer>	_Pragma("clang diagnostic push")\
	_Pragma("clang diagnostic ignored \"-Wmissing-prototypes\"")\
	_Pragma("clang diagnostic ignored \"-Wreturn-type-c-linkage\"")\
	extern "C" ::std::unique_ptr&lt;::<ref refid="classPDI_1_1Plugin" kindref="compound">PDI::Plugin</ref>&gt; PDI_EXPORT PDI_plugin_##name##_loader(::<ref refid="classPDI_1_1Context" kindref="compound">PDI::Context</ref>&amp; ctx, PC_tree_t conf) \
	{\
		auto plugin = ::std::unique_ptr&lt;name##_plugin&gt;{new name##_plugin{ctx, conf}};\
		::<ref refid="namespacePDI_1a597784fcd3cb355d817d3d4e28dd3ce6" kindref="member">PDI::plugin_api_version</ref>(PLUGIN_API_VERSION);\
		return plugin;\
	}\
	extern "C" ::std::pair&lt;::std::unordered_set&lt;::std::string&gt;, ::std::unordered_set&lt;::std::string&gt;&gt; PDI_EXPORT PDI_plugin_##name##_dependencies() \
	{\
		return ::plugin_dependencies&lt;name##_plugin&gt;();\
	}\
	_Pragma("clang diagnostic pop")</initializer>
        <briefdescription>
<para>Declares a plugin to be used with <ref refid="namespacePDI" kindref="compound">PDI</ref> and its dependencies. </para>
        </briefdescription>
        <detaileddescription>
<para>This should be called after having implemented a class that inherits <ref refid="classPDI_1_1Plugin" kindref="compound">PDI::Plugin</ref> with a constructor taking 2 parameters<itemizedlist>
<listitem><para><ref refid="classPDI_1_1Context" kindref="compound">PDI::Context</ref>&amp; ctx: the context for this plugin (forward it to <ref refid="classPDI_1_1Plugin" kindref="compound">PDI::Plugin</ref>)</para>
</listitem><listitem><para>PC_tree_t conf: the configuration for this plugin</para>
</listitem></itemizedlist>
</para>
<para>The name of the class should be NAME_plugin where NAME is the plugin name</para>
<para>If the plugin has any dependencies, they should be defined in a static method named dependencies, which returns std::pair&lt;std::unordered_set&lt;std::string&gt;, std::unordered_set&lt;std::string&gt;&gt; and takes no parameters. First unordered_set in a pair is required plugins (i.e plugins that must be loaded with the plugin). Second unodrered_set is dependent plugins (i.e plugins that need to be loaded before the plugin, if they are both loaded).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the plugin </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" line="144" column="9" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2015-2019<sp/>Commissariat<sp/>a<sp/>l'energie<sp/>atomique<sp/>et<sp/>aux<sp/>energies<sp/>alternatives<sp/>(CEA)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>CEA<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>"AS<sp/>IS",<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"/></codeline>
<codeline lineno="24"><highlight class="normal"/></codeline>
<codeline lineno="25"><highlight class="normal"/><highlight class="preprocessor">#ifndef<sp/>PDI_PLUGIN_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="26"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_PLUGIN_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="27"><highlight class="normal"/></codeline>
<codeline lineno="28"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="29"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="30"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="31"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="32"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="33"><highlight class="normal"/></codeline>
<codeline lineno="34"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/pdi_fwd.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="35"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/logger.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="36"><highlight class="normal"/></codeline>
<codeline lineno="37"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacePDI" kindref="compound">PDI</ref><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"/></codeline>
<codeline lineno="39"><highlight class="normal"/></codeline>
<codeline lineno="42"><highlight class="keyword">class<sp/></highlight><highlight class="normal">PDI_EXPORT<sp/>Plugin</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>Context&amp;<sp/>m_context;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"/><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>Plugin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Plugin&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>Plugin(Plugin&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>Plugin(Context&amp;<sp/>ctx);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~Plugin()<sp/>noexcept(false);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>Context&amp;<sp/>context();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>Plugin</highlight><highlight class="normal"/></codeline>
<codeline lineno="63"><highlight class="normal"/></codeline>
<codeline lineno="64" refid="classPDI_1_1Plugin" refkind="compound"><highlight class="normal"/></codeline>
<codeline lineno="65"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PLUGIN_API_VERSION_MAJOR<sp/>(0ul)</highlight><highlight class="normal"/></codeline>
<codeline lineno="66"><highlight class="normal"/></codeline>
<codeline lineno="67"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PLUGIN_API_VERSION_MINOR<sp/>(0ul)</highlight><highlight class="normal"/></codeline>
<codeline lineno="68"><highlight class="normal"/></codeline>
<codeline lineno="69"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PLUGIN_API_VERSION_PATCH<sp/>(1ul)</highlight><highlight class="normal"/></codeline>
<codeline lineno="70"><highlight class="normal"/></codeline>
<codeline lineno="71"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PLUGIN_API_VERSION<sp/>((PLUGIN_API_VERSION_MAJOR&lt;&lt;24)<sp/>+<sp/>(PLUGIN_API_VERSION_MINOR&lt;&lt;16)<sp/>+<sp/>(PLUGIN_API_VERSION_PATCH&lt;&lt;8))</highlight><highlight class="normal"/></codeline>
<codeline lineno="72"><highlight class="normal"/></codeline>
<codeline lineno="80"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>PDI_EXPORT<sp/><ref refid="namespacePDI_1a597784fcd3cb355d817d3d4e28dd3ce6" kindref="member">plugin_api_version</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>expected_version=0);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"/></codeline>
<codeline lineno="82"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>PDI</highlight><highlight class="normal"/></codeline>
<codeline lineno="83"><highlight class="normal"/></codeline>
<codeline lineno="84"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"/></codeline>
<codeline lineno="88"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"/><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_dependencies<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>decltype(C::dependencies(),<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">())<sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test(...)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>test&lt;T&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="101"><highlight class="normal">};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"/></codeline>
<codeline lineno="108"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"/><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;has_dependencies&lt;T&gt;::value,<sp/>std::pair&lt;std::unordered_set&lt;std::string&gt;,<sp/>std::unordered_set&lt;std::string&gt;&gt;&gt;::type<sp/>plugin_dependencies()</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T::dependencies();</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"/></codeline>
<codeline lineno="119"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"/><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;!has_dependencies&lt;T&gt;::value,<sp/>std::pair&lt;std::unordered_set&lt;std::string&gt;,<sp/>std::unordered_set&lt;std::string&gt;&gt;&gt;::type<sp/>plugin_dependencies()</highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"/></codeline>
<codeline lineno="125"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>&lt;anonymous&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="126"><highlight class="normal"/></codeline>
<codeline lineno="144"><highlight class="preprocessor">#define<sp/>PDI_PLUGIN(name)\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Pragma("clang<sp/>diagnostic<sp/>push")\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Pragma("clang<sp/>diagnostic<sp/>ignored<sp/>\"-Wmissing-prototypes\"")\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Pragma("clang<sp/>diagnostic<sp/>ignored<sp/>\"-Wreturn-type-c-linkage\"")\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>extern<sp/>"C"<sp/>::std::unique_ptr&lt;::PDI::Plugin&gt;<sp/>PDI_EXPORT<sp/>PDI_plugin_##name##_loader(::PDI::Context&amp;<sp/>ctx,<sp/>PC_tree_t<sp/>conf)<sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>plugin<sp/>=<sp/>::std::unique_ptr&lt;name##_plugin&gt;{new<sp/>name##_plugin{ctx,<sp/>conf}};\</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::PDI::plugin_api_version(PLUGIN_API_VERSION);\</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>plugin;\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>extern<sp/>"C"<sp/>::std::pair&lt;::std::unordered_set&lt;::std::string&gt;,<sp/>::std::unordered_set&lt;::std::string&gt;&gt;<sp/>PDI_EXPORT<sp/>PDI_plugin_##name##_dependencies()<sp/>\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::plugin_dependencies&lt;name##_plugin&gt;();\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Pragma("clang<sp/>diagnostic<sp/>pop")</highlight><highlight class="normal"/></codeline>
<codeline lineno="159"><highlight class="normal"/></codeline>
<codeline lineno="160"><highlight class="normal"/><highlight class="preprocessor">#endif<sp/>//<sp/>PDI_PLUGIN_H_</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/plugin.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Plugins_8md" kind="file" language="Markdown">
    <compoundname>Plugins.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">\page<sp/>Plugins<sp/>Plugins</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|Plugin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:----------------------------------------------------|:------------------------------------------------------------------|</highlight></codeline>
<codeline><highlight class="normal">|\subpage<sp/>Decl_HDF5_plugin<sp/>"Decl'HDF5<sp/>plugin"<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|Read<sp/>and<sp/>write<sp/>data<sp/>from<sp/>HDF5<sp/>files<sp/>in<sp/>a<sp/>declarative<sp/>way.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|\subpage<sp/>FlowVR_plugin<sp/>"FlowVR<sp/>plugin"<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|Write<sp/>FlowVR<sp/>modules<sp/>without<sp/>knowing<sp/>any<sp/>specific<sp/>FlowVR<sp/>API<sp/>calls.|</highlight></codeline>
<codeline><highlight class="normal">|\subpage<sp/>trace_plugin<sp/>"trace<sp/>plugin"<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|Generate<sp/>a<sp/>trace<sp/>of<sp/>what<sp/>happens<sp/>in<sp/>%PDI<sp/>data<sp/>store.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|\subpage<sp/>user_code_plugin<sp/>"user-code<sp/>plugin"<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|Call<sp/>your<sp/>function<sp/>on<sp/>event<sp/>or<sp/>when<sp/>data<sp/>becomes<sp/>available<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|\subpage<sp/>set_value_plugin<sp/>"set_value<sp/>plugin"<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|Set<sp/>values<sp/>to<sp/>data<sp/>and<sp/>metadata<sp/>from<sp/>yaml<sp/>file.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|\subpage<sp/>FTI_plugin<sp/>"FTI<sp/>plugin"<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|Perform<sp/>checkpoints<sp/>using<sp/>FTI<sp/>library.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|\subpage<sp/>pycall_plugin<sp/>"Pycall<sp/>plugin"<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|Call<sp/>python<sp/>scripts<sp/>from<sp/>C<sp/>application<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|MPI<sp/>plugin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|Enables<sp/>MPI<sp/>support<sp/>in<sp/>%PDI<sp/>and<sp/>plugins.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|Decl'SION<sp/>plugin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|Read<sp/>and<sp/>write<sp/>data<sp/>from<sp/>SIONlib<sp/>files<sp/>in<sp/>a<sp/>declarative<sp/>way.<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">To<sp/>learn<sp/>how<sp/>to<sp/>create<sp/>your<sp/>own<sp/>plugin<sp/>see:<sp/>\subpage<sp/>how_to_create_plugin<sp/>"How<sp/>to<sp/>create<sp/>a<sp/>plugin"</highlight></codeline>
    </programlisting>
    <location file="Plugins.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="pointer__datatype_8h" kind="file" language="C++">
    <compoundname>pointer_datatype.h</compoundname>
    <includes local="no">functional</includes>
    <includes refid="pdi__fwd_8h" local="no">pdi/pdi_fwd.h</includes>
    <includes refid="datatype_8h" local="no">pdi/datatype.h</includes>
    <incdepgraph>
      <node id="8">
        <label>pdi/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="2">
        <label>functional</label>
      </node>
      <node id="10">
        <label>string</label>
      </node>
      <node id="1">
        <label>pointer_datatype.h</label>
        <link refid="pointer__datatype_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>pdi/export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="3">
        <label>pdi/pdi_fwd.h</label>
        <link refid="pdi__fwd_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>paraconf.h</label>
      </node>
      <node id="11">
        <label>pdi/datatype_template.h</label>
        <link refid="datatype__template_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>pdi.h</label>
        <link refid="pdi_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>pdi/datatype.h</label>
        <link refid="datatype_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="classPDI_1_1Pointer__datatype" prot="public">PDI::Pointer_datatype</innerclass>
    <innernamespace refid="namespacePDI">PDI</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2020<sp/>Institute<sp/>of<sp/>Bioorganic<sp/>Chemistry<sp/>Polish<sp/>Academy<sp/>of<sp/>Science<sp/>(PSNC)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>CEA<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>"AS<sp/>IS",<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"/></codeline>
<codeline lineno="24"><highlight class="normal"/></codeline>
<codeline lineno="25"><highlight class="normal"/><highlight class="preprocessor">#ifndef<sp/>PDI_POINTER_DATATYPE_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="26"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_POINTER_DATATYPE_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="27"><highlight class="normal"/></codeline>
<codeline lineno="28"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="29"><highlight class="normal"/></codeline>
<codeline lineno="30"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/pdi_fwd.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="31"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/datatype.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="32"><highlight class="normal"/></codeline>
<codeline lineno="33"><highlight class="normal"/></codeline>
<codeline lineno="34"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacePDI" kindref="compound">PDI</ref><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"/></codeline>
<codeline lineno="36"><highlight class="normal"/><highlight class="keyword">class<sp/></highlight><highlight class="normal">PDI_EXPORT<sp/>Pointer_datatype:</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Datatype</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>m_subtype;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&gt;<sp/>m_copy;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;void(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&gt;<sp/>m_destroy;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"/><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="48"><highlight class="normal"/></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>Pointer_datatype(<ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>subtype);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>Pointer_datatype(<ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>subtype,<sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&gt;<sp/>copy,<sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&gt;<sp/>destroy);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref><sp/>clone()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>clone_type()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>densify()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58" refid="classPDI_1_1Pointer__datatype" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>evaluate(<ref refid="classPDI_1_1Context" kindref="compound">Context</ref>&amp;)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dense()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>datasize()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffersize()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alignment()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>simple()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data_to_dense_copy(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data_from_dense_copy(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy_data(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>debug_string()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref>&amp;)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>dereference()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal">};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"/></codeline>
<codeline lineno="85"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>PDI</highlight><highlight class="normal"/></codeline>
<codeline lineno="86"><highlight class="normal"/></codeline>
<codeline lineno="87"><highlight class="normal"/><highlight class="preprocessor">#endif<sp/>//<sp/>PDI_POINTER_DATATYPE_H_</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/pointer_datatype.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="example_2README_8md" kind="file" language="Markdown">
    <compoundname>example/README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">\page<sp/>PDI_example<sp/>%PDI<sp/>example</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">%PDI<sp/>example<sp/>application<sp/>can<sp/>be<sp/>found<sp/>in<sp/>repository<sp/>in<sp/>the<sp/>`example`<sp/>directory.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>source<sp/>code<sp/>is<sp/>written<sp/>in<sp/>C,<sp/>Fortran<sp/>and<sp/>Python.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>example<sp/>has<sp/>a<sp/>single<sp/>source<sp/>file<sp/>(for<sp/>each<sp/>supported<sp/>programming<sp/>language),</highlight></codeline>
<codeline><highlight class="normal">but<sp/>specification<sp/>tree<sp/>to<sp/>each<sp/>plugin.<sp/>Just<sp/>by<sp/>replacing<sp/>the<sp/>configuration<sp/>file,</highlight></codeline>
<codeline><highlight class="normal">the<sp/>example<sp/>program<sp/>will<sp/>use<sp/>different<sp/>libraries<sp/>and<sp/>different<sp/>I/O<sp/>operations.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>example<sp/>implements<sp/>simple<sp/>[Heat<sp/>equation](https://en.wikipedia.org/wiki/Heat_equation)<sp/></highlight></codeline>
<codeline><highlight class="normal">algorithm<sp/>in<sp/>2<sp/>dimensional<sp/>space.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>heat_algorithm<sp/>Heat<sp/>algorithm</highlight></codeline>
<codeline><highlight class="normal">Each<sp/>element<sp/>in<sp/>a<sp/>matrix<sp/>is<sp/>a<sp/>point<sp/>with<sp/>temperature.<sp/>In<sp/>each<sp/>iteration<sp/>every<sp/>cell<sp/>is<sp/>calculated<sp/>by</highlight></codeline>
<codeline><highlight class="normal">an<sp/>weighted<sp/>average<sp/>of<sp/>itself<sp/>and<sp/>neighbour<sp/>cells<sp/>(top,<sp/>bottom,<sp/>left<sp/>and<sp/>right):</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```C</highlight></codeline>
<codeline><highlight class="normal">matrix[i][j]<sp/>=<sp/>0.500<sp/>*<sp/>matrix[i][j]<sp/>+<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.125<sp/>*<sp/>matrix[i-1][j]<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.125<sp/>*<sp/>matrix[i+1][j]<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.125<sp/>*<sp/>matrix[i][j-1]<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.125<sp/>*<sp/>matrix[i][j+1];<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">To<sp/>not<sp/>override<sp/>the<sp/>cells<sp/>while<sp/>processing<sp/>we<sp/>need<sp/>to<sp/>create<sp/>temporary<sp/>matrix<sp/>to<sp/>save<sp/>results<sp/>and<sp/>then<sp/>move<sp/>result<sp/>to<sp/>original<sp/>matrix<sp/>(`cur`<sp/>and<sp/>`next`<sp/>in<sp/>source<sp/>file).<sp/>Above<sp/>calculations<sp/>are<sp/>written<sp/>in<sp/>`iter`<sp/>function.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Now<sp/>we<sp/>can<sp/>add<sp/>a<sp/>MPI<sp/>to<sp/>our<sp/>algorithm.</highlight></codeline>
<codeline><highlight class="normal">Let's<sp/>split<sp/>that<sp/>matrix<sp/>by<sp/>MPI<sp/>processes.<sp/>Each<sp/>process<sp/>will<sp/>compute<sp/>part<sp/>of<sp/>global<sp/>matrix.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">For<sp/>example:<sp/>matrix<sp/>16<sp/>x<sp/>16<sp/>integers<sp/>and<sp/>16<sp/>MPI<sp/>processes<sp/>gives<sp/>submatrices<sp/>of<sp/>4<sp/>x<sp/>4<sp/>integers<sp/>for<sp/>every<sp/>process.</highlight></codeline>
<codeline><highlight class="normal">We<sp/>have<sp/>to<sp/>add<sp/>to<sp/>our<sp/>global<sp/>matrix<sp/>one<sp/>row<sp/>above<sp/>and<sp/>below,<sp/>column<sp/>to<sp/>the<sp/>left<sp/>and<sp/>right<sp/>to<sp/>be<sp/>able<sp/>to<sp/>compute<sp/>border<sp/>cells.<sp/>In<sp/>our<sp/>example<sp/>row<sp/>on<sp/>the<sp/>top<sp/>has<sp/>some<sp/>value<sp/>(”x”)<sp/>bigger<sp/>than<sp/>0<sp/>(representing<sp/>source<sp/>of<sp/>heat):</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\image<sp/>html<sp/>heat_global_matrix.jpg</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">MPI<sp/>processes<sp/>need<sp/>to<sp/>exchange<sp/>information<sp/>about<sp/>their<sp/>local<sp/>matrix<sp/>border<sp/>cells<sp/></highlight></codeline>
<codeline><highlight class="normal">(communicate<sp/>with<sp/>neighbours<sp/>to<sp/>exchange<sp/>row/column<sp/>of<sp/>matrix).<sp/>Each<sp/>MPI<sp/>process<sp/>will<sp/>have<sp/>a<sp/>local<sp/>matrix:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\image<sp/>html<sp/>heat_local_matrix.jpg</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">All<sp/>the<sp/>communications<sp/>instructions<sp/>are<sp/>written<sp/>in<sp/>`exchange`<sp/>function.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>pdi_integration<sp/>PDI<sp/>integration</highlight></codeline>
<codeline><highlight class="normal">Now,<sp/>when<sp/>we<sp/>know<sp/>the<sp/>algorithm,<sp/>we<sp/>can<sp/>focus<sp/>on<sp/>analysing<sp/>`decl_hdf5.yaml`<sp/>specification<sp/>tree.</highlight></codeline>
<codeline><highlight class="normal"><sp/>Fisrt<sp/>3<sp/>maps<sp/>defined<sp/>will<sp/>not</highlight></codeline>
<codeline><highlight class="normal">be<sp/>seen<sp/>to<sp/>%PDI:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">duration:<sp/>0.75</highlight></codeline>
<codeline><highlight class="normal">datasize:<sp/>[60,<sp/>12]</highlight></codeline>
<codeline><highlight class="normal">parallelism:<sp/>{<sp/>height:<sp/>3,<sp/>width:<sp/>1<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`duration`<sp/>is<sp/>the<sp/>value<sp/>in<sp/>seconds<sp/>how<sp/>long<sp/>the<sp/>application<sp/>will<sp/>run.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`datasize`<sp/>is<sp/>size<sp/>of<sp/>our<sp/>global<sp/>matrix.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`parallelism`<sp/>defines<sp/>the<sp/>number<sp/>of<sp/>MPI<sp/>processes<sp/>in<sp/>each<sp/>dimension.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Next,<sp/>we<sp/>have<sp/>defined<sp/>`data`<sp/>and<sp/>`metadata`:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">pdi:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>iter:<sp/><sp/><sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dsize:<sp/><sp/>{<sp/>size:<sp/>2,<sp/>type:<sp/>array,<sp/>subtype:<sp/>int<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>psize:<sp/><sp/>{<sp/>size:<sp/>2,<sp/>type:<sp/>array,<sp/>subtype:<sp/>int<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pcoord:<sp/>{<sp/>size:<sp/>2,<sp/>type:<sp/>array,<sp/>subtype:<sp/>int<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>main_field:<sp/>{<sp/>size:<sp/>[<sp/>'$dsize[0]',<sp/>'$dsize[1]'<sp/>],<sp/>type:<sp/>array,<sp/>subtype:<sp/>double<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">In<sp/>source<sp/>file<sp/>we<sp/>will<sp/>extract<sp/>the<sp/>`pdi`<sp/>map<sp/>and<sp/>pass<sp/>it<sp/>as<sp/>PDI_init<sp/>argument.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`iter`<sp/>will<sp/>hold<sp/>the<sp/>current<sp/>iteration<sp/>number.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`dsize`<sp/>will<sp/>hold<sp/>the<sp/>size<sp/>of<sp/>local<sp/>matrix<sp/>of<sp/>each<sp/>MPI<sp/>process.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`psize`<sp/>will<sp/>hold<sp/>number<sp/>of<sp/>processes<sp/>in<sp/>dimensions.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`pcoord`<sp/>will<sp/>hold<sp/>coordinates<sp/>for<sp/>each<sp/>process.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`main_filed`<sp/>is<sp/>the<sp/>local<sp/>matrix<sp/>for<sp/>each<sp/>process.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Let's<sp/>take<sp/>a<sp/>closer<sp/>look<sp/>at<sp/>C<sp/>source<sp/>code.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```C</highlight></codeline>
<codeline><highlight class="normal">PDI_init(PC_get(conf,<sp/>".pdi"));</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">As<sp/>mentioned<sp/>before,<sp/>we<sp/>extract<sp/>the<sp/>`pdi`<sp/>subtree<sp/>and<sp/>pass<sp/>it<sp/>to<sp/>PDI_init.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">We<sp/>did<sp/>not<sp/>defined<sp/>`mpi_comm`<sp/>data<sp/>in<sp/>yaml,<sp/>so<sp/>this<sp/>line<sp/>will<sp/>have<sp/>no<sp/>effect:</highlight></codeline>
<codeline><highlight class="normal">```C</highlight></codeline>
<codeline><highlight class="normal">PDI_expose("mpi_comm",<sp/>&amp;main_comm,<sp/>PDI_INOUT);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">The<sp/>same<sp/>goes<sp/>for<sp/>all<sp/>%PDI<sp/>calls<sp/>with<sp/>data<sp/>we<sp/>didn't<sp/>defined.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```C</highlight></codeline>
<codeline><highlight class="normal">int<sp/>dsize[2];</highlight></codeline>
<codeline><highlight class="normal">PC_int(PC_get(conf,<sp/>".datasize[0]"),<sp/>&amp;longval);<sp/>dsize[0]<sp/>=<sp/>longval;</highlight></codeline>
<codeline><highlight class="normal">PC_int(PC_get(conf,<sp/>".datasize[1]"),<sp/>&amp;longval);<sp/>dsize[1]<sp/>=<sp/>longval;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">Here<sp/>we<sp/>are<sp/>reading<sp/>global<sp/>matrix<sp/>size<sp/>from<sp/>specification<sp/>tree.<sp/>Similar<sp/>with<sp/>parallelism<sp/>and<sp/>duration.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">After<sp/>calculating<sp/>the<sp/>local<sp/>matrix<sp/>sizes<sp/>and<sp/>coordinates,<sp/>we<sp/>expose<sp/>them:</highlight></codeline>
<codeline><highlight class="normal">```C</highlight></codeline>
<codeline><highlight class="normal">PDI_expose("dsize",<sp/>dsize,<sp/>PDI_OUT);</highlight></codeline>
<codeline><highlight class="normal">PDI_expose("psize",<sp/>psize,<sp/>PDI_OUT);</highlight></codeline>
<codeline><highlight class="normal">PDI_expose("pcoord",<sp/>pcoord,<sp/>PDI_OUT);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">At<sp/>the<sp/>beginning<sp/>of<sp/>each<sp/>iteration,<sp/>we<sp/>call<sp/>multiexpose:</highlight></codeline>
<codeline><highlight class="normal">```C</highlight></codeline>
<codeline><highlight class="normal">PDI_multi_expose("newiter",</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"iter",<sp/>&amp;ii,<sp/>PDI_INOUT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"main_field",<sp/>cur,<sp/>PDI_INOUT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">Above<sp/>instruction<sp/>will<sp/>share<sp/>`iter`<sp/>and<sp/>`main_field`,<sp/>call<sp/>`newiter`<sp/>event<sp/>and<sp/>then<sp/>reclaim<sp/>`main_field`<sp/>and<sp/>`iter`.</highlight></codeline>
<codeline><highlight class="normal">This<sp/>is<sp/>the<sp/>place<sp/>when<sp/>plugins<sp/>will<sp/>read/write<sp/>our<sp/>data.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">We<sp/>have<sp/>covered<sp/>the<sp/>logic<sp/>behind<sp/>the<sp/>%PDI<sp/>example.<sp/>Now<sp/>you<sp/>can<sp/>start<sp/>the<sp/>\ref<sp/>Hands_on.</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/example/README.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="tutorial_2README_8md" kind="file" language="Markdown">
    <compoundname>tutorial/README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>Hands-on<sp/>tutorial<sp/>{#Hands_on}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">##<sp/>Setup</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\warning</highlight></codeline>
<codeline><highlight class="normal">You<sp/>need<sp/>to<sp/>[install](Installation.html)<sp/>%PDI<sp/>before<sp/>proceeding<sp/>with<sp/>this</highlight></codeline>
<codeline><highlight class="normal">tutorial.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">After<sp/>%PDI<sp/>[is<sp/>installed](Installation.html),<sp/>you<sp/>can<sp/>proceed<sp/>with<sp/>getting</highlight></codeline>
<codeline><highlight class="normal">the<sp/>sources<sp/>for<sp/>the<sp/>hands-on<sp/>tutorial<sp/>from</highlight></codeline>
<codeline><highlight class="normal">[github](https://github.com/pdidev/tutorial).</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">git<sp/>clone<sp/>https://github.com/pdidev/tutorial.git</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Before<sp/>compilation,<sp/>configure<sp/>the<sp/>tutorial<sp/>by<sp/>detecting<sp/>all<sp/>dependencies:</highlight></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>tutorial</highlight></codeline>
<codeline><highlight class="normal">pdirun<sp/>cmake<sp/>.</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Now<sp/>you're<sp/>ready<sp/>to<sp/>work,<sp/>**good<sp/>luck**!</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">##<sp/>Tutorial</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">For<sp/>each<sp/>exercise,<sp/>once<sp/>you've<sp/>modified<sp/>it,<sp/>you<sp/>can<sp/>compile<sp/>it<sp/>by<sp/>running<sp/>the</highlight></codeline>
<codeline><highlight class="normal">following<sp/>command:</highlight></codeline>
<codeline><highlight class="normal">```bashPDI</highlight></codeline>
<codeline><highlight class="normal">Ex4.<sp/>Writing<sp/>some<sp/>real<sp/>data</highlight></codeline>
<codeline><highlight class="normal">make<sp/>ex?</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">Where<sp/>`?`<sp/>is<sp/>the<sp/>number<sp/>of<sp/>the<sp/>exercise.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Then,<sp/>you<sp/>can<sp/>run<sp/>it<sp/>with<sp/>the<sp/>following<sp/>command:</highlight></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">pdirun<sp/>mpirun<sp/>-n<sp/>1<sp/>./ex?</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">Where<sp/>`?`<sp/>is<sp/>again<sp/>the<sp/>number<sp/>of<sp/>the<sp/>exercise.</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">###<sp/>Ex1.<sp/>Getting<sp/>started</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Ex1.<sp/>implements<sp/>a<sp/>simple<sp/>heat<sp/>equation<sp/>solver<sp/>using<sp/>an<sp/>explicit<sp/>forward<sp/>finite</highlight></codeline>
<codeline><highlight class="normal">difference<sp/>scheme<sp/>parallelized<sp/>with<sp/>MPI<sp/>as<sp/>described<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[PDI<sp/>example](PDI_example.html).</highlight></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>want<sp/>to<sp/>better<sp/>understand<sp/>what's<sp/>going<sp/>on,<sp/>you<sp/>should<sp/>read<sp/>this</highlight></codeline>
<codeline><highlight class="normal">description<sp/>before<sp/>continuing.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">In<sp/>the<sp/>exercises<sp/>however,<sp/>%PDI<sp/>will<sp/>only<sp/>be<sp/>used<sp/>to<sp/>decouple<sp/>I/O<sp/>operations.</highlight></codeline>
<codeline><highlight class="normal">There<sp/>is<sp/>no<sp/>need<sp/>to<sp/>fully<sp/>dive<sp/>in<sp/>the<sp/>core<sp/>of<sp/>the<sp/>solver<sp/>implemented<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`iter`<sp/>and<sp/>`exchange`<sp/>functions.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>specification<sp/>tree<sp/>in<sp/>the<sp/>`.yml`<sp/>files<sp/>and<sp/>the<sp/>`main`<sp/>function<sp/>are<sp/>the</highlight></codeline>
<codeline><highlight class="normal">locations<sp/>where<sp/>all<sp/>the<sp/>I/O-related<sp/>aspects<sp/>will<sp/>be<sp/>handled<sp/>and<sp/>the<sp/>only<sp/>ones</highlight></codeline>
<codeline><highlight class="normal">you<sp/>will<sp/>actually<sp/>need<sp/>to<sp/>fully<sp/>understand<sp/>or<sp/>modify.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>Examine<sp/>the<sp/>source<sp/>code,<sp/>compile<sp/>it<sp/>and<sp/>run<sp/>it.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>There<sp/>is<sp/>no<sp/>input/output<sp/>operations<sp/>in<sp/>the<sp/>code<sp/>yet,<sp/>so<sp/>you<sp/>can<sp/>not<sp/>see<sp/>any</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">This<sp/>example<sp/>uses<sp/>the<sp/>[paraconf<sp/>library](https://github.com/pdidev/paraconf)<sp/>to</highlight></codeline>
<codeline><highlight class="normal">read<sp/>its<sp/>parameters<sp/>in<sp/>[yaml<sp/>format](https://yaml.org)<sp/>from<sp/>the<sp/>`ex1.yml`<sp/>file.</highlight></codeline>
<codeline><highlight class="normal">If<sp/>you've<sp/>never<sp/>heard<sp/>about<sp/>yaml,<sp/>have<sp/>a<sp/>quick<sp/>look<sp/>at</highlight></codeline>
<codeline><highlight class="normal">[this<sp/>example](First_steps.html#Yaml).</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>Play<sp/>with<sp/>and<sp/>understand<sp/>the<sp/>code<sp/>parameters<sp/>in<sp/>`ex1.yml`.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>Set<sp/>values<sp/>in<sp/>`ex1.yml`<sp/>to<sp/>be<sp/>able<sp/>to<sp/>run<sp/>the<sp/>code<sp/>with<sp/>3<sp/>MPI<sp/>processes.</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">###<sp/>Ex2.<sp/>Now<sp/>with<sp/>some<sp/>PDI</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Ex2.<sp/>is<sp/>the<sp/>same<sp/>code<sp/>as<sp/>ex1.<sp/>with<sp/>%PDI<sp/>calls<sp/>added<sp/>in<sp/>main<sp/>function.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>%PDI<sp/>[Trace<sp/>plugin](tra`PDIce_plugin.html)<sp/>is<sp/>used<sp/>to<sp/>trace<sp/>%PDI<sp/>calls.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>Add<sp/>the<sp/>required<sp/>`::PDI_share`<sp/>and<sp/>`::PDI_reclaim`<sp/>calls<sp/>to<sp/>match<sp/>the<sp/>output</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>of<sp/>`ex2.log`<sp/>file.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Change<sp/>only<sp/>the<sp/>`ex2.c`<sp/>file.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>The<sp/>calls<sp/>for<sp/>now<sp/>don't<sp/>need<sp/>to<sp/>make<sp/>any<sp/>logic,<sp/>just<sp/>match<sp/>output<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>`ex2.log`.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\attention</highlight></codeline>
<codeline><highlight class="normal">Notice<sp/>that<sp/>some<sp/>share/reclaim<sp/>pairs<sp/>come<sp/>one<sp/>after<sp/>the<sp/>other<sp/>while<sp/>others<sp/>are</highlight></codeline>
<codeline><highlight class="normal">interlaced.</highlight></codeline>
<codeline><highlight class="normal">Is<sp/>one<sp/>better<sp/>than<sp/>the<sp/>other?</highlight></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>do<sp/>not<sp/>know<sp/>the<sp/>answer<sp/>to<sp/>this<sp/>question,<sp/>please<sp/>wait<sp/>until<sp/>Ex5.<sp/>:)</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">###<sp/>Ex3.<sp/>HDF5<sp/>through<sp/>PDI</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Let's<sp/>take<sp/>the<sp/>code<sp/>from<sp/>ex2.<sp/>and<sp/>make<sp/>it<sp/>output<sp/>some<sp/>HDF5<sp/>data.</highlight></codeline>
<codeline><highlight class="normal">No<sp/>need<sp/>to<sp/>touch<sp/>the<sp/>C<sp/>code<sp/>here,<sp/>the<sp/>%PDI<sp/>yaml<sp/>file<sp/>should<sp/>be<sp/>enough.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>[Trace<sp/>plugin](trace_plugin.html)<sp/>was<sp/>replaced<sp/>by<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[Dec'HDF5<sp/>plugin](Decl_HDF5_plugin.html).</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Fill<sp/>2<sp/>sections<sp/>in<sp/>the<sp/>yaml<sp/>file:</highlight></codeline>
<codeline><highlight class="normal">1.<sp/>The<sp/>`data`<sp/>section<sp/>to<sp/>indicate<sp/>to<sp/>%PDI<sp/>the<sp/>type<sp/>of<sp/>the<sp/>fields<sp/>that<sp/>are</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>exposed.</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>The<sp/>`decl_hdf5`<sp/>for<sp/>the<sp/>configuration<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>[Dec'HDF5<sp/>plugin](Decl_HDF5_plugin.html).</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Only<sp/>`dsize`<sp/>is<sp/>written<sp/>as<sp/>of<sp/>now,<sp/>let's<sp/>add<sp/>`psize`<sp/>and<sp/>`pcoord`<sp/>to<sp/>match<sp/>the</highlight></codeline>
<codeline><highlight class="normal">content<sp/>expected<sp/>described<sp/>in<sp/>`ex3.href<sp/>5dump`<sp/>(use<sp/>`h5dump`<sp/>command<sp/>to<sp/>see</highlight></codeline>
<codeline><highlight class="normal">content<sp/>of<sp/>HDF5<sp/>file).</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\warning</highlight></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>rerun<sp/>the<sp/>exercise,<sp/>remember<sp/>to<sp/>delete<sp/>your<sp/>old<sp/>`ex3.h5`<sp/>file,<sp/>because</highlight></codeline>
<codeline><highlight class="normal">the<sp/>data<sp/>will<sp/>not<sp/>be<sp/>overwritten.</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">###<sp/>Ex4.<sp/>Writing<sp/>some<sp/>real<sp/>data</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">In<sp/>this<sp/>exercise<sp/>each<sp/>MPI<sp/>process<sp/>will<sp/>write<sp/>its<sp/>local<sp/>matrix</highlight></codeline>
<codeline><highlight class="normal">to<sp/>separete<sp/>HDF5<sp/>files.</highlight></codeline>
<codeline><highlight class="normal">Touch<sp/>only<sp/>the<sp/>yaml<sp/>file<sp/>again.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">This<sp/>time<sp/>write<sp/>the<sp/>real<sp/>2D<sp/>data<sp/>contained<sp/>in<sp/>`main_field`<sp/>using<sp/>2<sp/>MPI</highlight></codeline>
<codeline><highlight class="normal">processes.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Notice<sp/>that<sp/>a<sp/>list<sp/>to<sp/>write<sp/>multiple<sp/>files<sp/>was<sp/>used<sp/>in<sp/>the<sp/>decl_hdf5<sp/>section</highlight></codeline>
<codeline><highlight class="normal">instead<sp/>of<sp/>a<sp/>single<sp/>mapping<sp/>as<sp/>before.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Unlike<sp/>the<sp/>other<sp/>fields<sp/>manipulated<sp/>until<sp/>now,<sp/>the<sp/>type<sp/>of<sp/>`main_field`<sp/>is<sp/>not</highlight></codeline>
<codeline><highlight class="normal">fully<sp/>known,<sp/>its<sp/>size<sp/>is<sp/>dynamic.</highlight></codeline>
<codeline><highlight class="normal">By<sp/>moving<sp/>other<sp/>fields<sp/>in<sp/>the<sp/>`metadata`<sp/>section,<sp/>you<sp/>can<sp/>reference<sp/>them<sp/>from</highlight></codeline>
<codeline><highlight class="normal">"$<sp/>expressions"<sp/>in<sp/>the<sp/>configuration<sp/>file.</highlight></codeline>
<codeline><highlight class="normal">This<sp/>can<sp/>be<sp/>used<sp/>to<sp/>specify<sp/>a<sp/>dynamic<sp/>size<sp/>for<sp/>`main_field`.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Unlike<sp/>the<sp/>other<sp/>fields<sp/>manipulated<sp/>until<sp/>now,<sp/>`main_field`<sp/>is<sp/>exposed<sp/>multiple</highlight></codeline>
<codeline><highlight class="normal">times.</highlight></codeline>
<codeline><highlight class="normal">In<sp/>order<sp/>not<sp/>to<sp/>overwrite<sp/>it<sp/>every<sp/>time<sp/>it<sp/>is<sp/>exposed,<sp/>you<sp/>can<sp/>add<sp/>a<sp/>`when`</highlight></codeline>
<codeline><highlight class="normal">condition<sp/>to<sp/>restrict<sp/>its<sp/>output.</highlight></codeline>
<codeline><highlight class="normal">Only<sp/>write<sp/>`main_field`<sp/>at<sp/>the<sp/>second<sp/>iteration<sp/>(when<sp/>`ii==1`).</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Set<sp/>the<sp/>parallelism<sp/>degree<sp/>to<sp/>2<sp/>in<sp/>height<sp/>and<sp/>try<sp/>to<sp/>match<sp/>the<sp/>expected<sp/>content</highlight></codeline>
<codeline><highlight class="normal">described<sp/>in<sp/>`ex4.h5dump`.</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">###<sp/>Ex5.<sp/>Introducing<sp/>events</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">In<sp/>ex4,<sp/>there<sp/>were<sp/>2<sp/>pieces<sp/>of<sp/>data<sp/>to<sp/>`ex4-data*.h5`,<sp/>but<sp/>the<sp/>file<sp/>is<sp/>opened</highlight></codeline>
<codeline><highlight class="normal">and<sp/>closed<sp/>for<sp/>each<sp/>and<sp/>every<sp/>write.</highlight></codeline>
<codeline><highlight class="normal">Since<sp/>Decl'HDF5<sp/>only<sp/>sees<sp/>the<sp/>data<sp/>appear<sp/>one<sp/>after<sp/>the<sp/>other,<sp/>it<sp/>does<sp/>not<sp/>keep</highlight></codeline>
<codeline><highlight class="normal">the<sp/>file<sp/>open.</highlight></codeline>
<codeline><highlight class="normal">Since<sp/>`ii`<sp/>and<sp/>`main_field`<sp/>are<sp/>shared<sp/>in<sp/>an<sp/>interlaced<sp/>way,<sp/>they<sp/>are<sp/>both</highlight></codeline>
<codeline><highlight class="normal">available<sp/>at<sp/>the<sp/>same<sp/>time<sp/>and<sp/>could<sp/>be<sp/>written<sp/>without<sp/>opening<sp/>the<sp/>file<sp/>twice.</highlight></codeline>
<codeline><highlight class="normal">You<sp/>have<sp/>to<sp/>use<sp/>events<sp/>for<sp/>that.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">There<sp/>are<sp/>3<sp/>main<sp/>tasks<sp/>in<sp/>this<sp/>exercise:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">1.<sp/>Call<sp/>%PDI<sp/>event<sp/>named<sp/>`loop`<sp/>when<sp/>both<sp/>`ii`<sp/>and<sp/>`main_field`<sp/>are<sp/>shared.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>With<sp/>the<sp/>[Trace<sp/>plugin](trace_plugin.html),<sp/>check<sp/>that<sp/>the<sp/>event<sp/>is<sp/>indeed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>triggered<sp/>at<sp/>the<sp/>expected<sp/>time<sp/>as<sp/>described<sp/>in<sp/>`ex5.log`.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">2.<sp/>Use<sp/>the<sp/>`on_event`<sp/>mechanism<sp/>to<sp/>trigger<sp/>the<sp/>write<sp/>of<sp/>`ii`<sp/>and<sp/>`main_field`.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>This<sp/>mechanism<sp/>can<sp/>be<sp/>combined<sp/>with<sp/>a<sp/>`when`<sp/>directive,<sp/>in<sp/>that<sp/>case<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>write<sp/>is<sp/>only<sp/>executed<sp/>when<sp/>both<sp/>mechanisms<sp/>agree.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">3.<sp/>Also<sp/>notice<sp/>the<sp/>extended<sp/>syntax<sp/>that<sp/>make<sp/>it<sp/>possible<sp/>to<sp/>write<sp/>data<sp/>to<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>dataset<sp/>with<sp/>a<sp/>name<sp/>different<sp/>from<sp/>the<sp/>data<sp/>in<sp/>%PDI.<sp/>Use<sp/>this<sp/>mechanism<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>write<sp/>main_field<sp/>at<sp/>iterations<sp/>1<sp/>and<sp/>2,<sp/>in<sp/>two<sp/>distinct<sp/>groups<sp/>`iter1`<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>`iter2`.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Match<sp/>the<sp/>content<sp/>as<sp/>expected<sp/>in<sp/>`ex5.h5dump`.</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">###<sp/>Ex6.<sp/>Simplifying<sp/>the<sp/>code</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">As<sp/>you<sp/>can<sp/>notice,<sp/>the<sp/>%PDI<sp/>code<sp/>is<sp/>quite<sp/>redundant.</highlight></codeline>
<codeline><highlight class="normal">In<sp/>this<sp/>exercise,<sp/>you<sp/>will<sp/>use<sp/>`::PDI_expose`<sp/>and<sp/>`::PDI_multi_expose`<sp/>to</highlight></codeline>
<codeline><highlight class="normal">simplify<sp/>the<sp/>code<sp/>while<sp/>keeping<sp/>the<sp/>exact<sp/>same<sp/>behaviour.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">There<sp/>are<sp/>lots<sp/>of<sp/>matched<sp/>`::PDI_share`/`::PDI_reclaim`<sp/>in<sp/>the<sp/>code.</highlight></codeline>
<codeline><highlight class="normal">Replace<sp/>these<sp/>by<sp/>`::PDI_expose`<sp/>that<sp/>is<sp/>the<sp/>exact<sp/>equivalent<sp/>of<sp/>a<sp/>`::PDI_share`</highlight></codeline>
<codeline><highlight class="normal">followed<sp/>by<sp/>a<sp/>matching<sp/>`::PDI_reclaim`.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">This<sp/>replacement<sp/>is<sp/>not<sp/>possible<sp/>for<sp/>interlaced<sp/>`::PDI_share`/`::PDI_reclaim`</highlight></codeline>
<codeline><highlight class="normal">with<sp/>events<sp/>in<sp/>the<sp/>middle.</highlight></codeline>
<codeline><highlight class="normal">This<sp/>case<sp/>is<sp/>however<sp/>handled<sp/>by<sp/>`::PDI_multi_expose`<sp/>call<sp/>that<sp/>exposes<sp/>all<sp/>data,</highlight></codeline>
<codeline><highlight class="normal">then<sp/>triggers<sp/>an<sp/>event<sp/>and<sp/>finally<sp/>does<sp/>all<sp/>the<sp/>reclaim<sp/>in<sp/>reverse<sp/>order.</highlight></codeline>
<codeline><highlight class="normal">Replace<sp/>the<sp/>remaining<sp/>`::PDI_share`/`::PDI_reclaim`<sp/>by<sp/>`::PDI_expose`s<sp/>and</highlight></codeline>
<codeline><highlight class="normal">`::PDI_multi_expose`s.</highlight></codeline>
<codeline><highlight class="normal">There<sp/>is<sp/>one<sp/>`::PDI_share`/`::PDI_reclaim`<sp/>you<sp/>can<sp/>not<sp/>replace.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Touch<sp/>only<sp/>the<sp/>C<sp/>file<sp/>in<sp/>this<sp/>exercise.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Ensure<sp/>that<sp/>your<sp/>code<sp/>keeps<sp/>the<sp/>exact<sp/>same<sp/>behaviour<sp/>by<sp/>comparing<sp/>its<sp/>trace<sp/>to</highlight></codeline>
<codeline><highlight class="normal">`ex6.log`.</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">###<sp/>Ex7.<sp/>Writing<sp/>a<sp/>selection</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">In<sp/>this<sp/>exercise,<sp/>you<sp/>will<sp/>only<sp/>write<sp/>a<sp/>selection<sp/>(part)<sp/>of<sp/>the<sp/>data<sp/>to<sp/>the<sp/>HDF5</highlight></codeline>
<codeline><highlight class="normal">file.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">As<sp/>you<sp/>can<sp/>notice,<sp/>now<sp/>the<sp/>dataset<sp/>is<sp/>independantly<sp/>described<sp/>in<sp/>the<sp/>file.</highlight></codeline>
<codeline><highlight class="normal">Use<sp/>two<sp/>directives<sp/>to<sp/>specify<sp/>a<sp/>selection<sp/>from<sp/>the<sp/>data<sp/>to<sp/>write<sp/>and<sp/>a<sp/>selection</highlight></codeline>
<codeline><highlight class="normal">in<sp/>the<sp/>dataset<sp/>where<sp/>to<sp/>write.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">-<sp/>`memory_selection`<sp/>tells<sp/>what<sp/>part<sp/>to<sp/>take<sp/>from<sp/>the<sp/>data.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`dataset_selection`<sp/>tells<sp/>where<sp/>to<sp/>write<sp/>this<sp/>part<sp/>of<sp/>data<sp/>in<sp/>file.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Restrict<sp/>the<sp/>selection<sp/>to<sp/>the<sp/>second<sp/>line<sp/>from<sp/>the<sp/>data<sp/>and<sp/>write<sp/>it<sp/>to<sp/>a</highlight></codeline>
<codeline><highlight class="normal">one-dimensional<sp/>dataset<sp/>in<sp/>file.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Touch<sp/>only<sp/>the<sp/>yaml<sp/>file<sp/>in<sp/>this<sp/>exercise.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Match<sp/>the<sp/>expected<sp/>output<sp/>described<sp/>in<sp/>`ex7.out`.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Here<sp/>is<sp/>an<sp/>example:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>matrix:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>[8,8]}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>datasets:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrix:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>8}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory_selection:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/>[1,<sp/>8]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start:<sp/>[4,<sp/>0]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataset_selection:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/>8</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">The<sp/>graphical<sp/>representation:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">![graphical<sp/>representation](PDI_hdf5_selection.jpg)</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">###<sp/>Ex8.<sp/>Writing<sp/>an<sp/>advanced<sp/>selection</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">You<sp/>can<sp/>also<sp/>add<sp/>dimensions,<sp/>write<sp/>the<sp/>2D<sp/>array<sp/>excluding<sp/>ghosts<sp/>as<sp/>a<sp/>slab<sp/>of<sp/>a</highlight></codeline>
<codeline><highlight class="normal">3D<sp/>dataset<sp/>including<sp/>a<sp/>dimension<sp/>for<sp/>the<sp/>time-iteration.</highlight></codeline>
<codeline><highlight class="normal">Write<sp/>iterations<sp/>1<sp/>to<sp/>3<sp/>inclusive<sp/>into<sp/>dimensions<sp/>0<sp/>to<sp/>2.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Touch<sp/>only<sp/>the<sp/>yaml<sp/>file<sp/>in<sp/>this<sp/>exercise.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Match<sp/>the<sp/>expected<sp/>output<sp/>described<sp/>in<sp/>`ex8.h5dump`.</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">Here<sp/>is<sp/>an<sp/>example:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>matrix:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>[8,8]}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>datasets:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrix:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>[3,<sp/>8,<sp/>8]}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory_selection:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/>[8,<sp/>8]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataset_selection:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/>[1,<sp/>8,<sp/>8]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start:<sp/>[$ii,<sp/>0,<sp/>0]</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">And<sp/>the<sp/>graphical<sp/>representation:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">![graphical<sp/>representation](PDI_hdf5_selection_advanced.jpg)</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">###<sp/>Ex9.<sp/>Going<sp/>parallel</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Running<sp/>the<sp/>current<sp/>code<sp/>in<sp/>parallel<sp/>should<sp/>already<sp/>work<sp/>and<sp/>yield<sp/>one<sp/>file<sp/>per</highlight></codeline>
<codeline><highlight class="normal">process<sp/>containing<sp/>the<sp/>local<sp/>data<sp/>block.</highlight></codeline>
<codeline><highlight class="normal">In<sp/>this<sp/>exercise<sp/>you<sp/>will<sp/>write<sp/>one<sp/>single<sp/>file<sp/>with<sp/>parallel<sp/>HDF5<sp/>whose<sp/>content</highlight></codeline>
<codeline><highlight class="normal">should<sp/>be<sp/>independent<sp/>from<sp/>the<sp/>number<sp/>of<sp/>processes<sp/>used.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>`mpi<sp/>plugin`<sp/>was<sp/>loaded<sp/>to<sp/>make<sp/>sharing<sp/>MPI<sp/>communicators<sp/>possible.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">There<sp/>are<sp/>several<sp/>tasks<sp/>in<sp/>this<sp/>exercise:</highlight></codeline>
<codeline><highlight class="normal">1.<sp/>Uncomment<sp/>the<sp/>`communicator`<sp/>directive<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>[Dec'HDF5<sp/>plugin](Decl_HDF5_plugin.html)<sp/>to<sp/>switch<sp/>to<sp/>parallel<sp/>I/O.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">2.<sp/>Change<sp/>the<sp/>file<sp/>name<sp/>so<sp/>all<sp/>processes<sp/>open<sp/>the<sp/>same<sp/>file.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">3.<sp/>Set<sp/>the<sp/>size<sp/>of<sp/>`main_field`<sp/>in<sp/>`datasets`<sp/>tree<sp/>to<sp/>take<sp/>the<sp/>global<sp/>matrix</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>into<sp/>account.<sp/>Hint:<sp/>use<sp/>`psize`.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">4.<sp/>Ensure<sp/>the<sp/>dataset<sp/>selection<sp/>of<sp/>each<sp/>process<sp/>does<sp/>not<sp/>overlap<sp/>with<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>others.<sp/>Hint:<sp/>use<sp/>`pcoord`.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Try<sp/>to<sp/>match<sp/>the<sp/>output<sp/>from<sp/>`ex9.out`,<sp/>that<sp/>should<sp/>be<sp/>independent<sp/>from<sp/>the</highlight></codeline>
<codeline><highlight class="normal">number<sp/>of<sp/>processes<sp/>used.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Touch<sp/>only<sp/>the<sp/>yaml<sp/>file<sp/>in<sp/>this<sp/>exercise.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Here<sp/>is<sp/>graphical<sp/>representation<sp/>of<sp/>the<sp/>parallel<sp/>I/O:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">![graphical<sp/>representation<sp/>of<sp/>the<sp/>parallel<sp/>I/O](PDI_hdf5_parallel.jpg)</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">##<sp/>What<sp/>next<sp/>?</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">You<sp/>can<sp/>experiment<sp/>with<sp/>other<sp/>[plugins](Plugins.html).</highlight></codeline>
<codeline><highlight class="normal">Have<sp/>a<sp/>look<sp/>at<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[PDI<sp/>examples](https://gitlab.maisondelasimulation.fr/pdidev/pdi/-/tree/master/example).</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/tutorial/README.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="plugins_2decl__hdf5_2README_8md" kind="file" language="Markdown">
    <compoundname>plugins/decl_hdf5/README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">\page<sp/>Decl_HDF5_plugin<sp/>The<sp/>Decl'HDF5<sp/>plugin</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**WARNING**<sp/>This<sp/>documentation<sp/>is<sp/>a<sp/>work<sp/>in<sp/>progress<sp/>and<sp/>does<sp/>not<sp/>reflect<sp/>the</highlight></codeline>
<codeline><highlight class="normal">full<sp/>Decl'HDF5<sp/>potential.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>Decl'HDF5<sp/>plugin<sp/>enables<sp/>one<sp/>to<sp/>read<sp/>and<sp/>write<sp/>data<sp/>from<sp/>HDF5<sp/>files<sp/>in<sp/>a</highlight></codeline>
<codeline><highlight class="normal">declarative<sp/>way.</highlight></codeline>
<codeline><highlight class="normal">Decl'HDF5<sp/>does<sp/>not<sp/>support<sp/>the<sp/>full<sp/>HDF5<sp/>feature<sp/>set<sp/>but<sp/>offers<sp/>a<sp/>simple</highlight></codeline>
<codeline><highlight class="normal">declarative<sp/>interface<sp/>to<sp/>access<sp/>a<sp/>large<sp/>subset<sp/>of<sp/>it.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>Configuration<sp/>grammar</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">At<sp/>its<sp/>root,<sp/>the<sp/>Decl'HDF5<sp/>configuration<sp/>is<sp/>made<sp/>of<sp/>either<sp/>a<sp/>single</highlight></codeline>
<codeline><highlight class="normal">`FILE_DESC`<sp/>or<sp/>a<sp/>list<sp/>of<sp/>`FILE_DESC`s.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">##<sp/>`FILE_DESC`</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>`FILE_DESC`<sp/>specifies<sp/>a<sp/>list<sp/>of<sp/>actions<sp/>to<sp/>execute<sp/>in<sp/>one<sp/>file.</highlight></codeline>
<codeline><highlight class="normal">It<sp/>is<sp/>specified<sp/>by<sp/>a<sp/>key/value<sp/>map<sp/>that<sp/>contains<sp/>at<sp/>least<sp/>the<sp/>`file`</highlight></codeline>
<codeline><highlight class="normal">key.</highlight></codeline>
<codeline><highlight class="normal">Other<sp/>keys<sp/>are<sp/>optional.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>possible<sp/>values<sp/>for<sp/>the<sp/>keys<sp/>are<sp/>as<sp/>follow:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`file`:<sp/>a<sp/>string<sp/>that<sp/>can<sp/>contain<sp/>$-expressions<sp/>and<sp/>specified<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>name<sp/>of<sp/>the<sp/>file<sp/>this<sp/>`FILE_DESC`<sp/>refers<sp/>to.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`write`:<sp/>a<sp/>`DATA_SECTION`<sp/>that<sp/>defaults<sp/>to<sp/>an<sp/>empty<sp/>one.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>This<sp/>`DATA_SECTION`<sp/>describes<sp/>writes<sp/>to<sp/>execute.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`write`:<sp/>a<sp/>`DATA_SECTION`<sp/>that<sp/>defaults<sp/>to<sp/>an<sp/>empty<sp/>one.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>This<sp/>`DATA_SECTION`<sp/>describes<sp/>reads<sp/>to<sp/>execute.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`on_event`:<sp/>a<sp/>string<sp/>identifying<sp/>an<sp/>event<sp/>when<sp/>the<sp/>whole<sp/>file<sp/>is</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>accessed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>If<sp/>not<sp/>specified,<sp/>each<sp/>data<sp/>is<sp/>written<sp/>when<sp/>it<sp/>is<sp/>exposed<sp/>and<sp/>the<sp/>file</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>is<sp/>opened<sp/>and<sp/>closed<sp/>every<sp/>time.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`when`:<sp/>a<sp/>$-expression<sp/>specifying<sp/>a<sp/>default<sp/>condition<sp/>to<sp/>test<sp/>before<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>executing<sp/>the<sp/>reads<sp/>and<sp/>writes<sp/>of<sp/>this<sp/>`FILE_DESC`.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>This<sp/>can<sp/>be<sp/>replaced<sp/>by<sp/>a<sp/>more<sp/>specific<sp/>condition<sp/>inside<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>`DATA_SECTION`.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`communicator`:<sp/>a<sp/>$-expression<sp/>referencing<sp/>a<sp/>MPI<sp/>communicator<sp/>to<sp/>use</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>HDF5<sp/>parallel<sp/>synchronized<sp/>reads<sp/>and<sp/>writes.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>It<sp/>defaults<sp/>to<sp/>MPI_COMM_SELF<sp/>which<sp/>stands<sp/>for<sp/>sequential<sp/>writes.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>In<sp/>case<sp/>of<sp/>data-triggered<sp/>(vs.<sp/>event-triggered)<sp/>reads<sp/>and<sp/>writes,<sp/>this</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>can<sp/>be<sp/>replaced<sp/>inside<sp/>the<sp/>`DATA_SECTION`.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`datasets`:<sp/>a<sp/>key-value<sp/>map<sp/>associating<sp/>a<sp/>PDI<sp/>type<sp/>to<sp/>string<sp/>keys.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Each<sp/>string<sp/>is<sp/>the<sp/>name<sp/>of<sp/>a<sp/>dataset<sp/>to<sp/>create<sp/>in<sp/>the<sp/>file<sp/>on<sp/>first</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>access,<sp/>with<sp/>the<sp/>type<sp/>described<sp/>in<sp/>the<sp/>value.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">##<sp/>`DATA_SECTION`</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>`DATA_SECTION`<sp/>describes<sp/>a<sp/>set<sp/>of<sp/>I/O<sp/>(read<sp/>or<sp/>write)<sp/>to<sp/>execute.</highlight></codeline>
<codeline><highlight class="normal">A<sp/>data<sp/>section<sp/>can<sp/>take<sp/>multiple<sp/>forms:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>list<sp/>of<sp/>strings,<sp/>each<sp/>being<sp/>the<sp/>name<sp/>of<sp/>a<sp/>PDI<sp/>data<sp/>to<sp/>write</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>key-value<sp/>map<sp/>where<sp/>each<sp/>key<sp/>is<sp/>the<sp/>name<sp/>of<sp/>a<sp/>PDI<sp/>data<sp/>to<sp/>write<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>the<sp/>value<sp/>is<sp/>either<sp/>a<sp/>single<sp/>`DATA_IO_DESC`<sp/>or<sp/>a<sp/>list<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>`DATA_IO_DESC`s<sp/>describing<sp/>the<sp/>I/O<sp/>(read<sp/>or<sp/>write)<sp/>to<sp/>execute.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>first<sp/>case<sp/>behaves<sp/>as<sp/>if<sp/>each<sp/>data<sp/>had<sp/>its<sp/>`DATA_IO_DESC`<sp/>specified</highlight></codeline>
<codeline><highlight class="normal">with<sp/>all<sp/>default<sp/>values.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">##<sp/>`DATA_IO_DESC`</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>`DATA_IO_DESC`<sp/>is<sp/>a<sp/>key-velue<sp/>map<sp/>describing<sp/>one<sp/><sp/>I/O<sp/>(read<sp/>or<sp/>write)</highlight></codeline>
<codeline><highlight class="normal">to<sp/>execute.</highlight></codeline>
<codeline><highlight class="normal">All<sp/>keys<sp/>are<sp/>optional<sp/>and<sp/>have<sp/>default<sp/>values.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>possible<sp/>values<sp/>for<sp/>the<sp/>keys<sp/>are<sp/>as<sp/>follow:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`dataset`:<sp/>a<sp/>$-expression<sp/>identifying<sp/>the<sp/>name<sp/>of<sp/>the<sp/>dataset<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>access<sp/>in<sp/>the<sp/>file.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>If<sp/>not<sp/>specified<sp/>this<sp/>defaults<sp/>to<sp/>the<sp/>name<sp/>of<sp/>the<sp/>data.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>On<sp/>writing,<sp/>if<sp/>the<sp/>dataset<sp/>does<sp/>not<sp/>exist<sp/>in<sp/>the<sp/>file<sp/>and<sp/>is<sp/>not</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>specified<sp/>in<sp/>the<sp/>`FILE_DESC`<sp/>then<sp/>a<sp/>dataset<sp/>with<sp/>the<sp/>same<sp/>size<sp/>as<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>memory<sp/>selection<sp/>is<sp/>automatically<sp/>created.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`when`:<sp/>a<sp/>$-expression<sp/>specifying<sp/>a<sp/>condition<sp/>to<sp/>test<sp/>before<sp/>executing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>the<sp/>I/O<sp/>operation<sp/>(read<sp/>or<sp/>write).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>This<sp/>defaults<sp/>to<sp/>the<sp/>value<sp/>specified<sp/>in<sp/>the<sp/>`FILE_DESC`<sp/>if<sp/>present</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>or<sp/>to<sp/>unconditional<sp/>I/O<sp/>otherwise.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`communicator`:<sp/>a<sp/>$-expression<sp/>referencing<sp/>a<sp/>MPI<sp/>communicator<sp/>to<sp/>use</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>HDF5<sp/>parallel<sp/>synchronized<sp/>I/O<sp/>operation<sp/>(read<sp/>or<sp/>write).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Specifying<sp/>communicator<sp/>at<sp/>this<sp/>level<sp/>is<sp/>incompatible<sp/>with</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>event-triggered<sp/>(vs.<sp/>data-triggered)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>This<sp/>defaults<sp/>to<sp/>the<sp/>value<sp/>specified<sp/>in<sp/>the<sp/>`FILE_DESC`<sp/>if<sp/>present</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>or<sp/>to<sp/>sequential<sp/>(MPI_COMM_SELF)<sp/>I/O<sp/>otherwise.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`memory_selection`:<sp/>a<sp/>`SELECTION_DESC`<sp/>specifying<sp/>the<sp/>selection<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data<sp/>in<sp/>memory<sp/>to<sp/>read<sp/>or<sp/>write.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>It<sp/>defaults<sp/>to<sp/>selecting<sp/>the<sp/>whole<sp/>data.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`dataset_selection`:<sp/>a<sp/>`SELECTION_DESC`<sp/>specifying<sp/>the<sp/>selection<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data<sp/>in<sp/>the<sp/>file<sp/>data<sp/>to<sp/>write<sp/>or<sp/>read.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>This<sp/>is<sp/>only<sp/>valid<sp/>if<sp/>the<sp/></highlight></codeline>
<codeline/>
<codeline><highlight class="normal">##<sp/>`SELECTION_DESC`</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>`SELECTION_DESC`<sp/>is<sp/>a<sp/>key-value<sp/>map<sp/>that<sp/>describes<sp/>the<sp/>selection<sp/>of<sp/>a</highlight></codeline>
<codeline><highlight class="normal">subset<sp/>of<sp/>data<sp/>from<sp/>a<sp/>larger<sp/>set.</highlight></codeline>
<codeline><highlight class="normal">All<sp/>keys<sp/>are<sp/>optional<sp/>and<sp/>have<sp/>default<sp/>values.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>possible<sp/>values<sp/>for<sp/>the<sp/>keys<sp/>are<sp/>as<sp/>follow:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`size`<sp/>is<sp/>either<sp/>a<sp/>single<sp/>$-expression<sp/>or<sp/>a<sp/>list<sp/>of<sp/>$-expressions.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>It<sp/>describes<sp/>the<sp/>size<sp/>of<sp/>the<sp/>selection<sp/>in<sp/>each<sp/>dimension.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>If<sp/>not<sp/>specified,<sp/>it<sp/>defaults<sp/>to<sp/>the<sp/>dimension<sp/>of<sp/>the<sp/>whole<sp/>data.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`start`<sp/>is<sp/>either<sp/>a<sp/>single<sp/>$-expression<sp/>or<sp/>a<sp/>list<sp/>of<sp/>$-expressions.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>It<sp/>describes<sp/>the<sp/>number<sp/>of<sp/>point<sp/>to<sp/>skip<sp/>in<sp/>each<sp/>dimension.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>If<sp/>not<sp/>specified<sp/>it<sp/>defaults<sp/>to<sp/>0<sp/>in<sp/>all<sp/>dimensions.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>In<sp/>practice,<sp/>it<sp/>can<sp/>only<sp/>be<sp/>specified<sp/>if<sp/>`size`<sp/>is<sp/>also.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>full<sp/>configuration<sp/>example</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">metadata:<sp/>#<sp/>small<sp/>values<sp/>for<sp/>which<sp/>PDI<sp/>keeps<sp/>a<sp/>copy</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>width:<sp/><sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>per<sp/>proc.<sp/>width<sp/>including<sp/>ghost</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>height:<sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>per<sp/>proc.<sp/>height<sp/>including<sp/>ghost</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pwidth:<sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>nb<sp/>proc.<sp/>in<sp/>the<sp/>x<sp/>dim</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pheight:<sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>nb<sp/>proc.<sp/>in<sp/>the<sp/>y<sp/>dim</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>iter:<sp/><sp/><sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>curent<sp/>iteration<sp/>id</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>coord:<sp/><sp/><sp/>{<sp/>type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>2<sp/>}<sp/>#<sp/>coordinate<sp/>of<sp/>the<sp/>process<sp/>as<sp/>[x,<sp/>y]</highlight></codeline>
<codeline><highlight class="normal">data:<sp/><sp/><sp/><sp/><sp/>#<sp/>values<sp/>that<sp/>are<sp/>not<sp/>copied<sp/>by<sp/>PDI</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>main_field:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>subtype:<sp/>double</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size:<sp/>[$width,<sp/>$height]</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>mpi:<sp/>#<sp/>loading<sp/>MPI_Comm<sp/>predefines<sp/>(e.g.<sp/>$MPI_COMM_WORLD)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>decl_hdf5:<sp/>#<sp/>a<sp/>list<sp/>of<sp/>file<sp/>to<sp/>write<sp/>to<sp/>(can<sp/>be<sp/>a<sp/>single<sp/>element)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>file:<sp/>data${coord[0]}x${coord[1]}.h5<sp/>#<sp/>the<sp/>file<sp/>in<sp/>which<sp/>to<sp/>write<sp/>the<sp/>data<sp/>(required)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_event:<sp/>newiter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>the<sp/>event<sp/>that<sp/>triggers<sp/>these<sp/>actions<sp/>(default:<sp/>trigger<sp/>on<sp/>data<sp/>expose)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>when:<sp/>"$iter&gt;0<sp/>&amp;<sp/>$iter&lt;11"<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>a<sp/>condition<sp/>when<sp/>to<sp/>actually<sp/>trigger<sp/>the<sp/>actions<sp/>(default:<sp/>always<sp/>true)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>communicator:<sp/>$MPI_COMM_SELF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>the<sp/>MPI<sp/>communicator<sp/>used<sp/>for<sp/>HDF5<sp/>parallel<sp/>synchronized<sp/>write<sp/>(default:<sp/>$MPI_COMM_SELF,<sp/>sequential<sp/>write)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>datasets:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>a<sp/>list<sp/>of<sp/>datasets<sp/>inside<sp/>the<sp/>file<sp/>created<sp/>on<sp/>first<sp/>access</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data/array:<sp/>#<sp/>a<sp/>dataset<sp/>name,<sp/>datasets<sp/>referenced<sp/>but<sp/>not<sp/>defined<sp/>are<sp/>created<sp/>just<sp/>big<sp/>enough<sp/>to<sp/>fit<sp/>the<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtype:<sp/>double<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>type<sp/>of<sp/>the<sp/>data<sp/>in<sp/>the<sp/>dataset</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/>[10,<sp/>$width-2,<sp/>$width-2]<sp/>#<sp/>size<sp/>of<sp/>the<sp/>dataset</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>write:<sp/>#<sp/>a<sp/>list<sp/>or<sp/>map<sp/>of<sp/>data<sp/>to<sp/>write<sp/>(default:<sp/>empty)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>main_field:<sp/>#<sp/>name<sp/>of<sp/>the<sp/>data,<sp/>it<sp/>contains<sp/>either<sp/>a<sp/>list<sp/>or<sp/>a<sp/>single<sp/>write<sp/>to<sp/>execute</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>dataset:<sp/>data/array<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>a<sp/>dataset<sp/>name<sp/>(default:<sp/>the<sp/>data<sp/>name)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>when:<sp/>"$iter&gt;0&amp;$iter&lt;11"<sp/>#<sp/>an<sp/>additional<sp/>condition<sp/>when<sp/>to<sp/>actually<sp/>trigger<sp/>the<sp/>actions<sp/>(default:<sp/>always<sp/>true)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>communicator:<sp/>$MPI_COMM_SELF<sp/><sp/><sp/>#<sp/>the<sp/>MPI<sp/>communicator<sp/>used<sp/>for<sp/>HDF5<sp/>parallel<sp/>synchronized<sp/>write<sp/>(default:<sp/>that<sp/>of<sp/>the<sp/>file)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory_selection:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/><sp/>[$width-2,<sp/>$height-2]<sp/>#<sp/>number<sp/>of<sp/>elements<sp/>to<sp/>transfer<sp/>in<sp/>each<sp/>dimension<sp/>(default:<sp/>size<sp/>of<sp/>the<sp/>full<sp/>data)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start:<sp/>[1,<sp/>1]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>coordinate<sp/>of<sp/>the<sp/>start<sp/>point<sp/>in<sp/>memory<sp/>relative<sp/>to<sp/>the<sp/>shared<sp/>data<sp/>(default:<sp/>0<sp/>in<sp/>each<sp/>dimensions)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataset_selection:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/><sp/>[1,<sp/>$width-2,<sp/>$width-2]<sp/>#<sp/>number<sp/>of<sp/>elements<sp/>to<sp/>transfer<sp/>in<sp/>each<sp/>dimension,<sp/>must<sp/>amount<sp/>to<sp/>the<sp/>same<sp/>number<sp/>as<sp/>the<sp/>memory<sp/>selection<sp/>(default:<sp/>size<sp/>of<sp/>memory<sp/>slab)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start:<sp/>[$iter,<sp/>0,<sp/>0]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>coordinate<sp/>of<sp/>the<sp/>start<sp/>point<sp/>in<sp/>the<sp/>file<sp/>relative<sp/>to<sp/>the<sp/>dataset<sp/>(default:<sp/>0<sp/>in<sp/>each<sp/>dimensions)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>read:<sp/>#<sp/>a<sp/>list<sp/>or<sp/>map<sp/>of<sp/>data<sp/>to<sp/>read,<sp/>similar<sp/>to<sp/>write<sp/>(default:<sp/>empty)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>another_value</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/plugins/decl_hdf5/README.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="plugins_2flowvr_2README_8md" kind="file" language="Markdown">
    <compoundname>plugins/flowvr/README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">\page<sp/>FlowVR_plugin<sp/>The<sp/>FlowVR<sp/>plugin</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>[FlowVR](http://flowvr.sourceforge.net)<sp/>plugin<sp/>lets<sp/>you<sp/>write<sp/>FlowVR<sp/>modules</highlight></codeline>
<codeline><highlight class="normal"><sp/>without<sp/>knowing<sp/>any<sp/>specific<sp/>FlowVR<sp/>API<sp/>calls.<sp/>Properly<sp/>created<sp/>%PDI<sp/>configuration</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>file<sp/>allows<sp/>you<sp/>to<sp/>care<sp/>only<sp/>about<sp/>proper<sp/>input/output<sp/>calls,<sp/>but<sp/>this<sp/>plugin<sp/>does</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>not<sp/>support<sp/>the<sp/>full<sp/>FlowVR<sp/>feature<sp/>set.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>configuration<sp/>Configuration<sp/>elements</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>flowvr_tree<sp/>FlowVR<sp/>plugin<sp/>tree</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>root<sp/>of<sp/>FlowVR<sp/>plugin<sp/>configuration<sp/>(named<sp/>`flowvr`),<sp/>is<sp/>a<sp/>dictionary<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline><highlight class="normal">-<sp/>\ref<sp/>component_node</highlight></codeline>
<codeline><highlight class="normal">-<sp/>\ref<sp/>wait_on_data_node<sp/>(*recommended*)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>\ref<sp/>wait_on_node<sp/>(*optional*)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>\ref<sp/>status_node<sp/>(*optional*)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>\ref<sp/>abort_on_node<sp/>(*optional*)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>\ref<sp/>init_on_node<sp/>(*optional*)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>\ref<sp/>input_ports<sp/>(*optional*)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>\ref<sp/>output_ports<sp/>(*optional*)</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsubsection<sp/>component_node<sp/>component</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">For<sp/>now<sp/>only<sp/>available<sp/>component<sp/>is<sp/>`module`,<sp/>but<sp/>this<sp/>can<sp/>be<sp/>expanded<sp/>to<sp/>`filter`<sp/>and<sp/>`synchronizer`<sp/>in<sp/>the<sp/>future.</highlight></codeline>
<codeline><highlight class="normal">Configuration<sp/>example:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsubsection<sp/>wait_on_data_node<sp/>wait_on_data</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/>The<sp/>plugin<sp/>will<sp/>call<sp/>`wait`<sp/>funciton<sp/>every<sp/>time<sp/>given<sp/>descriptors<sp/>will<sp/>be<sp/>shared<sp/>with<sp/>`PDI_IN`</highlight></codeline>
<codeline><highlight class="normal"><sp/>access<sp/>direction.<sp/>This<sp/>descriptor<sp/>must<sp/>be<sp/>an<sp/>integer<sp/>type<sp/>and<sp/>the<sp/>status<sp/>returned<sp/>from<sp/>this<sp/>call</highlight></codeline>
<codeline><highlight class="normal"><sp/>will<sp/>be<sp/>written<sp/>as<sp/>a<sp/>response.</highlight></codeline>
<codeline><highlight class="normal"><sp/>Configuration<sp/>example:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wait_desc:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on_data:<sp/>wait_desc</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsubsection<sp/>wait_on_node<sp/>wait_on</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Defines<sp/>on<sp/>which<sp/>events<sp/>the<sp/>plugin<sp/>calls<sp/>the<sp/>`wait`<sp/>function.<sp/>The<sp/>value<sp/>can<sp/>be<sp/>either<sp/>single<sp/>event</highlight></codeline>
<codeline><highlight class="normal">name<sp/>or<sp/>the<sp/>array<sp/>of<sp/>events<sp/>names<sp/>(both<sp/>examples<sp/>presented<sp/>below).<sp/>This<sp/>method<sp/>of<sp/>calling<sp/>`wait`</highlight></codeline>
<codeline><highlight class="normal">should<sp/>be<sp/>avoided<sp/>if<sp/>possible,<sp/>because<sp/>it's<sp/>not<sp/>returning<sp/>the<sp/>wait<sp/>status.<sp/>Configuration<sp/>examples:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on:<sp/>"wait_event"</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on:<sp/>["wait_event_1",<sp/>"wait_event_2"]</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsubsection<sp/>status_node<sp/>status</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">%PDI<sp/>will<sp/>copy<sp/>the<sp/>status<sp/>of<sp/>the<sp/>module<sp/>to<sp/>the<sp/>given<sp/>descriptor.<sp/>The<sp/>same<sp/>as<sp/>the<sp/>`wait_on`<sp/>it<sp/>can<sp/>be<sp/>a<sp/>single</highlight></codeline>
<codeline><highlight class="normal">name<sp/>or<sp/>an<sp/>array<sp/>of<sp/>names.<sp/>Configuration<sp/>example:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wait_desc:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>status_desc:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on_data:<sp/>wait_desc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>status:<sp/>status_desc</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsubsection<sp/>abort_on_node<sp/>abort_on</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Defines<sp/>on<sp/>which<sp/>events<sp/>the<sp/>plugin<sp/>calls<sp/>the<sp/>`abort`<sp/>function<sp/>which<sp/>will<sp/>stop<sp/>the<sp/>flowvr<sp/>application.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>value<sp/>can<sp/>be<sp/>either<sp/>single<sp/>event<sp/>name<sp/>or<sp/>the<sp/>array<sp/>of<sp/>events<sp/>names.<sp/>Configuration<sp/>examples:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wait_desc:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on_data:<sp/>wait_desc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>abort_on:<sp/>"abort_event"</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsubsection<sp/>init_on_node<sp/>init_on</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Defining<sp/>this<sp/>subtree<sp/>tells<sp/>%PDI<sp/>that<sp/>the<sp/>plugin<sp/>should<sp/>be<sp/>initialized<sp/>not<sp/>on<sp/>`PDI_init`,<sp/>but<sp/>on<sp/>given<sp/>event.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wait_desc:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on_data:<sp/>wait_desc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>init_on:<sp/>"init_event"</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsubsection<sp/>parallel_node<sp/>parallel</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">This<sp/>node<sp/>can<sp/>be<sp/>for<sp/>reading<sp/>rank<sp/>and<sp/>size<sp/>of<sp/>the<sp/>world,<sp/>but<sp/>also<sp/>can<sp/>be<sp/>for<sp/>setting<sp/>this<sp/>values.</highlight></codeline>
<codeline><highlight class="normal">`get_rank`<sp/>will<sp/>copy<sp/>process's<sp/>rank<sp/>to<sp/>given<sp/>descriptor<sp/>on<sp/>share,<sp/>`get_size`<sp/>will<sp/>save<sp/>the<sp/></highlight></codeline>
<codeline><highlight class="normal">world<sp/>size<sp/>the<sp/>same<sp/>way.<sp/>Example:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wait_desc:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rank_desc:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_desc:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on_data:<sp/>wait_desc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>parallel:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>get_rank:<sp/>rank_desc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>get_size:<sp/>size_desc</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Values<sp/>(use<sp/>`$`<sp/>expression)<sp/>from<sp/>descriptors<sp/>defined<sp/>in<sp/>`set_rank`<sp/>and<sp/>`set_size`<sp/>will<sp/>be<sp/>passed</highlight></codeline>
<codeline><highlight class="normal">to<sp/>flowvr<sp/>and<sp/>set<sp/>the<sp/>environment.<sp/>Setting<sp/>this<sp/>parameters<sp/>must<sp/>occur<sp/>before<sp/>plugin<sp/>initialization.<sp/>For<sp/>this</highlight></codeline>
<codeline><highlight class="normal">you<sp/>need<sp/>to<sp/>use<sp/>`init_on`<sp/>event<sp/>and<sp/>call<sp/>this<sp/>event<sp/>after<sp/>setting<sp/>rank<sp/>and<sp/>size.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wait_desc:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rank_desc:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_desc:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on_data:<sp/>wait_desc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>parallel:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_rank:<sp/>$rank_desc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_size:<sp/>$size_desc</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsubsection<sp/>several_modules<sp/>Several<sp/>modules</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Single<sp/>program<sp/>can<sp/>run<sp/>several<sp/>modules<sp/>at<sp/>once.<sp/>To<sp/>make<sp/>it<sp/>work<sp/>just<sp/>create<sp/>array<sp/>of<sp/>modules<sp/>in<sp/>`flowvr`<sp/>tree.</highlight></codeline>
<codeline><highlight class="normal">Configuration<sp/>example:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wait_1:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wait_2:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on_data:<sp/>wait_1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on_data:<sp/>wait_2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>ports<sp/>Ports</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsubsection<sp/>input_ports<sp/>input_ports</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Input<sp/>ports<sp/>are<sp/>defined<sp/>in<sp/>`input_ports`<sp/>tree.<sp/>Each<sp/>port<sp/>is<sp/>defined<sp/>by<sp/>name<sp/>and<sp/>\ref<sp/>message<sp/>it<sp/>will<sp/>receive.</highlight></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>add<sp/>`event_port:<sp/>true`<sp/>to<sp/>define<sp/>this<sp/>as<sp/>event<sp/>port<sp/>(non-blocking).</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>input_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name_1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name_2:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_port:<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsubsection<sp/>output_ports<sp/>output_ports</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Output<sp/>ports<sp/>are<sp/>defined<sp/>in<sp/>`output_ports`<sp/>tree.<sp/>Each<sp/>port<sp/>is<sp/>defined<sp/>by<sp/>name<sp/>and<sp/>\ref<sp/>message<sp/>it<sp/>will<sp/>send.</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name_1:<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name_2:<sp/>...</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>message<sp/>Message</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Flowvr<sp/>message<sp/>consists<sp/>of<sp/>payload<sp/>and<sp/>stamps.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>`payload`<sp/>is<sp/>defined<sp/>by<sp/>user<sp/>by<sp/>a<sp/>specific<sp/>key<sp/>in<sp/>port<sp/>definition:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|message<sp/>type|</highlight></codeline>
<codeline><highlight class="normal">|:----|:----|</highlight></codeline>
<codeline><highlight class="normal">|"data"|\ref<sp/>data_payload|</highlight></codeline>
<codeline><highlight class="normal">|"chunks"|\ref<sp/>chunks_payload|</highlight></codeline>
<codeline><highlight class="normal">|"event_button"|\ref<sp/>button_payload|</highlight></codeline>
<codeline><highlight class="normal">|"event_mouse"|\ref<sp/>mouse_payload|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">If<sp/>none<sp/>of<sp/>the<sp/>message<sp/>type<sp/>will<sp/>be<sp/>given,<sp/>plugin<sp/>will<sp/>create<sp/>a<sp/>STAMP<sp/>port<sp/>(message<sp/>has<sp/>no<sp/>payload).</highlight></codeline>
<codeline><highlight class="normal">`stamps`<sp/>are<sp/>described<sp/>in<sp/>\ref<sp/>stamp<sp/>section.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsubsection<sp/>data_payload<sp/>Data<sp/>payload</highlight></codeline>
<codeline><highlight class="normal">Requires<sp/>`data`<sp/>key<sp/>in<sp/>a<sp/>port<sp/>tree.<sp/>This<sp/>configuration<sp/>means<sp/>that<sp/>module<sp/>will<sp/>send<sp/>simple<sp/>buffer.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>plugin<sp/>doesn't<sp/>know<sp/>the<sp/>type<sp/>of<sp/>sending<sp/>data.<sp/>The<sp/>value<sp/>of<sp/>`data`<sp/>key<sp/>is<sp/>the<sp/>name<sp/>of</highlight></codeline>
<codeline><highlight class="normal">the<sp/>descriptor<sp/>where:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">-<sp/>for<sp/>input<sp/>port<sp/>-<sp/>FlowVR<sp/>plugin<sp/>will<sp/>write<sp/>to<sp/>received<sp/>data</highlight></codeline>
<codeline><highlight class="normal">-<sp/>for<sp/>output<sp/>port<sp/>-<sp/>FlowVR<sp/>plugin<sp/>will<sp/>read<sp/>from<sp/>to<sp/>send<sp/>data</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Example<sp/>of<sp/>`data`<sp/>in<sp/>output<sp/>port:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data_desc:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>32}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>data_desc</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>user<sp/>can<sp/>not<sp/>always<sp/>predict<sp/>how<sp/>many<sp/>data<sp/>will<sp/>receive.<sp/>In<sp/>this<sp/>case</highlight></codeline>
<codeline><highlight class="normal">`size`<sp/>node<sp/>type<sp/>must<sp/>be<sp/>a<sp/>name<sp/>of<sp/>metadata<sp/>where<sp/>to<sp/>write<sp/>the<sp/>size<sp/>of<sp/>received<sp/>payload.</highlight></codeline>
<codeline><highlight class="normal">This<sp/>metadata<sp/>will<sp/>hold<sp/>the<sp/>size<sp/>of<sp/>received<sp/>array.<sp/>The<sp/>`size`<sp/>property<sp/>of<sp/>descriptor</highlight></codeline>
<codeline><highlight class="normal">should<sp/>be<sp/>divided<sp/>by<sp/>size<sp/>of<sp/>single<sp/>element.<sp/>Example<sp/>of<sp/>receiving<sp/>unknown<sp/>payload<sp/>size:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>received_size<sp/>:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data_descriptor_name:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>$received_size/4}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>input_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>port_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>data_descriptor_name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/>received_size</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">In<sp/>case<sp/>that<sp/>you<sp/>want<sp/>to<sp/>send<sp/>only<sp/>a<sp/>part<sp/>of<sp/>the<sp/>data<sp/>from<sp/>descriptor<sp/>you<sp/>can<sp/>specify<sp/>it</highlight></codeline>
<codeline><highlight class="normal">in<sp/>`copy_data_selection`<sp/>tree<sp/>defining<sp/>datatype<sp/>the<sp/>same<sp/>way<sp/>as<sp/>for<sp/>descriptors.<sp/>Simple<sp/>example:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data_descriptor_name:<sp/><sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>[32,<sp/>32]}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>data_descriptor_name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copy_data_selection:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtype:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/>[32,<sp/>32]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subsize:<sp/>[30,<sp/>30]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start:<sp/>[1,<sp/>1]</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>chunks_payload<sp/>Chunk<sp/>payload</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Requires<sp/>`chunks`<sp/>key<sp/>in<sp/>a<sp/>port<sp/>tree.<sp/>This<sp/>configuration<sp/>means<sp/>that<sp/>module<sp/>will<sp/>send<sp/>several<sp/>buffers<sp/>in</highlight></codeline>
<codeline><highlight class="normal">one<sp/>payload.<sp/>Value<sp/>of<sp/>the<sp/>`chunks`<sp/>key<sp/>is<sp/>the<sp/>list<sp/>of<sp/>\ref<sp/>data_payload.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">WARNING</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">After<sp/>each<sp/>wait,<sp/>the<sp/>first<sp/>access<sp/>to<sp/>the<sp/>any<sp/>descriptor<sp/>(that<sp/>belongs<sp/>to<sp/>the<sp/>chunks)</highlight></codeline>
<codeline><highlight class="normal">will<sp/>allocate<sp/>the<sp/>memory<sp/>for<sp/>the<sp/>all<sp/>descriptors.<sp/>This<sp/>means<sp/>that<sp/>all<sp/>sizes</highlight></codeline>
<codeline><highlight class="normal">(if<sp/>stored<sp/>as<sp/>metadata)<sp/>should<sp/>be<sp/>set<sp/>before<sp/>first<sp/>access<sp/>to<sp/>any<sp/>of<sp/>the<sp/>descriptors.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>chunk_1_name:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>chunk_2_name:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>255}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>chunk_3_name:<sp/>float</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chunks:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>data:<sp/>chunk_1_name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>data:<sp/>chunk_2_name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>data:<sp/>chunk_3_name</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>button_payload<sp/>Event<sp/>button<sp/>payload</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Requires<sp/>`event_button`<sp/>key<sp/>in<sp/>a<sp/>port<sp/>tree.<sp/>The<sp/>payload<sp/>holds<sp/>the<sp/>values<sp/>of<sp/>the<sp/>keyboard<sp/>keys</highlight></codeline>
<codeline><highlight class="normal">pressed<sp/>during<sp/>iteration.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>full<sp/>list<sp/>of<sp/>predefined<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key<sp/>in<sp/>configuration|key<sp/>on<sp/>keyboard|</highlight></codeline>
<codeline><highlight class="normal">|:----|:----|</highlight></codeline>
<codeline><highlight class="normal">|KEY_F1|F1|</highlight></codeline>
<codeline><highlight class="normal">|KEY_F2|F2|</highlight></codeline>
<codeline><highlight class="normal">|KEY_F3|F3|</highlight></codeline>
<codeline><highlight class="normal">|KEY_F4|F4|</highlight></codeline>
<codeline><highlight class="normal">|KEY_F5|F5|</highlight></codeline>
<codeline><highlight class="normal">|KEY_F6|F6|</highlight></codeline>
<codeline><highlight class="normal">|KEY_F7|F7|</highlight></codeline>
<codeline><highlight class="normal">|KEY_F8|F8|</highlight></codeline>
<codeline><highlight class="normal">|KEY_F9|F9|</highlight></codeline>
<codeline><highlight class="normal">|KEY_F10|F10|</highlight></codeline>
<codeline><highlight class="normal">|KEY_F11|F11|</highlight></codeline>
<codeline><highlight class="normal">|KEY_F12|F12|</highlight></codeline>
<codeline><highlight class="normal">|KEY_UP|Up<sp/>Arrow|</highlight></codeline>
<codeline><highlight class="normal">|KEY_DOWN|Down<sp/>Arrow|</highlight></codeline>
<codeline><highlight class="normal">|KEY_LEFT|Left<sp/>Arrow|</highlight></codeline>
<codeline><highlight class="normal">|KEY_RIGHT|Right<sp/>Arrow|</highlight></codeline>
<codeline><highlight class="normal">|KEY_PAGE_UP|Page<sp/>Up|</highlight></codeline>
<codeline><highlight class="normal">|KEY_PAGE_DOWN|Page<sp/>Down|</highlight></codeline>
<codeline><highlight class="normal">|KEY_HOME|Home|</highlight></codeline>
<codeline><highlight class="normal">|KEY_END|End|</highlight></codeline>
<codeline><highlight class="normal">|KEY_INSERT|Insert|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Value<sp/>for<sp/>each<sp/>key<sp/>in<sp/>configuration<sp/>is<sp/>a<sp/>descriptor<sp/>of<sp/>integer<sp/>type.<sp/>You<sp/>need<sp/>to<sp/>make<sp/>sure<sp/>that</highlight></codeline>
<codeline><highlight class="normal">you<sp/>are<sp/>setting<sp/>this<sp/>descriptors<sp/>with<sp/>correct<sp/>values<sp/>on<sp/>each<sp/>iteration.<sp/>Example<sp/>of<sp/>configuration<sp/>with</highlight></codeline>
<codeline><highlight class="normal">arrow<sp/>buttons:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>up:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>down:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>left:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>right:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_button:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY_UP:<sp/>up</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY_DOWN:<sp/>down</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY_LEFT:<sp/>left</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY_RIGHT:<sp/>right</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>mouse_payload<sp/>Event<sp/>mouse<sp/>payload</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Requires<sp/>`event_mouse`<sp/>key<sp/>in<sp/>a<sp/>port<sp/>tree.<sp/>The<sp/>payload<sp/>holds<sp/>the<sp/>values<sp/>of<sp/>the<sp/>mouse<sp/>keys</highlight></codeline>
<codeline><highlight class="normal">pressed<sp/>and<sp/>cursor<sp/>position<sp/>during<sp/>iteration.<sp/>The<sp/>button<sp/>state<sp/>is<sp/>saved<sp/>in<sp/>descriptors<sp/>of<sp/>integer<sp/>type</highlight></codeline>
<codeline><highlight class="normal">and<sp/>a<sp/>cursor<sp/>position<sp/>in<sp/>an<sp/>array<sp/>of<sp/>2<sp/>floats.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Available<sp/>keys<sp/>in<sp/>`event_mouse`<sp/>tree:</highlight></codeline>
<codeline><highlight class="normal">|key|description|</highlight></codeline>
<codeline><highlight class="normal">|:----|:----|</highlight></codeline>
<codeline><highlight class="normal">|POS_XY|cursor<sp/>position|</highlight></codeline>
<codeline><highlight class="normal">|LEFT_BUTTON|left<sp/>mouse<sp/>button|</highlight></codeline>
<codeline><highlight class="normal">|MIDDLE_BUTTON|middle<sp/>mouse<sp/>button|</highlight></codeline>
<codeline><highlight class="normal">|RIGHT_BUTTON|right<sp/>mouse<sp/>button|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/>Example<sp/>of<sp/>configuration<sp/>with<sp/>all<sp/>keys<sp/>defined:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pos_xy:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>float,<sp/>size:<sp/>2}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>left_button:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>right_button:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>middle_button:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_mouse:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POS_XY:<sp/>pos_xy</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEFT_BUTTON:<sp/>left_button</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RIGHT_BUTTON:<sp/>right_button</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MIDDLE_BUTTON:<sp/>middle_button</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>stamp<sp/>Stamp</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>`stamps`<sp/>key<sp/>must<sp/>be<sp/>defined<sp/>in<sp/>a<sp/>port<sp/>tree.<sp/>The<sp/>value<sp/>of<sp/>`stamps`<sp/>is<sp/>simply<sp/>a<sp/>map<sp/>with<sp/>the<sp/>stamp</highlight></codeline>
<codeline><highlight class="normal">name<sp/>and<sp/>descriptor<sp/>name.<sp/>The<sp/>given<sp/>descriptor<sp/>must<sp/>have<sp/>a<sp/>valid<sp/>%PDI<sp/>type,<sp/>limited<sp/>to:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">-<sp/>`int`</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`float`</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`array<sp/>of<sp/>ints`</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`array<sp/>of<sp/>floats`</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`array<sp/>of<sp/>chars`</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">Example<sp/>of<sp/>message<sp/>with<sp/>\ref<sp/>data_payload<sp/>and<sp/>2<sp/>stamps:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data_desc:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>256}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>stamp_1_desc:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>stamp_2_desc:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>float,<sp/>size:<sp/>2}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>data_desc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stamps:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stamp_1_name:<sp/>stamp_1_desc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stamp_2_name:<sp/>stamp_2_desc</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">For<sp/>output<sp/>port<sp/>stamp<sp/>can<sp/>be<sp/>also<sp/>define<sp/>as<sp/>an<sp/>expression,<sp/>but<sp/>stamp<sp/>will<sp/>need<sp/>type<sp/>definition<sp/>in<sp/>this<sp/>case.</highlight></codeline>
<codeline><highlight class="normal">Example<sp/>of<sp/>expression<sp/>stamp:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>value_desc:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stamps:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stamp_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expression:<sp/>($value_desc/2)<sp/>*<sp/>3</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">For<sp/>now<sp/>only<sp/>int<sp/>and<sp/>string<sp/>stamps<sp/>are<sp/>supported<sp/>as<sp/>expression.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>c_api<sp/>Reading<sp/>and<sp/>writing<sp/>data<sp/>examples</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">FlowVR<sp/>plugin<sp/>uses<sp/>2<sp/>ways<sp/>to<sp/>handle<sp/>data<sp/>reading<sp/>and<sp/>writing:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">1.<sp/>Access<sp/>the<sp/>shared<sp/>memory<sp/>-<sp/>the<sp/>fastest<sp/>way,<sp/>user<sp/>operates<sp/>on<sp/>flowvr<sp/>shared<sp/>memory.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">2.<sp/>Copy<sp/>the<sp/>data<sp/>from<sp/>shared<sp/>memory<sp/>to<sp/>descriptor<sp/>-<sp/>needs<sp/>the<sp/>data<sp/>copy<sp/>(convenient<sp/>for<sp/>small</highlight></codeline>
<codeline><highlight class="normal"><sp/>messages<sp/>or<sp/>sparse<sp/>data<sp/>types).</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>read_shared<sp/>Read<sp/>data<sp/>from<sp/>FlowVR<sp/>message<sp/>by<sp/>access<sp/>the<sp/>shared<sp/>memory</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>text_shr:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>4}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>input_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>text_shr</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">char*<sp/>text_shr;</highlight></codeline>
<codeline><highlight class="normal">PDI_access("text_shr",<sp/>(void**)&amp;text_shr,<sp/>PDI_IN);</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">//<sp/>do<sp/>something<sp/>with<sp/>text_shr<sp/>or<sp/>copy<sp/>data<sp/>to<sp/>local<sp/>buffer</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">PDI_release("text_shr");<sp/>//<sp/>really<sp/>important<sp/>to<sp/>release<sp/>descriptors</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>write_shared<sp/>Write<sp/>data<sp/>from<sp/>FlowVR<sp/>message<sp/>by<sp/>access<sp/>the<sp/>shared<sp/>memory</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>text_shr:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>4}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>text_shr</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">char*<sp/>text_shr;</highlight></codeline>
<codeline><highlight class="normal">PDI_access("text_shr",<sp/>(void**)&amp;text_shr,<sp/>PDI_OUT);</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">//<sp/>do<sp/>something<sp/>with<sp/>text_shr<sp/>or<sp/>copy<sp/>data<sp/>from<sp/>local<sp/>buffer</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">PDI_release("text_shr");<sp/>//<sp/>really<sp/>important<sp/>to<sp/>release<sp/>descriptors</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>read_copy<sp/>Read<sp/>data<sp/>from<sp/>FlowVR<sp/>message<sp/>by<sp/>copy<sp/>from<sp/>the<sp/>shared<sp/>memory</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>text:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>4}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>input_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>text</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">char<sp/>text[4];</highlight></codeline>
<codeline><highlight class="normal">PDI_expose("text",<sp/>text,<sp/>PDI_IN);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>write_copy<sp/>Write<sp/>data<sp/>to<sp/>FlowVR<sp/>message<sp/>by<sp/>copy<sp/>to<sp/>the<sp/>shared<sp/>memory</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>text:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>4}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>text</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">char<sp/>text[4];</highlight></codeline>
<codeline><highlight class="normal">PDI_expose("text",<sp/>text,<sp/>PDI_OUT);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>wrtie_sparse<sp/>Write<sp/>data<sp/>to<sp/>FlowVR<sp/>message<sp/>by<sp/>copy<sp/>the<sp/>subset<sp/>of<sp/>data<sp/>to<sp/>the<sp/>shared<sp/>memory</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_array:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>[20,<sp/>20]}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>my_array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_data_selection:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>[20,<sp/>20],<sp/>subsize:<sp/>[10,<sp/>10],<sp/>start:<sp/>[0,<sp/>0]}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>my_array[400];</highlight></codeline>
<codeline><highlight class="normal">PDI_expose("my_array",<sp/>my_array,<sp/>PDI_OUT);<sp/>//<sp/>copies<sp/>only<sp/>100<sp/>elements</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>Reading<sp/>and<sp/>writing<sp/>stamps<sp/>examples</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Stamps<sp/>are<sp/>always<sp/>copied<sp/>from<sp/>descriptor<sp/>to<sp/>flowvr<sp/>message.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>read_stamp<sp/>Read<sp/>stamp<sp/>from<sp/>FlowVR<sp/>message</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>stamp_it:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>input_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stamps:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it:<sp/>stamp_it</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>stamp_it<sp/>=<sp/>some_value;</highlight></codeline>
<codeline><highlight class="normal">PDI_expose("stamp_it",<sp/>&amp;stamp_it,<sp/>PDI_IN);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>write_stamp<sp/>Write<sp/>stamp<sp/>from<sp/>FlowVR<sp/>message</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>user_stamp:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stamps:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user_defined_stamp:<sp/>user_stamp</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>user_stamp<sp/>=<sp/>some_value;</highlight></codeline>
<codeline><highlight class="normal">PDI_expose("user_stamp",<sp/>&amp;user_stamp,<sp/>PDI_OUT);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>mouse_button_event<sp/>Reading<sp/>and<sp/>writing<sp/>mouse<sp/>and<sp/>button<sp/>event<sp/>examples</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>write_mouse<sp/>Write<sp/>mouse<sp/>event<sp/>from<sp/>FlowVR<sp/>message</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pos_xy:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>float,<sp/>size:<sp/>2}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>left_button:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>keysOut:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event_mouse:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POS_XY:<sp/>pos_xy</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEFT_BUTTON:<sp/>left_button</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">float<sp/>pos_xy[2]<sp/>=<sp/>{x_pos,<sp/>y_pos};</highlight></codeline>
<codeline><highlight class="normal">PDI_expose("pos_xy",<sp/>&amp;pos_xy,<sp/>PDI_OUT);</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">int<sp/>left_button<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">PDI_expose("left_button",<sp/>&amp;left_button,<sp/>PDI_OUT);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>read_mouse<sp/>Read<sp/>mouse<sp/>event<sp/>from<sp/>FlowVR<sp/>message</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pos_xy:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>float,<sp/>size:<sp/>2}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>left_button:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">input_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>keysIn:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>event_mouse:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>POS_XY:<sp/>pos_xy</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LEFT_BUTTON:<sp/>left_button</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">float<sp/>pos_xy;</highlight></codeline>
<codeline><highlight class="normal">PDI_expose("pos_xy",<sp/>&amp;pos_xy,<sp/>PDI_IN);</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">int<sp/>left_button;</highlight></codeline>
<codeline><highlight class="normal">PDI_expose("left_button",<sp/>&amp;left_button,<sp/>PDI_IN);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>write_button<sp/>Write<sp/>button<sp/>event<sp/>from<sp/>FlowVR<sp/>message</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>up:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>down:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>keysOut:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event_button:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY_UP:<sp/>up</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY_DOWN:<sp/>down</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>up_state<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">PDI_expose("up",<sp/>&amp;up_state,<sp/>PDI_OUT);</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">int<sp/>down_state<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">PDI_expose("down",<sp/>&amp;down_state,<sp/>PDI_OUT);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>read_button<sp/>Read<sp/>button<sp/>event<sp/>from<sp/>FlowVR<sp/>message</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>up:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>down:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>input_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>keysIn:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event_button:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY_UP:<sp/>up</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY_DOWN:<sp/>down</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>up_state;</highlight></codeline>
<codeline><highlight class="normal">PDI_expose("up",<sp/>&amp;up_state,<sp/>PDI_IN);</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">int<sp/>down_state;</highlight></codeline>
<codeline><highlight class="normal">PDI_expose("down",<sp/>&amp;down_state,<sp/>PDI_IN);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>flowvr_examples<sp/>FlowVR<sp/>examples<sp/>reworked<sp/>for<sp/>%PDI</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Path<sp/>to<sp/>the<sp/>examples:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```path</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pdi/build/pdi_plugin-flowvr/src/FLOWVR_PLUGIN-build/examples/</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Original<sp/>flowvr<sp/>source<sp/>files<sp/>are<sp/>in<sp/>directories<sp/>`flowvr_original`.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>run_app<sp/>Running<sp/>the<sp/>application</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">1.<sp/>Go<sp/>to<sp/>examples<sp/>folder:<sp/>`cd<sp/>pdi_plugin-flowvr/src/FLOWVR_PLUGIN-build/examples`</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>Run<sp/>`source<sp/>flowvr-config.sh`.<sp/>Now<sp/>your<sp/>environment<sp/>is<sp/>ready.</highlight></codeline>
<codeline><highlight class="normal">3.<sp/>Run<sp/>flowvr<sp/>daemon<sp/>on<sp/>your<sp/>system<sp/>(best<sp/>in<sp/>new<sp/>terminal,<sp/>repeat<sp/>1.<sp/>and<sp/>2.):<sp/>`flowvrd<sp/>--top`</highlight></codeline>
<codeline><highlight class="normal">4.<sp/>Inside<sp/>`$example_name`<sp/>directory<sp/>generate<sp/>the<sp/>flowvr<sp/>configuration<sp/>files<sp/>by:<sp/>`python<sp/>$example_name.py`<sp/>and<sp/>run<sp/>example<sp/>by:<sp/>`flowvr<sp/>$example_name`</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>tictac<sp/>Tictac<sp/>example</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Consists<sp/>of<sp/>2<sp/>modules:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">-<sp/>`put`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>source<sp/>file:<sp/>`put.cxx`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>configuration<sp/>file:<sp/>`put.yml`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>has<sp/>`output<sp/>port`<sp/>named<sp/>`text`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>sends<sp/>message<sp/>with:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>data:<sp/>`type:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>4}<sp/><sp/>#"tic"<sp/>or<sp/>"tac"`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>stamps:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>it<sp/>(predefined<sp/>flowvr<sp/>stamp):<sp/>`type:<sp/>int`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>my_stamp<sp/>(user<sp/>define<sp/>int<sp/>array<sp/>stamp):<sp/>`type:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>2}`</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">-<sp/>`get`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>source<sp/>file:<sp/>`get.cxx`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>configuration<sp/>file:<sp/>`get.yml`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>has<sp/>`input<sp/>port`<sp/>named<sp/>`text`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>receive<sp/>message<sp/>sent<sp/>by<sp/>`put`<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>additionally<sp/>has<sp/>defined<sp/>`stamp`:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>source<sp/>(predefined<sp/>flowvr<sp/>stamp):<sp/>`type:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>256}`</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Network<sp/>of<sp/>the<sp/>application:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\image<sp/>html<sp/>tictac_net.jpg</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsubsection<sp/>bundle<sp/>Bundle<sp/>example</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Consists<sp/>of<sp/>3<sp/>modules:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">-<sp/>2x<sp/>`putMulitple`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>source<sp/>file:<sp/>`putMulitple.cxx`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>configuration<sp/>file:<sp/>`putMulitple.yml`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>first<sp/>one<sp/>has<sp/>`output<sp/>port`<sp/>named<sp/>`text`,<sp/>second<sp/>`text2`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>sends<sp/>message<sp/>with:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>data:<sp/>`type:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>4}<sp/>#<sp/>first<sp/>"tic"<sp/>or<sp/>"tac",<sp/>second<sp/>"TIC"<sp/>or<sp/>"TAC"`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>stamps:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>`it`<sp/>(predefined<sp/>flowvr<sp/>stamp):<sp/>`type:<sp/>int`</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`getMulitple`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>source<sp/>file:<sp/>`getMulitple.cxx`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>configuration<sp/>file:<sp/>`getMulitple.yml`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>has<sp/>`input<sp/>ports`<sp/>named<sp/>`text`<sp/>and<sp/>`text2`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>receive<sp/>message<sp/>sent<sp/>by<sp/>`putMulitple`<sp/>modules</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>additionally<sp/>has<sp/>defined<sp/>`stamp`:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>source<sp/>(predefined<sp/>flowvr<sp/>stamp):<sp/>`type:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>256}`</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Network<sp/>of<sp/>the<sp/>application:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\image<sp/>html<sp/>bundle_net.jpg</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>primes<sp/>Primes<sp/>example</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Consists<sp/>of<sp/>3<sp/>modules:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">-<sp/>`capture`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>source<sp/>file:<sp/>`capture.cxx`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>configuration<sp/>file:<sp/>`capture.yml`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>has<sp/>`output<sp/>port`<sp/>named<sp/>`keysOut`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>sends<sp/>message<sp/>with:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>`event_button`<sp/>(payload):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>KEY_UP:<sp/>up<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>KEY_DOWN:<sp/>down</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>KEY_LEFT:<sp/>left</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>KEY_RIGHT:<sp/>right</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">-<sp/>`compute`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>source<sp/>file:<sp/>`compute.cxx`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>configuration<sp/>file:<sp/>`compute.yml`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>has<sp/>`output<sp/>port`<sp/>named<sp/>`primesOut`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>sends<sp/>message<sp/>with:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>data<sp/>(payload):<sp/>`type:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>$tempPrimeNumbersMaxCount}`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>stamps:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>computationTimeIt:<sp/>`type:<sp/>int`</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">-<sp/>`visu`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>source<sp/>file:<sp/>`visu.cxx`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>configuration<sp/>file:<sp/>`visu.yml`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>has<sp/>`input<sp/>ports`<sp/>named<sp/>`primesIn`<sp/>and<sp/>`keysIn`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>receive<sp/>message<sp/>sent<sp/>by<sp/>`capture`<sp/>and<sp/>`compute`<sp/>modules</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Network<sp/>of<sp/>the<sp/>application:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\image<sp/>html<sp/>primes_net.jpg</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>fluid<sp/>Fluid<sp/>example</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Consists<sp/>of<sp/>2<sp/>modules:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">-<sp/>`fluid`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>source<sp/>file:<sp/>`fluid.cxx`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>configuration<sp/>file:<sp/>`fluid.yml`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>has<sp/>`input<sp/>port`<sp/>named<sp/>`position`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>received<sp/>message<sp/>sent<sp/>by<sp/>`gldens`<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>has<sp/>`output<sp/>ports`<sp/>named<sp/>`velocity`<sp/>and<sp/>`density`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>`velocity`<sp/>and<sp/>`density`<sp/>both<sp/>sends<sp/>message<sp/>with:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>data<sp/>(payload):<sp/>`type:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>[$NX<sp/>*<sp/>2,<sp/>$NY]}<sp/>#<sp/>where<sp/>NX<sp/>and<sp/>NY<sp/>is<sp/>metadata`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>stamps:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>P:<sp/>`type:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>2}`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>N:<sp/>`type:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>2}`</highlight></codeline>
<codeline><highlight class="normal">-<sp/>`gldens`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>source<sp/>file:<sp/>`gldens.cxx`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>configuration<sp/>file:<sp/>`gldens.yml`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>has<sp/>`input<sp/>ports`<sp/>named<sp/>`velocity`<sp/>and<sp/><sp/>`density`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>received<sp/>message<sp/>sent<sp/>by<sp/>`fluid`<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>has<sp/>`output<sp/>port`<sp/>named<sp/>`position`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>sends<sp/>message<sp/>with:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>data<sp/>(payload):<sp/>`type:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>float,<sp/>size:<sp/>3}`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>very<sp/>important<sp/>is<sp/>how<sp/>to<sp/>get<sp/>a<sp/>number<sp/>of<sp/>elements<sp/>received<sp/>by<sp/>`velocity`<sp/>and<sp/><sp/>`density`<sp/>ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>`type:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>$velocitySize}<sp/>#<sp/>velocitySize<sp/>is<sp/>defined<sp/>as<sp/>metadata`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Here<sp/>`velocitySize`<sp/>must<sp/>be<sp/>preceded<sp/>with<sp/>`$`<sp/>to<sp/>let<sp/>plugin<sp/>to<sp/>write<sp/>the<sp/>size<sp/>there.<sp/>The<sp/>`velocitySize`<sp/>descriptor<sp/>will<sp/>store<sp/>a<sp/>valid<sp/>size<sp/>**after**<sp/>accessing<sp/>the<sp/>`velocity`<sp/>descriptor,<sp/>because<sp/>only<sp/>then<sp/>plugin<sp/>will<sp/>write<sp/>size.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Network<sp/>of<sp/>the<sp/>application:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\image<sp/>html<sp/>fluid_net.jpg</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/plugins/flowvr/README.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="plugins_2fti_2README_8md" kind="file" language="Markdown">
    <compoundname>plugins/fti/README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">\page<sp/>FTI_plugin<sp/>FTI<sp/>plugin</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**WARNING**<sp/>This<sp/>documentation<sp/>is<sp/>a<sp/>work<sp/>in<sp/>progress<sp/>and<sp/>does<sp/>not<sp/></highlight></codeline>
<codeline><highlight class="normal">reflect<sp/>the<sp/>full<sp/>FTI<sp/>plugin<sp/>potential.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>FTI<sp/>plugin<sp/>enables<sp/>one<sp/>to<sp/>perform<sp/>checkpoints<sp/>using<sp/>FTI.</highlight></codeline>
<codeline><highlight class="normal">FTI<sp/>plugin<sp/>does<sp/>not<sp/>support<sp/>the<sp/>full<sp/>FTI<sp/>feature<sp/>set<sp/>but<sp/>offers<sp/>a<sp/>simple</highlight></codeline>
<codeline><highlight class="normal">declarative<sp/>interface<sp/>to<sp/>access<sp/>a<sp/>large<sp/>subset<sp/>of<sp/>it.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">##<sp/>Features<sp/>and<sp/>requirements</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">###<sp/>Dependencies</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">FTI<sp/>plugin<sp/>uses<sp/>a<sp/>`MPI_Comm`<sp/>datatype<sp/>and<sp/>`MPI_COMM_WORLD`<sp/>descriptor,<sp/></highlight></codeline>
<codeline><highlight class="normal">which<sp/>are<sp/>defined<sp/>in<sp/>`mpi`<sp/>plugin.</highlight></codeline>
<codeline><highlight class="normal">For<sp/>now<sp/>it<sp/>must<sp/>be<sp/>loaded<sp/>alongside<sp/>FTI<sp/>plugin<sp/>(as<sp/>shown<sp/>below).</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">pdi:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>...</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/>plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mpi:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fti:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">###<sp/>Initialization</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">FTI<sp/>initialization<sp/>in<sp/>FTI<sp/>plugin<sp/>is<sp/>based<sp/>on<sp/>several<sp/>rules.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>if<sp/>`init_on`<sp/>is<sp/>specified,<sp/>FTI<sp/>plugin<sp/>will<sp/>initialize<sp/>FTI</highlight></codeline>
<codeline><highlight class="normal">on<sp/>that<sp/>exact<sp/>event<sp/>and<sp/>expects<sp/>the<sp/>communicator<sp/>and<sp/>file<sp/>name</highlight></codeline>
<codeline><highlight class="normal">to<sp/>be<sp/>correctly<sp/>available<sp/>or<sp/>fail<sp/>otherwise,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>if<sp/>`init_on`<sp/>is<sp/>not<sp/>specified<sp/>and<sp/>the<sp/>communicator<sp/>isavailable</highlight></codeline>
<codeline><highlight class="normal">on<sp/>plugin<sp/>initialization<sp/>(e.g.<sp/>when<sp/>using<sp/>`MPI_COMM_WORLD`</highlight></codeline>
<codeline><highlight class="normal">predefine<sp/>from<sp/>`mpi`<sp/>plugin),<sp/>FTI<sp/>plugin<sp/>will<sp/>try<sp/>to<sp/>initialize</highlight></codeline>
<codeline><highlight class="normal">FTI<sp/>(on<sp/>plugin<sp/>initialization)<sp/>and<sp/>expects<sp/>file<sp/>name</highlight></codeline>
<codeline><highlight class="normal">to<sp/>be<sp/>correctly<sp/>available<sp/>or<sp/>fail<sp/>otherwise,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>if<sp/>`init_on`<sp/>is<sp/>not<sp/>specified<sp/>and<sp/>the<sp/>communicator<sp/>is<sp/>not</highlight></codeline>
<codeline><highlight class="normal">available<sp/>on<sp/>plugin<sp/>initialization,<sp/>FTI<sp/>plugin<sp/>will<sp/>try<sp/></highlight></codeline>
<codeline><highlight class="normal">to<sp/>initialize<sp/>FTI<sp/>on<sp/>communicators<sp/>descriptor<sp/>exposure<sp/>and<sp/>expects</highlight></codeline>
<codeline><highlight class="normal">file<sp/>name<sp/>to<sp/>be<sp/>correctly<sp/>available<sp/>or<sp/>fail<sp/>otherwise.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">###<sp/>Predefined<sp/>descriptors</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">FTI<sp/>plugin<sp/>loads<sp/>a<sp/>predefined<sp/>descriptor<sp/>named<sp/>`FTI_COMM_WORLD`<sp/></highlight></codeline>
<codeline><highlight class="normal">(`FTI_COMM_WORLD_F`<sp/>for<sp/>Fortran)<sp/>after<sp/>a<sp/>successfull<sp/>initialization<sp/></highlight></codeline>
<codeline><highlight class="normal">of<sp/>FTI.<sp/>This<sp/>descriptor<sp/>is<sp/>treated<sp/>asmetadata.<sp/>Its<sp/>content<sp/>can<sp/></highlight></codeline>
<codeline><highlight class="normal">be<sp/>accessed<sp/>using<sp/>`PDI_access`.<sp/></highlight></codeline>
<codeline/>
<codeline><highlight class="normal">##<sp/>Configuration<sp/>grammar</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">At<sp/>its<sp/>root,<sp/>the<sp/>FTI<sp/>configuration<sp/>is<sp/>made<sp/>of<sp/>several<sp/>nodes:</highlight></codeline>
<codeline><highlight class="normal">`checkpoint`,<sp/>`communicator`,<sp/>`config_file`,<sp/>`dataset`,<sp/>`init_on`,</highlight></codeline>
<codeline><highlight class="normal">`recover_on`,<sp/>`recover_var`,<sp/>`send_file`,<sp/>`snapshot_on`<sp/>and<sp/>`status`.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">###<sp/>`checkpoint`</highlight></codeline>
<codeline><highlight class="normal">A<sp/>`checkpoint`<sp/>specifies<sp/>a<sp/>list<sp/>of<sp/>checkpoints<sp/>to<sp/>execute.</highlight></codeline>
<codeline><highlight class="normal">It<sp/>is<sp/>specified<sp/>by<sp/>a<sp/>key/value<sp/>map<sp/>that<sp/>may<sp/>contain<sp/>following<sp/>keys:</highlight></codeline>
<codeline><highlight class="normal">`L1_on`,<sp/>`L2_on`,<sp/>`L3_on`,<sp/>`L4_on`.</highlight></codeline>
<codeline><highlight class="normal">Each<sp/>of<sp/>the<sp/>keys<sp/>specifies<sp/>events<sp/>names<sp/>that<sp/>trigger<sp/>a<sp/>specified<sp/>checkpoint.</highlight></codeline>
<codeline><highlight class="normal">Value<sp/>of<sp/>this<sp/>key<sp/>can<sp/>be<sp/>either<sp/>string<sp/>or<sp/>a<sp/>list<sp/>of<sp/>strings.<sp/><sp/></highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>`L1_on`:<sp/>executes<sp/>FTI<sp/>L1<sp/>checkpoint<sp/>on<sp/>specified<sp/>PDI<sp/>events,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`L2_on`:<sp/>executes<sp/>FTI<sp/>L2<sp/>checkpoint<sp/>on<sp/>specified<sp/>PDI<sp/>events,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`L3_on`:<sp/>executes<sp/>FTI<sp/>L3<sp/>checkpoint<sp/>on<sp/>specified<sp/>PDI<sp/>events,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`L4_on`:<sp/>executes<sp/>FTI<sp/>L4<sp/>checkpoint<sp/>on<sp/>specified<sp/>PDI<sp/>events.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">###<sp/>`communicator`</highlight></codeline>
<codeline><highlight class="normal">A<sp/>`communicator`<sp/>is<sp/>a<sp/>string,<sp/>which<sp/>specifies<sp/>name<sp/>of<sp/>descriptor<sp/>containing<sp/></highlight></codeline>
<codeline><highlight class="normal">a<sp/>MPI<sp/>communicator<sp/>to<sp/>use<sp/>for<sp/>FTI<sp/>initialization.<sp/>Additionaly,<sp/>FTI<sp/>plugin<sp/>can</highlight></codeline>
<codeline><highlight class="normal">write<sp/>`FTI_COMM_WORLD`<sp/>into<sp/>this<sp/>descriptor,<sp/>if<sp/>it<sp/>is<sp/>shared<sp/>with<sp/>write<sp/>access<sp/>right.</highlight></codeline>
<codeline><highlight class="normal">It<sp/>defaults<sp/>to<sp/>`MPI_COMM_WORLD`,<sp/>which<sp/>is<sp/>a<sp/>predefined<sp/>descriptor<sp/>from<sp/>`mpi`<sp/>plugin.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">###<sp/>`config_file`</highlight></codeline>
<codeline><highlight class="normal">A<sp/>`config_file`<sp/>is<sp/>a<sp/>string<sp/>that<sp/>can<sp/>contain<sp/>$-expressions.<sp/></highlight></codeline>
<codeline><highlight class="normal">Specifies<sp/>the<sp/>name<sp/>of<sp/>the<sp/>FTI<sp/>configuration<sp/>file.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">###<sp/>`dataset`</highlight></codeline>
<codeline><highlight class="normal">A<sp/>`dataset`<sp/>is<sp/>a<sp/>key/value<sp/>map,<sp/>which<sp/>keys<sp/>are<sp/>integers<sp/>that<sp/>specify</highlight></codeline>
<codeline><highlight class="normal">datasets<sp/>ids<sp/>in<sp/>FTI<sp/>and<sp/>values<sp/>are<sp/>names<sp/>of<sp/>protected<sp/>descriptors.</highlight></codeline>
<codeline><highlight class="normal">Alternatively,<sp/>the<sp/>map<sp/>may<sp/>contain<sp/>a<sp/>map<sp/>with<sp/>keys<sp/>`name`<sp/>and<sp/>`size`,</highlight></codeline>
<codeline><highlight class="normal">where<sp/>`name`<sp/>is<sp/>a<sp/>name<sp/>of<sp/>protected<sp/>descriptor<sp/>and<sp/>`size`<sp/>is<sp/>a<sp/>descriptor</highlight></codeline>
<codeline><highlight class="normal">where<sp/>FTI<sp/>plugin<sp/>will<sp/>write<sp/>size<sp/>of<sp/>the<sp/>protected<sp/>descriptor<sp/>when<sp/>shared<sp/></highlight></codeline>
<codeline><highlight class="normal">with<sp/>write<sp/>access<sp/>right.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">dataset:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>0:<sp/>{name:<sp/>variable,<sp/>size:<sp/>variable_size}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1:<sp/>variable2</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">###<sp/>`init_on`</highlight></codeline>
<codeline><highlight class="normal">A<sp/>`init_on`<sp/>is<sp/>a<sp/>string<sp/>or<sp/>a<sp/>list<sp/>of<sp/>strings<sp/>that<sp/>specifies<sp/>the<sp/>names<sp/></highlight></codeline>
<codeline><highlight class="normal">of<sp/>the<sp/>PDI<sp/>events<sp/>that<sp/>executes<sp/>recovery<sp/>of<sp/>FTI.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">###<sp/>`recover_on`</highlight></codeline>
<codeline><highlight class="normal">A<sp/>`recover_on`<sp/>is<sp/>a<sp/>string<sp/>or<sp/>a<sp/>list<sp/>of<sp/>strings<sp/>that<sp/>specifies<sp/>the<sp/>names<sp/></highlight></codeline>
<codeline><highlight class="normal">of<sp/>the<sp/>PDI<sp/>events<sp/>that<sp/>executes<sp/>recovery<sp/>of<sp/>FTI.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">###<sp/>`recover_var`</highlight></codeline>
<codeline><highlight class="normal">**WARNING**<sp/>This<sp/>feature<sp/>is<sp/>not<sp/>yet<sp/>supported.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">###<sp/>`send_file`</highlight></codeline>
<codeline><highlight class="normal">**WARNING**<sp/>This<sp/>feature<sp/>is<sp/>not<sp/>yet<sp/>supported.</highlight></codeline>
<codeline><highlight class="normal">A<sp/>`send_file`<sp/>is<sp/>a<sp/>key/value<sp/>map<sp/>or<sp/>a<sp/>list<sp/>of<sp/>key/value<sp/>maps<sp/></highlight></codeline>
<codeline><highlight class="normal">describing<sp/>source<sp/>and<sp/>destination<sp/>paths<sp/>of<sp/>files<sp/>to<sp/>send,<sp/></highlight></codeline>
<codeline><highlight class="normal">event<sp/>or<sp/>list<sp/>of<sp/>events<sp/>to<sp/>trigger<sp/>on<sp/>and<sp/>optionally<sp/>name<sp/>of<sp/>descriptor,<sp/></highlight></codeline>
<codeline><highlight class="normal">where<sp/>will<sp/>be<sp/>stored<sp/>status<sp/>information<sp/>when<sp/>exposed.</highlight></codeline>
<codeline><highlight class="normal">Example:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">send_file:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>on_even:<sp/>event</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>file:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>src:<sp/>source_path</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dest:<sp/>destination_path</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>status:<sp/>status_descriptor</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">###<sp/>`snapshot_on`</highlight></codeline>
<codeline><highlight class="normal">A<sp/>`snapshot_on`<sp/>is<sp/>a<sp/>string<sp/>or<sp/>a<sp/>list<sp/>of<sp/>strings<sp/>that<sp/>specifies<sp/>the<sp/>names<sp/></highlight></codeline>
<codeline><highlight class="normal">of<sp/>the<sp/>PDI<sp/>events<sp/>that<sp/>executes<sp/>FTI_Snapshot.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">###<sp/>`status`</highlight></codeline>
<codeline><highlight class="normal">A<sp/>`status`<sp/>is<sp/>a<sp/>string<sp/>that<sp/>specifies<sp/>the<sp/>name<sp/>of<sp/>a<sp/>descriptor<sp/>to<sp/>which<sp/>FTI</highlight></codeline>
<codeline><highlight class="normal">will<sp/>write<sp/>FTI_Status<sp/>code<sp/>when<sp/>shared.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">##<sp/>full<sp/>configuration<sp/>example</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">pdi:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>metadata:<sp/>#<sp/>type<sp/>of<sp/>small<sp/>values<sp/>for<sp/>which<sp/>PDI<sp/>keeps<sp/>a<sp/>copy</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>iter:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size:<sp/><sp/>{<sp/>size:<sp/>2,<sp/>type:<sp/>int<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data:<sp/>#<sp/>type<sp/>of<sp/>values<sp/>for<sp/>which<sp/>PDI<sp/>does<sp/>not<sp/>keep<sp/>a<sp/>copy</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fti_status:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>array_size:<sp/>int64</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>file_name:<sp/>{size:<sp/>64,<sp/>type:<sp/>array,<sp/>subtype:<sp/>char}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>file_status:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>file1_status:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>file2_status:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>main_array:<sp/>{<sp/>size:<sp/>['$size[0]',<sp/>'$size[1]'],<sp/>type:<sp/>array,<sp/>subtype:<sp/>double<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mpi:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fti:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>config_file:<sp/>fti_config.ini</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>communicator:<sp/>MPI_COMM_WORLD</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>init_on:<sp/>fti_init_event</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status:<sp/>fti_status</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataset:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0:<sp/>{name:<sp/>main_array,<sp/>size:<sp/>array_size}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1:<sp/>iter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snapshot_on:<sp/>snapshot_event</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recover_on:<sp/>recover_event</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>checkpoint:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L1_on:<sp/>ckpt_l1_event</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L2_on:<sp/>[ckpt_l2_1_event,<sp/>ckpt_l2_2_event]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L3_on:<sp/>[ckpt_l3_1_event,<sp/>ckpt_l3_2_event]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L4_on:<sp/>ckpt_l4_event</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>send_file:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>on_event:<sp/>send_one_file</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src:<sp/>./$file_name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest:<sp/>./somewhere_else/$file_name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status:<sp/>file_status</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>on_event:<sp/>[send_two_files_first_event,<sp/>send_two_files_second_event]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>src:<sp/>./file1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest:<sp/>./somewhere_else/file1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status:<sp/>file1_status</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>src:<sp/>./file2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest:<sp/>./somewhere_else/file2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status:<sp/>file2_status</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/plugins/fti/README.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="plugins_2trace_2README_8md" kind="file" language="Markdown">
    <compoundname>plugins/trace/README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">\page<sp/>trace_plugin<sp/>Trace<sp/>plugin</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>trace<sp/>plugin<sp/>is<sp/>intended<sp/>to<sp/>generate<sp/>a<sp/>trace<sp/>of<sp/>what<sp/>happens<sp/>in<sp/></highlight></codeline>
<codeline><highlight class="normal">\ref<sp/>Data_store<sp/>"PDI<sp/>data<sp/>store".</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>plugin<sp/>is<sp/>very<sp/>simple;<sp/>just<sp/>list<sp/>its<sp/>name<sp/>in<sp/>the<sp/></highlight></codeline>
<codeline><highlight class="normal">\ref<sp/>Specification_tree<sp/>"specification<sp/>tree"<sp/>and<sp/>you're<sp/>done.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">data:<sp/>#...</highlight></codeline>
<codeline><highlight class="normal">metadata:<sp/>#...</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>trace:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#...</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>plugin<sp/>then<sp/>generates<sp/>a<sp/>(somewhat<sp/>verbose)<sp/>trace<sp/>on<sp/>the<sp/>standard<sp/>error.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">For<sp/>example:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">[PDI][Test-plugin][00:00:00]<sp/>***<sp/>info:<sp/>Welcome!</highlight></codeline>
<codeline><highlight class="normal">[PDI][Test-plugin][00:00:00]<sp/>***<sp/>info:<sp/>=&gt;&gt;<sp/><sp/><sp/>data<sp/>becoming<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>my_data</highlight></codeline>
<codeline><highlight class="normal">[PDI][Test-plugin][00:00:00]<sp/>***<sp/>info:<sp/>&lt;&lt;=<sp/>data<sp/>stop<sp/>being<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>my_data</highlight></codeline>
<codeline><highlight class="normal">[PDI][Test-plugin][00:00:00]<sp/>***<sp/>info:<sp/>!!!<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>event:<sp/>my_event</highlight></codeline>
<codeline><highlight class="normal">[PDI][Test-plugin][00:00:00]<sp/>***<sp/>info:<sp/>Goodbye!</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Each<sp/>line<sp/>starting<sp/>by<sp/>`=&gt;&gt;<sp/><sp/><sp/>data<sp/>becoming<sp/>available<sp/>in<sp/>the<sp/>store`<sp/>means<sp/>a<sp/>new</highlight></codeline>
<codeline><highlight class="normal">piece<sp/>of<sp/>data<sp/>has<sp/>been<sp/>shared.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Each<sp/>line<sp/>starting<sp/>by<sp/>`&lt;&lt;=<sp/>data<sp/>stop<sp/>being<sp/>available<sp/>in<sp/>the<sp/>store`<sp/>means<sp/>a<sp/>piece</highlight></codeline>
<codeline><highlight class="normal">of<sp/>data<sp/>is<sp/>being<sp/>removed<sp/>from<sp/>the<sp/>store.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Each<sp/>line<sp/>starting<sp/>by<sp/>`!!!<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>event`<sp/>means<sp/>a<sp/>named</highlight></codeline>
<codeline><highlight class="normal">event<sp/>has<sp/>been<sp/>emitted.</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/plugins/trace/README.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="plugins_2user__code_2README_8md" kind="file" language="Markdown">
    <compoundname>plugins/user_code/README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">\page<sp/>user_code_plugin<sp/>The<sp/>user-code<sp/>plugin</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>`user-code`<sp/>plugin<sp/>enables<sp/>one<sp/>to<sp/>call<sp/>a<sp/>user-defined<sp/>function<sp/></highlight></codeline>
<codeline><highlight class="normal">when<sp/>a<sp/>specified<sp/>event<sp/>occur<sp/>or<sp/>certain<sp/>data<sp/>becomes<sp/>available.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>important_notes_node<sp/>Important<sp/>notes</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>Make<sp/>sure<sp/>to<sp/>compile<sp/>your<sp/>program<sp/>with<sp/>`Wl,--export-dynamic`<sp/>or<sp/>`-rdynamic`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flag<sp/>(in<sp/>CMake<sp/>set<sp/>`ENABLE_EXPORTS`<sp/>to<sp/>`TRUE`<sp/>using<sp/>`set_target_properties`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command)<sp/>in<sp/>order<sp/>to<sp/>generate<sp/>necessary<sp/>symbols.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Make<sp/>sure<sp/>you<sp/>use<sp/>the<sp/>proper<sp/>access<sp/>rights<sp/>in<sp/>your<sp/>function<sp/>in<sp/>\ref<sp/>PDI_access</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>(PDI_IN<sp/>for<sp/>reading,<sp/>PDI_OUT<sp/>for<sp/>writing).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Descriptor<sp/>aliases<sp/>enables<sp/>one<sp/>to<sp/>use<sp/>different<sp/>descriptors<sp/>without<sp/>the<sp/>need</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>to<sp/>recompile<sp/>the<sp/>code.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>dependencies_node<sp/>Dependencies<sp/>between<sp/>the<sp/>code<sp/>and<sp/>the<sp/>specification<sp/>tree</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">To<sp/>ensure<sp/>proper<sp/>work<sp/>of<sp/>the<sp/>`user-code`<sp/>plugin,<sp/>there<sp/>are<sp/>several<sp/>conventions<sp/>to<sp/>follow<sp/>in<sp/>the<sp/>application<sp/></highlight></codeline>
<codeline><highlight class="normal">code<sp/>and<sp/>the<sp/>specification<sp/>tree.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">First,<sp/>each<sp/>function<sp/>name<sp/>in<sp/>specification<sp/>tree<sp/>must<sp/>be<sp/>a<sp/>valid<sp/>function<sp/>name<sp/>(watch<sp/>out<sp/>for<sp/>[name<sp/>mangling](https://en.wikipedia.org/wiki/Name_mangling)).</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Second,<sp/>these<sp/>functions<sp/>**can<sp/>not**<sp/>take<sp/>any<sp/>arguments<sp/>or<sp/>return<sp/>any<sp/>value<sp/>(i.e.<sp/>their<sp/>type<sp/>must<sp/>be<sp/>`void(void)`).<sp/>Use<sp/>descriptors<sp/>for<sp/>passing<sp/>input/output<sp/>variables<sp/>instead.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Third,<sp/>function's<sp/>symbols<sp/>**must**<sp/>be<sp/>exported<sp/>to<sp/>make<sp/>them<sp/>accessible<sp/>by<sp/>`user-code`<sp/>plugin.<sp/>To<sp/>do<sp/>this,<sp/>compile<sp/>your<sp/>program<sp/>as<sp/>described<sp/>in<sp/>\ref<sp/>important_notes_node.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>use_examples_node<sp/>Use<sp/>examples</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">This<sp/>section<sp/>shows<sp/>a<sp/>simple<sp/>examples<sp/>with<sp/>the<sp/>use<sp/>of<sp/>a<sp/>`user-code`<sp/>plugin.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>hello_world_node<sp/>Hello<sp/>world!</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">First,<sp/>we<sp/>will<sp/>call<sp/>simple<sp/>function<sp/>without<sp/>the<sp/>use<sp/>of<sp/>descriptors<sp/>to<sp/>print<sp/>"Hello<sp/>world!"</highlight></codeline>
<codeline><highlight class="normal">on<sp/>"print"<sp/>event.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">hello_world.c:</highlight></codeline>
<codeline><highlight class="normal">```C</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;stdio.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi.h&gt;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">void<sp/>hello_world(void)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf("Hello<sp/>world!\n");</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char*<sp/>argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PC_tree_t<sp/>conf<sp/>=<sp/>PC_parse_path("hello_world.yml");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_init(conf);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_event("print");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_finalize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">hello_world.yml:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>user_code:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hello_world:<sp/>{}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">output:</highlight></codeline>
<codeline><highlight class="normal">```console</highlight></codeline>
<codeline><highlight class="normal">[PDI][User-code][13:40:55]<sp/>***<sp/>info:<sp/>Plugin<sp/>loaded<sp/>successfully</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:40:55]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">Hello<sp/>world!</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:40:55]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
<codeline><highlight class="normal">[PDI][User-code][13:40:55]<sp/>***<sp/>info:<sp/>Closing<sp/>plugin</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>handling_input_node<sp/>Handling<sp/>input</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Now<sp/>we<sp/>will<sp/>pass<sp/>some<sp/>input<sp/>data<sp/>to<sp/>the<sp/>function.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">print_number.c:</highlight></codeline>
<codeline><highlight class="normal">```C</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;stdio.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi.h&gt;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">void<sp/>print_number(void)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void*<sp/>input;<sp/>PDI_access("input",<sp/>&amp;input,<sp/>PDI_IN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf("I've<sp/>got<sp/>number<sp/>%d.\n",<sp/>*((int*)input));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_release("input");</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char*<sp/>argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PC_tree_t<sp/>conf<sp/>=<sp/>PC_parse_path("print_number.yml");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_init(conf);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>number<sp/>=<sp/>42;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_share("number",<sp/>&amp;number,<sp/>PDI_OUT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_event("print");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_reclaim("number");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_finalize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">print_number.yml:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>number:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>user_code:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_number:<sp/>{input:<sp/>$number}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">output:</highlight></codeline>
<codeline><highlight class="normal">```console</highlight></codeline>
<codeline><highlight class="normal">[PDI][User-code][13:49:30]<sp/>***<sp/>info:<sp/>Plugin<sp/>loaded<sp/>successfully</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:49:30]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">I've<sp/>got<sp/>number<sp/>42.</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:49:30]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
<codeline><highlight class="normal">[PDI][User-code][13:49:30]<sp/>***<sp/>info:<sp/>Closing<sp/>plugin</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">We<sp/>can<sp/>simplify<sp/>this<sp/>example<sp/>by<sp/>using<sp/>`on_data`<sp/>to<sp/>print<sp/>value<sp/>of<sp/>number</highlight></codeline>
<codeline><highlight class="normal">when<sp/>it<sp/>is<sp/>shared<sp/>to<sp/>%PDI.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">print_number.c:</highlight></codeline>
<codeline><highlight class="normal">```C</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;stdio.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi.h&gt;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">void<sp/>print_number(void)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void*<sp/>input;<sp/>PDI_access("input",<sp/>&amp;input,<sp/>PDI_IN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf("I've<sp/>got<sp/>number<sp/>%d.\n",<sp/>*((int*)input));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_release("input");</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char*<sp/>argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PC_tree_t<sp/>conf<sp/>=<sp/>PC_parse_path("print_number.yml");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_init(conf);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>number<sp/>=<sp/>42;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_expose("number",<sp/>&amp;number,<sp/>PDI_OUT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//PDI_event<sp/>is<sp/>no<sp/>longer<sp/>necessary<sp/>and<sp/>PDI_share/PDI_reclaim<sp/>can<sp/>be<sp/>simplified<sp/>to<sp/>PDI_expose</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_finalize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">print_number.yml:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>number:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>user_code:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_number:<sp/>{input:<sp/>$number}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">output<sp/>does<sp/>not<sp/>change:</highlight></codeline>
<codeline><highlight class="normal">```console</highlight></codeline>
<codeline><highlight class="normal">[PDI][User-code][13:52:15]<sp/>***<sp/>info:<sp/>Plugin<sp/>loaded<sp/>successfully</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:52:15]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">I've<sp/>got<sp/>number<sp/>42.</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:52:15]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
<codeline><highlight class="normal">[PDI][User-code][13:52:15]<sp/>***<sp/>info:<sp/>Closing<sp/>plugin</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>handling_output_node<sp/>Handling<sp/>output</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Output<sp/>handling<sp/>is<sp/>very<sp/>similar<sp/>to<sp/>the<sp/>input<sp/>handling,<sp/>the<sp/>only</highlight></codeline>
<codeline><highlight class="normal">difference<sp/>are<sp/>the<sp/>access<sp/>rights.<sp/>In<sp/>this<sp/>example<sp/>we<sp/>will<sp/>call</highlight></codeline>
<codeline><highlight class="normal">`add_ten`<sp/>function<sp/>when<sp/>`number`<sp/>is<sp/>shared<sp/>to<sp/>%PDI.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">adding_to_number.c:</highlight></codeline>
<codeline><highlight class="normal">```C</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;stdio.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi.h&gt;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">void<sp/>add_ten(void)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void*<sp/>input;<sp/>PDI_access("input",<sp/>&amp;input,<sp/>PDI_OUT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*((int*)input)<sp/>+=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_release("input");</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char*<sp/>argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PC_tree_t<sp/>conf<sp/>=<sp/>PC_parse_path("adding_to_number.yml");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_init(conf);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>number<sp/>=<sp/>42;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf("Before<sp/>expose,<sp/>number<sp/>=<sp/>%d.\n",<sp/>number);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_expose("number",<sp/>&amp;number,<sp/>PDI_IN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf("After<sp/>expose,<sp/>number<sp/>=<sp/>%d.\n",<sp/>number);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_finalize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">adding_to_number.yml:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>number:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>user_code:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_ten:<sp/>{input:<sp/>$number}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">output:</highlight></codeline>
<codeline><highlight class="normal">```console</highlight></codeline>
<codeline><highlight class="normal">[PDI][User-code][13:53:51]<sp/>***<sp/>info:<sp/>Plugin<sp/>loaded<sp/>successfully</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:53:51]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">Before<sp/>expose,<sp/>number<sp/>=<sp/>42.</highlight></codeline>
<codeline><highlight class="normal">After<sp/>expose,<sp/>number<sp/>=<sp/>52.</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:53:51]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
<codeline><highlight class="normal">[PDI][User-code][13:53:51]<sp/>***<sp/>info:<sp/>Closing<sp/>plugin</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>multiple_inout_data_node<sp/>Multiple<sp/>input/output<sp/>data</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">In<sp/>this<sp/>example<sp/>we<sp/>will<sp/>use<sp/>multiple<sp/>data<sp/>in<sp/>function.<sp/>We<sp/>will<sp/>add<sp/></highlight></codeline>
<codeline><highlight class="normal">and<sp/>multiply<sp/>two<sp/>given<sp/>numbers<sp/>and<sp/>return<sp/>the<sp/>results<sp/>on<sp/>event<sp/>"calculate".</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">calculate.c:</highlight></codeline>
<codeline><highlight class="normal">```C</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;stdio.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pdi.h&gt;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">void<sp/>sum_and_multiply(void)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void*<sp/>number1;<sp/>PDI_access("number1",<sp/>&amp;number1,<sp/>PDI_IN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void*<sp/>number2;<sp/>PDI_access("number2",<sp/>&amp;number2,<sp/>PDI_IN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void*<sp/>sum;<sp/><sp/><sp/><sp/><sp/>PDI_access("sum",<sp/>&amp;sum,<sp/>PDI_OUT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void*<sp/>product;<sp/>PDI_access("product",<sp/>&amp;product,<sp/>PDI_OUT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*((int*)sum)<sp/>=<sp/>*((int*)number1)<sp/>+<sp/>*((int*)number2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*((int*)product)<sp/>=<sp/>*((int*)number1)<sp/>*<sp/>*((int*)number2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_release("number1");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_release("number2");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_release("sum");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_release("product");</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char*<sp/>argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PC_tree_t<sp/>conf<sp/>=<sp/>PC_parse_path("calculate.yml");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_init(conf);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>foo<sp/>=<sp/>4,<sp/>bar<sp/>=<sp/>5,<sp/>res1<sp/>=<sp/>0,<sp/>res2<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf("Before<sp/>calculation,<sp/>foo<sp/>=<sp/>%d,<sp/>bar<sp/>=<sp/>%d,<sp/>res1<sp/>=<sp/>%d,<sp/>res2<sp/>=<sp/>%d.\n",<sp/>foo,<sp/>bar,<sp/>res1,<sp/>res2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_multi_expose("calculate",<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"foo",<sp/>&amp;foo,<sp/>PDI_OUT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"bar",<sp/>&amp;bar,<sp/>PDI_OUT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"res1",<sp/>&amp;res1,<sp/>PDI_IN,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"res2",<sp/>&amp;res2,<sp/>PDI_IN,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf("After<sp/>calculation,<sp/>foo<sp/>=<sp/>%d,<sp/>bar<sp/>=<sp/>%d,<sp/>res1<sp/>=<sp/>%d,<sp/>res2<sp/>=<sp/>%d.\n",<sp/>foo,<sp/>bar,<sp/>res1,<sp/>res2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_finalize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">calculate.yml:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>foo:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bar:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res1:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res2:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>user_code:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calculate:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_and_multiply:<sp/>{number1:<sp/>$foo,<sp/>number2:<sp/>$bar,<sp/>sum:<sp/>$res1,<sp/>product:<sp/>$res2}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">output:</highlight></codeline>
<codeline><highlight class="normal">```console</highlight></codeline>
<codeline><highlight class="normal">[PDI][User-code][13:58:20]<sp/>***<sp/>info:<sp/>Plugin<sp/>loaded<sp/>successfully</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:58:20]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">Before<sp/>calculation,<sp/>foo<sp/>=<sp/>4,<sp/>bar<sp/>=<sp/>5,<sp/>res1<sp/>=<sp/>0,<sp/>res2<sp/>=<sp/>0.</highlight></codeline>
<codeline><highlight class="normal">After<sp/>calculation,<sp/>foo<sp/>=<sp/>4,<sp/>bar<sp/>=<sp/>5,<sp/>res1<sp/>=<sp/>9,<sp/>res2<sp/>=<sp/>20.</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:58:20]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
<codeline><highlight class="normal">[PDI][User-code][13:58:20]<sp/>***<sp/>info:<sp/>Closing<sp/>plugin</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>conf_grammar_node<sp/>Configuration<sp/>grammar</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>root<sp/>of<sp/>`user-code`<sp/>plugin<sp/>is<sp/>a<sp/>dictionary<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`"on_data"`<sp/><sp/>(*optional*)|a<sp/>\ref<sp/>on_data_node<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`"on_event"`<sp/>(*optional*)|a<sp/>\ref<sp/>on_event_node|</highlight></codeline>
<codeline><highlight class="normal">|`".*"`<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*optional*)|<sp/>*anything*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>the<sp/>`on_data`<sp/>key<sp/>specifies<sp/>the<sp/>list<sp/>of<sp/>descriptors<sp/>that,<sp/>when<sp/>they<sp/>become<sp/>available,<sp/></highlight></codeline>
<codeline><highlight class="normal">will<sp/>cause<sp/>the<sp/>specified<sp/>functions<sp/>to<sp/>be<sp/>called,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>`on_event`<sp/>key<sp/>specifies<sp/>the<sp/>list<sp/>of<sp/>events<sp/>on<sp/>which<sp/>to<sp/>call<sp/>the<sp/>specified<sp/>functions,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>additional<sp/>keys<sp/>are<sp/>ignored.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>on_data_node<sp/>on_data</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>\ref<sp/>on_data_node<sp/>is<sp/>a<sp/>dictionary<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`".*"`<sp/>(*optional*)|a<sp/>\ref<sp/>function_list_node|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>each<sp/>key<sp/>identifies<sp/>the<sp/>name<sp/>of<sp/>a<sp/>descriptor,<sp/>which<sp/>will<sp/>trigger<sp/>specified<sp/>functions<sp/>when<sp/>it<sp/>becomes<sp/>available.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>on_event_node<sp/>on_event</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>\ref<sp/>on_event_node<sp/>is<sp/>a<sp/>dictionary<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`".*"`<sp/>(*optional*)|a<sp/>\ref<sp/>function_list_node|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>each<sp/>key<sp/>identifies<sp/>the<sp/>name<sp/>of<sp/>an<sp/>event,<sp/>which<sp/>will<sp/>trigger<sp/>specified<sp/>functions<sp/>when<sp/>it<sp/>occurs.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>function_list_node<sp/>function_list</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>\ref<sp/>function_list_node<sp/>is<sp/>a<sp/>dictionary<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`".*"`<sp/>(*optional*)|a<sp/>\ref<sp/>function_param_list_node|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>each<sp/>key<sp/>identifies<sp/>the<sp/>name<sp/>of<sp/>a<sp/>function,<sp/>which<sp/>will<sp/>be<sp/>called<sp/>on<sp/>specified<sp/>event<sp/>or<sp/>data,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>**NOTE**:<sp/>these<sp/>functions<sp/>**can<sp/>not**<sp/>take<sp/>any<sp/>arguments<sp/>or<sp/>return<sp/>any<sp/>value<sp/>(i.e.<sp/>their<sp/>type<sp/>must<sp/>be<sp/>`void(void)`).</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>function_param_list_node<sp/>function_param_list</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>\ref<sp/>function_param_list_node<sp/>is<sp/>a<sp/>dictionary<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`".*"`<sp/>(*optional*)|a<sp/>$-expression<sp/>referencing<sp/>a<sp/>data|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>each<sp/>key<sp/>identifies<sp/>the<sp/>name<sp/>of<sp/>a<sp/>descriptor<sp/>alias,<sp/>which<sp/>will<sp/>be<sp/>available<sp/>during<sp/>function<sp/>execution.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>full_spec_tree_example_node<sp/>Specification<sp/>tree<sp/>example</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>desc1:<sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>desc2:<sp/>float<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>desc3:<sp/>double<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">plugins:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>user_code:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_data:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc1:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fun1:<sp/>{in:<sp/>$desc2,<sp/>out:<sp/>$desc3}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc2:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fun2:<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fun3:<sp/>{out:<sp/>$desc2}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_event:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event1:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fun2:<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event2:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fun4:<sp/>{param1:<sp/>$desc2,<sp/>param2:<sp/>$desc1,<sp/>param3:<sp/>$desc3}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/plugins/user_code/README.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="plugins_2pycall_2README_8md" kind="file" language="Markdown">
    <compoundname>plugins/pycall/README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">\page<sp/>pycall_plugin<sp/>Pycall<sp/>plugin</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>Pycall<sp/>plugin<sp/>allows<sp/>calling<sp/>python<sp/>scripts<sp/>from<sp/>yaml<sp/>file,<sp/>that<sp/>can<sp/>work<sp/>either<sp/>if<sp/>wanted<sp/>data<sp/>was<sp/>shared<sp/>or<sp/>program<sp/>calls<sp/>specific<sp/>event.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>pycall_configuration<sp/>Configuration</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Simple<sp/>plugin<sp/>build:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pycall:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>name<sp/>of<sp/>plugin</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_event:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>run<sp/>script<sp/>on<sp/>event<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>testing:<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>name<sp/>of<sp/>an<sp/>event</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>data<sp/>alias</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exec:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>python<sp/>code<sp/>which<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>the<sp/>event<sp/>is<sp/>called</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_data:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>run<sp/>script<sp/>on<sp/>data<sp/>share</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_name:<sp/><sp/><sp/><sp/>//<sp/>python<sp/>code<sp/>which<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>data_name<sp/>is<sp/>shared</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>pycall_plugin_tree<sp/>Plugin<sp/>tree</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>root<sp/>of<sp/>plugin<sp/>configuration<sp/>(named<sp/>`pycall`),<sp/>is<sp/>a<sp/>dictionary<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline><highlight class="normal">-<sp/>\ref<sp/>on_event</highlight></codeline>
<codeline><highlight class="normal">-<sp/>\ref<sp/>on_data</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>pycall_on_event<sp/>on_event</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">This<sp/>option<sp/>allows<sp/>to<sp/>execute<sp/>written<sp/>python<sp/>code<sp/>when<sp/>specific<sp/>event<sp/>is<sp/>called.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:<sp/>{a:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>3}}</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pycall:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>testing:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with:<sp/>{<sp/>a_python:<sp/>$a<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exec:<sp/>\"print('<sp/>*<sp/>[P]<sp/>I<sp/>received<sp/><sp/><sp/><sp/>$a<sp/>=',a_python);<sp/>a_python[1]=7;<sp/>print('<sp/>*<sp/>[P]<sp/>changed<sp/>it<sp/>to<sp/>$a<sp/>=',a_python);\"</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">In<sp/>this<sp/>example<sp/>pycall<sp/>will<sp/>run<sp/>script<sp/>on<sp/>`testing`<sp/>event.<sp/>In<sp/>the<sp/>next<sp/>step<sp/>in<sp/>`with`<sp/>section<sp/>alias<sp/>name<sp/>for<sp/>data<sp/>is<sp/>generated.<sp/>`a`<sp/>will<sp/>be<sp/>`a_python`<sp/>for<sp/>execusion<sp/>of<sp/>the<sp/>python<sp/>code.<sp/>Finally<sp/>`exec`<sp/>contains<sp/>python<sp/>code<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>on<sp/>`testing`<sp/>event.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">There<sp/>is<sp/>also<sp/>an<sp/>option<sp/>to<sp/>set<sp/>a<sp/>list<sp/>of<sp/>executions:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:<sp/>{a:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>3}}</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pycall:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>testing:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>exec:<sp/>#some_python_script</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with:<sp/>{<sp/>a:<sp/>$a<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>exec:<sp/>#some_other_python_script</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with:<sp/>{<sp/>b:<sp/>$a<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>pycall_on_data<sp/>on_data</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">This<sp/>option<sp/>allows<sp/>to<sp/>execute<sp/>written<sp/>python<sp/>code<sp/>when<sp/>specific<sp/>data<sp/>is<sp/>shared.<sp/></highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:<sp/>{a:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>3}}</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pycall:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a:<sp/>print('<sp/>*<sp/>[P]<sp/>I<sp/>received<sp/><sp/><sp/><sp/>$a<sp/>=',a);<sp/>a[1]=7;<sp/>print('<sp/>*<sp/>[P]<sp/>changed<sp/>it<sp/>to<sp/>$a<sp/>=',a);\"</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>`on_data`<sp/>is<sp/>a<sp/>dictionary<sp/>that<sp/>contains<sp/>data<sp/>name<sp/>with<sp/>the<sp/>python<sp/>script<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>on<sp/>share.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>pycall_ex<sp/>Examples</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Full<sp/>example<sp/>of<sp/>pycall<sp/>plugin.<sp/>For<sp/>siplicity<sp/>yaml<sp/>file<sp/>was<sp/>included<sp/>with<sp/>c<sp/>code<sp/>in<sp/>one<sp/>file<sp/>instead<sp/>of<sp/>creating<sp/>separate<sp/>files.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Yaml<sp/>file<sp/>named<sp/>your_file:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">logging:<sp/>trace<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>data:<sp/>{a:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>3}}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pycall:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with:<sp/>{<sp/>a_python:<sp/>$a<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exec:<sp/>\"print('<sp/>*<sp/>[P]<sp/>I<sp/>received<sp/><sp/><sp/><sp/>$a<sp/>=',a_python);<sp/>a_python[1]=7;<sp/>print('<sp/>*<sp/>[P]<sp/>changed<sp/>it<sp/>to<sp/>$a<sp/>=',a_python);\"</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">C++<sp/>code:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>a[3]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf("<sp/>*<sp/>[C]<sp/>starting<sp/>with<sp/>$a<sp/>=<sp/>[%d<sp/>%d<sp/>%d]\n",<sp/>a[0],<sp/>a[1],<sp/>a[2]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_share("a",<sp/>a,<sp/>PDI_INOUT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_event("testing");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_reclaim("a");</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf("<sp/>*<sp/>[C]<sp/>now<sp/>I<sp/>see<sp/><sp/><sp/><sp/><sp/>$a<sp/>=<sp/>[%d<sp/>%d<sp/>%d]\n",<sp/>a[0],<sp/>a[1],<sp/>a[2]);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">Output<sp/>from<sp/>the<sp/>program:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>[C]<sp/>starting<sp/>with<sp/>$a<sp/>=<sp/>[1<sp/>2<sp/>3]</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:51:26]<sp/>***<sp/>trace:<sp/>Sharing<sp/>`a'<sp/>Ref<sp/>with<sp/>rights:<sp/>R<sp/>=<sp/>true,<sp/>W<sp/>=<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:51:26]<sp/>***<sp/>trace:<sp/>Calling<sp/>`a'<sp/>share.<sp/>Callbacks<sp/>to<sp/>call:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:51:26]<sp/>***<sp/>trace:<sp/>Calling<sp/>`testing'<sp/>event.<sp/>Callbacks<sp/>to<sp/>call:<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>[P]<sp/>I<sp/>received<sp/><sp/><sp/><sp/>$a<sp/>=<sp/>[1<sp/>2<sp/>3]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>[P]<sp/>changed<sp/>it<sp/>to<sp/>$a<sp/>=<sp/>[1<sp/>7<sp/>3]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>[C]<sp/>now<sp/>I<sp/>see<sp/><sp/><sp/><sp/><sp/>$a<sp/>=<sp/>[1<sp/>7<sp/>3]</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/plugins/pycall/README.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="plugins_2set__value_2README_8md" kind="file" language="Markdown">
    <compoundname>plugins/set_value/README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">\page<sp/>set_value_plugin<sp/>Set_value<sp/>plugin</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>Set_value<sp/>plugin<sp/>allows<sp/>setting<sp/>values<sp/>to<sp/>data<sp/>and<sp/>metadata<sp/>descriptors<sp/>from</highlight></codeline>
<codeline><highlight class="normal">the<sp/>yaml<sp/>file.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">There<sp/>are<sp/>3<sp/>main<sp/>features:</highlight></codeline>
<codeline><highlight class="normal">1.<sp/>Share<sp/>data<sp/>-<sp/>plugin<sp/>will<sp/>share<sp/>new<sp/>allocated<sp/>data<sp/>with<sp/>given<sp/>values</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>Expose<sp/>data<sp/>-<sp/>plugin<sp/>will<sp/>expose<sp/>new<sp/>allocated<sp/>data<sp/>with<sp/>given<sp/>values</highlight></codeline>
<codeline><highlight class="normal">3.<sp/>Set<sp/>data<sp/>-<sp/>plugin<sp/>will<sp/>set<sp/>given<sp/>values<sp/>to<sp/>the<sp/>already<sp/>shared<sp/>data</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>set_value_configuration<sp/>Configuration<sp/>grammar</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">At<sp/>its<sp/>root,<sp/>the<sp/>Set_value<sp/>configuration<sp/>is<sp/>made<sp/>of:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`"on_init"`<sp/>(*optional*)|a<sp/>list<sp/>of<sp/>\ref<sp/>value_operation|</highlight></codeline>
<codeline><highlight class="normal">|`"on_event"`<sp/>(*optional*)|an<sp/>\ref<sp/>on_event_map_node|</highlight></codeline>
<codeline><highlight class="normal">|`"on_data"`<sp/>(*optional*)|an<sp/>\ref<sp/>on_data_map_node|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>on_init_list_node<sp/>on_init</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Specifies<sp/>a<sp/>list<sp/>of<sp/>operation<sp/>to<sp/>do<sp/>in<sp/>\ref<sp/>PDI_init<sp/>function.</highlight></codeline>
<codeline><highlight class="normal">`on_init`<sp/>is<sp/>a<sp/>list<sp/>of<sp/>\ref<sp/>value_operation<sp/>s.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_init:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>set:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>share:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>on_event_map_node<sp/>on_event</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Specifies<sp/>a<sp/>map<sp/>of<sp/>events<sp/>that<sp/>will<sp/>trigger<sp/>the<sp/>values<sp/>set.</highlight></codeline>
<codeline><highlight class="normal">`on_event`<sp/><sp/>is<sp/>a<sp/>map<sp/>with<sp/>event<sp/>name<sp/>as<sp/>a<sp/>key<sp/>and<sp/>\ref<sp/>value_operation<sp/>list<sp/>as<sp/>map<sp/>value.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`".*"`<sp/>(*optional*)|a<sp/>list<sp/>of<sp/>\ref<sp/>value_operation|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_1_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>set:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>share:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_2_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>set:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>share:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>on_data_map_node<sp/>on_data</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Specifies<sp/>a<sp/>map<sp/>of<sp/>data<sp/>that<sp/>on<sp/>share<sp/>will<sp/>trigger<sp/>the<sp/>values<sp/>set.</highlight></codeline>
<codeline><highlight class="normal">`on_data`<sp/><sp/>is<sp/>a<sp/>map<sp/>with<sp/>data/metadata<sp/>name<sp/>as<sp/>a<sp/>key<sp/>and<sp/>\ref<sp/>value_operation<sp/>as<sp/>map<sp/>value.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`".*"`<sp/>(*optional*)|a<sp/>list<sp/>of<sp/>\ref<sp/>value_operation|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>metadata_1_name:<sp/>...<sp/>#<sp/>metadata_type</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data_1_name:<sp/>...<sp/><sp/>#<sp/>data_type</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_1_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>set:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>share:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>metadata_1_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>set:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>share:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>value_operation<sp/>value<sp/>operation</highlight></codeline>
<codeline><highlight class="normal">Defines<sp/>what<sp/>operation<sp/>to<sp/>do<sp/>with<sp/>given<sp/>\ref<sp/>value_list.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>order<sp/>of<sp/>the<sp/>operation<sp/>is<sp/>important<sp/>and<sp/>will<sp/>be<sp/>called<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">same<sp/>order<sp/>as<sp/>defined<sp/>in<sp/>yaml<sp/>file.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`"set"`<sp/>(*optional*)|a<sp/>\ref<sp/>value_list|</highlight></codeline>
<codeline><highlight class="normal">|`"share"`<sp/>(*optional*)|a<sp/>\ref<sp/>value_list|</highlight></codeline>
<codeline><highlight class="normal">|`"expose"`<sp/>(*optional*)|a<sp/>\ref<sp/>value_list|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Share<sp/>warning**<sp/><sp/></highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Share<sp/>is<sp/>always<sp/>done<sp/>with<sp/>read<sp/>and<sp/>write<sp/>rights.</highlight></codeline>
<codeline><highlight class="normal">Plugin<sp/>allocates<sp/>memory<sp/>by<sp/>`malloc`.<sp/>If<sp/>you<sp/>reclaim<sp/>the<sp/>data,<sp/>you<sp/>should</highlight></codeline>
<codeline><highlight class="normal">free<sp/>it<sp/>with<sp/>`free`<sp/>instruction.<sp/>If<sp/>you<sp/>don't<sp/>reclaim<sp/>or<sp/>release<sp/>data,<sp/></highlight></codeline>
<codeline><highlight class="normal">plugin<sp/>will<sp/>try<sp/>to<sp/>release<sp/>all<sp/>descriptors<sp/>that<sp/>has<sp/>shared<sp/>before</highlight></codeline>
<codeline><highlight class="normal">(failure<sp/>is<sp/>not<sp/>an<sp/>error,<sp/>so<sp/>user<sp/>can<sp/>reclaim<sp/>the<sp/>shared<sp/>data).</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>value_list<sp/>value<sp/>list</highlight></codeline>
<codeline><highlight class="normal">Is<sp/>a<sp/>list<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal">-<sp/>\ref<sp/>scalar_value,</highlight></codeline>
<codeline><highlight class="normal">-<sp/>\ref<sp/>array_value,</highlight></codeline>
<codeline><highlight class="normal">-<sp/>\ref<sp/>record_value<sp/><sp/></highlight></codeline>
<codeline/>
<codeline><highlight class="normal">as<sp/>elements.<sp/>The<sp/>order<sp/>of<sp/>the<sp/>elements<sp/>is<sp/>important.<sp/>The<sp/>descriptors<sp/>will</highlight></codeline>
<codeline><highlight class="normal">be<sp/>set<sp/>in<sp/>the<sp/>same<sp/>order<sp/>as<sp/>given<sp/>in<sp/>the<sp/>yaml<sp/>file.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>scalar_value<sp/>scalar<sp/>value</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Is<sp/>a<sp/>map<sp/>of<sp/>descriptor<sp/>name<sp/>as<sp/>a<sp/>key,<sp/>and<sp/>a<sp/>value<sp/>to<sp/>set<sp/>as<sp/>a<sp/>value:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`".*"`<sp/>(*optional*)|a<sp/>scalar<sp/>value<sp/>to<sp/>set|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scalar_name:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>on_init:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>expose:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>scalar_name:<sp/>42</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>array_value<sp/>array<sp/>value</highlight></codeline>
<codeline><highlight class="normal">Is<sp/>a<sp/>map<sp/>of<sp/>descriptor<sp/>name<sp/>as<sp/>a<sp/>key,<sp/>and<sp/>a<sp/>list<sp/>of<sp/>values<sp/>to<sp/>set<sp/>as<sp/>a<sp/>value:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`".*"`<sp/>(*optional*)|a<sp/>list<sp/>of<sp/>value<sp/>to<sp/>set|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>array_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size:<sp/>4</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>subtype:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_init:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>array_name:<sp/>[2,<sp/>3,<sp/>4,<sp/>5]</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>record_value<sp/>record<sp/>value</highlight></codeline>
<codeline><highlight class="normal">Is<sp/>a<sp/>map<sp/>of<sp/>descriptor<sp/>name<sp/>as<sp/>a<sp/>key,<sp/>and<sp/>a<sp/>list<sp/>of<sp/>members<sp/>to<sp/>set<sp/>as<sp/>a<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">Each<sp/>member<sp/>consist<sp/>of<sp/>an<sp/>inner<sp/>`value_list`.<sp/>The<sp/>order<sp/>of<sp/>the<sp/>members<sp/>is<sp/>unrestricted,</highlight></codeline>
<codeline><highlight class="normal">but<sp/>the<sp/>plugin<sp/>will<sp/>set<sp/>the<sp/>values<sp/>to<sp/>the<sp/>members<sp/>in<sp/>the<sp/>same<sp/>order.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`".*"`<sp/>(*optional*)|a<sp/>map<sp/>with<sp/>member<sp/>name<sp/>as<sp/>key<sp/>and<sp/>a<sp/>value<sp/>to<sp/>set<sp/>as<sp/>value|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>record_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>record</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>buffersize:<sp/>16</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>members:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>member_1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disp:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtype:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>member_2:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disp:<sp/>12</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>on_init:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>expose:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>record_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>member_2:<sp/>3<sp/>#<sp/>int<sp/>member</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>member_1:<sp/>[1,<sp/>2,<sp/>3]<sp/>#<sp/>array<sp/>of<sp/>ints<sp/>member</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>full_config<sp/>full<sp/>configuration<sp/>example</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>array_size:<sp/>int64</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>record_data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>record</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>buffersize:<sp/>36</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>members:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scalar_data:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disp:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>array_data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disp:<sp/>4</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/>$array_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtype:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_init:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>array_size:<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>share:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>record_data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>scalar_data:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>array_data:<sp/>[0,<sp/>0,<sp/>0]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_1_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>set:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>record_data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>scalar_data:<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>array_data:<sp/>[1,<sp/>2,<sp/>3]</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\section<sp/>old_to_new<sp/>Using<sp/>old<sp/>values<sp/>to<sp/>set<sp/>new</highlight></codeline>
<codeline><highlight class="normal">\subsection<sp/>increment<sp/>Increment<sp/>value</highlight></codeline>
<codeline><highlight class="normal">The<sp/>set_value<sp/>plugin<sp/>allows<sp/>to<sp/>use<sp/>the<sp/>old<sp/>values<sp/>to<sp/>set<sp/>new<sp/>values,<sp/>you<sp/>can<sp/>use<sp/>even<sp/>the<sp/>same</highlight></codeline>
<codeline><highlight class="normal">descriptor,<sp/>for<sp/>example<sp/>to<sp/>increment<sp/>a<sp/>scalar.<sp/></highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>value_int:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int_array:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size:<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>subtype:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>init:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>share:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>value_int:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>int_array:<sp/>[1,<sp/>2,<sp/>3]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>increment:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>set:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>value_int:<sp/>"$value_int<sp/>+<sp/>1"</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>int_array:<sp/>["$int_array[0]<sp/>+<sp/>1",<sp/>"$int_array[1]<sp/>+<sp/>1",<sp/>"$int_array[2]<sp/>+<sp/>1"]</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">After<sp/>calling<sp/>`init`<sp/>and<sp/>`increment`<sp/>event,<sp/>`value_int`<sp/>will<sp/>be<sp/>equal<sp/>1,<sp/>and<sp/>`int_array`<sp/>to<sp/>[2,<sp/>3,<sp/>4].</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>increment_in_array<sp/>Getting<sp/>old<sp/>value</highlight></codeline>
<codeline><highlight class="normal">The<sp/>new<sp/>value<sp/>is<sp/>set<sp/>at<sp/>the<sp/>end<sp/>of<sp/>processing<sp/>the<sp/>whole<sp/>descriptors.<sp/>This<sp/>means,<sp/>that<sp/>if</highlight></codeline>
<codeline><highlight class="normal">you<sp/>want<sp/>to<sp/>update<sp/>the<sp/>array<sp/>element<sp/>depending<sp/>on<sp/>other<sp/>element,<sp/>the<sp/>old<sp/>value<sp/>will<sp/>be<sp/>set:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int_array:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size:<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>subtype:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>init:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>int_array:<sp/>[0,<sp/>0,<sp/>0]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>increment:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>int_array:<sp/>["$int_array[0]<sp/>+<sp/>1",<sp/>"$int_array[0]<sp/>+<sp/>1",<sp/>"$int_array[1]<sp/>+<sp/>1"]</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">After<sp/>calling<sp/>`init`<sp/>and<sp/>`increment`<sp/>event,<sp/>all<sp/>values<sp/>in<sp/>`int_array`<sp/>will<sp/>equal<sp/>`1`.<sp/></highlight></codeline>
<codeline><highlight class="normal">This<sp/>is<sp/>because<sp/>the<sp/>`int_array[0]`<sp/>was<sp/>updated<sp/>after<sp/>setting<sp/>all<sp/>the<sp/>elements.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\subsection<sp/>update_array_after_scalar<sp/>Getting<sp/>new<sp/>value</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int_scalar:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int_array:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size:<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>subtype:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>init:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>int_scalar:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>int_array:<sp/>[0,<sp/>0,<sp/>0]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>increment:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>int_scalar:<sp/>$int_scalar+1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>int_array:<sp/>["$int_scalar",<sp/>"$int_scalar",<sp/>"$int_scalar"]</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">After<sp/>calling<sp/>`init`<sp/>and<sp/>`increment`<sp/>event,<sp/>all<sp/>values<sp/>in<sp/>`int_array`<sp/>will<sp/>equal<sp/>`1`.<sp/></highlight></codeline>
<codeline><highlight class="normal">This<sp/>is<sp/>because<sp/>the<sp/>`int_scalar`<sp/>is<sp/>set<sp/>and<sp/>then<sp/>the<sp/>`int_array`<sp/>is<sp/>updated<sp/>after<sp/>the<sp/>`int_scalar`<sp/>has<sp/>a<sp/>new<sp/>value.</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/plugins/set_value/README.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="record__datatype_8h" kind="file" language="C++">
    <compoundname>record_datatype.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes refid="pdi__fwd_8h" local="no">pdi/pdi_fwd.h</includes>
    <includes refid="datatype_8h" local="no">pdi/datatype.h</includes>
    <incdepgraph>
      <node id="9">
        <label>pdi/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="8">
        <label>pdi/export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="1">
        <label>record_datatype.h</label>
        <link refid="record__datatype_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>pdi/pdi_fwd.h</label>
        <link refid="pdi__fwd_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
      <node id="7">
        <label>paraconf.h</label>
      </node>
      <node id="11">
        <label>pdi/datatype_template.h</label>
        <link refid="datatype__template_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>pdi.h</label>
        <link refid="pdi_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>pdi/datatype.h</label>
        <link refid="datatype_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="classPDI_1_1Record__datatype" prot="public">PDI::Record_datatype</innerclass>
    <innerclass refid="classPDI_1_1Record__datatype_1_1Member" prot="public">PDI::Record_datatype::Member</innerclass>
    <innernamespace refid="namespacePDI">PDI</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2015-2019<sp/>Commissariat<sp/>a<sp/>l'energie<sp/>atomique<sp/>et<sp/>aux<sp/>energies<sp/>alternatives<sp/>(CEA)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>CEA<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>"AS<sp/>IS",<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"/></codeline>
<codeline lineno="24"><highlight class="normal"/></codeline>
<codeline lineno="25"><highlight class="normal"/><highlight class="preprocessor">#ifndef<sp/>PDI_RECORD_DATATYPE_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="26"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_RECORD_DATATYPE_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="27"><highlight class="normal"/></codeline>
<codeline lineno="28"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="29"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="30"><highlight class="normal"/></codeline>
<codeline lineno="31"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/pdi_fwd.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="32"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/datatype.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="33"><highlight class="normal"/></codeline>
<codeline lineno="34"><highlight class="normal"/></codeline>
<codeline lineno="35"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacePDI" kindref="compound">PDI</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"/></codeline>
<codeline lineno="41"><highlight class="keyword">class<sp/></highlight><highlight class="normal">PDI_EXPORT<sp/>Record_datatype:</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Datatype</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"/><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Member</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_displacement;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>m_type;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_name;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Member(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>displacement,<sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Member(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Member&amp;<sp/>o);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>displacement()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Datatype&amp;<sp/>type()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Member&amp;<sp/>rhs)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Member&amp;<sp/>rhs)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"/><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Member&gt;<sp/>m_members;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_buffersize;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"/><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>Record_datatype(std::vector&lt;Member&gt;&amp;&amp;<sp/>members,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Member&gt;&amp;<sp/>members()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref><sp/>clone()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>clone_type()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>densify()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>evaluate(Context&amp;)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dense()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>datasize()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffersize()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alignment()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>simple()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data_to_dense_copy(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data_from_dense_copy(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy_data(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>debug_string()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Datatype&amp;)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal">};</highlight></codeline>
<codeline lineno="157"><highlight class="normal"/></codeline>
<codeline lineno="158"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>PDI</highlight><highlight class="normal"/></codeline>
<codeline lineno="159"><highlight class="normal"/></codeline>
<codeline lineno="160"><highlight class="normal"/><highlight class="preprocessor">#endif<sp/>//<sp/>PDI_RECORD_DATATYPE_H_</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/record_datatype.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="ref__any_8h" kind="file" language="C++">
    <compoundname>ref_any.h</compoundname>
    <includes local="no">cassert</includes>
    <includes local="no">functional</includes>
    <includes local="no">memory</includes>
    <includes local="no">new</includes>
    <includes local="no">unordered_map</includes>
    <includes refid="pdi__fwd_8h" local="no">pdi/pdi_fwd.h</includes>
    <includes refid="datatype_8h" local="no">pdi/datatype.h</includes>
    <includes refid="error_8h" local="no">pdi/error.h</includes>
    <includedby refid="data__descriptor_8h" local="no">data_descriptor.h</includedby>
    <includedby refid="context_8h" local="no">context.h</includedby>
    <includedby refid="expression_8h" local="no">expression.h</includedby>
    <incdepgraph>
      <node id="11">
        <label>pdi/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="3">
        <label>functional</label>
      </node>
      <node id="1">
        <label>ref_any.h</label>
        <link refid="ref__any_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cassert</label>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="16">
        <label>exception</label>
      </node>
      <node id="10">
        <label>pdi/export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="15">
        <label>pdi/error.h</label>
        <link refid="error_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>pdi/pdi_fwd.h</label>
        <link refid="pdi__fwd_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>spdlog/fmt/fmt.h</label>
      </node>
      <node id="5">
        <label>new</label>
      </node>
      <node id="9">
        <label>paraconf.h</label>
      </node>
      <node id="14">
        <label>pdi/datatype_template.h</label>
        <link refid="datatype__template_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>unordered_map</label>
      </node>
      <node id="8">
        <label>pdi.h</label>
        <link refid="pdi_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>pdi/datatype.h</label>
        <link refid="datatype_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>context.h</label>
        <link refid="context_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>ref_any.h</label>
        <link refid="ref__any_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>data_descriptor.h</label>
        <link refid="data__descriptor_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>expression.h</label>
        <link refid="expression_8h_source"/>
      </node>
      <node id="4">
        <label>context_proxy.h</label>
        <link refid="context__proxy_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classPDI_1_1Reference__base" prot="public">PDI::Reference_base</innerclass>
    <innerclass refid="structPDI_1_1Reference__base_1_1Referenced__buffer" prot="protected">PDI::Reference_base::Referenced_buffer</innerclass>
    <innerclass refid="structPDI_1_1Reference__base_1_1Referenced__data" prot="protected">PDI::Reference_base::Referenced_data</innerclass>
    <innerclass refid="classPDI_1_1Ref__any" prot="public">PDI::Ref_any</innerclass>
    <innerclass refid="structstd_1_1hash_3_01PDI_1_1Ref__any_3_01R_00_01W_01_4_01_4" prot="public">std::hash&lt; PDI::Ref_any&lt; R, W &gt; &gt;</innerclass>
    <innernamespace refid="namespacePDI">PDI</innernamespace>
    <innernamespace refid="namespacestd">std</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2015-2019<sp/>Commissariat<sp/>a<sp/>l'energie<sp/>atomique<sp/>et<sp/>aux<sp/>energies<sp/>alternatives<sp/>(CEA)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>CEA<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>"AS<sp/>IS",<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"/></codeline>
<codeline lineno="24"><highlight class="normal"/></codeline>
<codeline lineno="25"><highlight class="normal"/><highlight class="preprocessor">#ifndef<sp/>PDI_REF_ANY_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="26"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_REF_ANY_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="27"><highlight class="normal"/></codeline>
<codeline lineno="28"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="29"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="30"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="31"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;new&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="32"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="33"><highlight class="normal"/></codeline>
<codeline lineno="34"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/pdi_fwd.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="35"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/datatype.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="36"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/error.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="37"><highlight class="normal"/></codeline>
<codeline lineno="38"><highlight class="normal"/></codeline>
<codeline lineno="39"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacePDI" kindref="compound">PDI</ref><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"/></codeline>
<codeline lineno="41"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"/></codeline>
<codeline lineno="45"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>W&gt;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"/><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Ref_access<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>type;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"/></codeline>
<codeline lineno="53"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"/><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Ref_access&lt;R,<sp/>true&gt;<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>type;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"/></codeline>
<codeline lineno="61"><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"/><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Ref_access&lt;true,<sp/>false&gt;<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>type;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"/></codeline>
<codeline lineno="67"><highlight class="normal">}<sp/></highlight><highlight class="comment">//namespace<sp/>&lt;anonymous&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="68"><highlight class="normal"/></codeline>
<codeline lineno="69"><highlight class="normal"/></codeline>
<codeline lineno="75"><highlight class="keyword">class<sp/></highlight><highlight class="normal">PDI_EXPORT<sp/>Reference_base</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"/><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"/></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PDI_NO_EXPORT<sp/>Referenced_buffer<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;void()&gt;<sp/>m_delete;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_owners;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_read_locks;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_write_locks;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Reference_base*,<sp/>std::function&lt;void(<ref refid="namespacePDI_1adc363df268e6e68e68947a4fc799ca00" kindref="member">Ref</ref>)&gt;<sp/>&gt;<sp/>m_notifications;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Referenced_buffer(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;<sp/>deleter,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readable,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>writable)<sp/>noexcept:</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_delete{deleter},</highlight></codeline>
<codeline lineno="111" refid="structPDI_1_1Reference__base_1_1Referenced__buffer_1ab25d44bd84fba7cb66590cc2b8778268" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_owners{0},</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_read_locks{readable<sp/>?<sp/>0<sp/>:<sp/>1},</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_write_locks{writable<sp/>?<sp/>0<sp/>:<sp/>1}</highlight></codeline>
<codeline lineno="114" refid="structPDI_1_1Reference__base_1_1Referenced__buffer_1a76599d8ea1917313f00676f99841fa32" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPDI_1_1Reference__base_1_1Referenced__buffer" kindref="compound">Referenced_buffer</ref>()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPDI_1_1Reference__base_1_1Referenced__buffer" kindref="compound">Referenced_buffer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structPDI_1_1Reference__base_1_1Referenced__buffer" kindref="compound">Referenced_buffer</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120" refid="structPDI_1_1Reference__base_1_1Referenced__buffer_1a3d2fb5f1e7caedaffc0f38655fe47b85" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPDI_1_1Reference__base_1_1Referenced__buffer" kindref="compound">Referenced_buffer</ref>(<ref refid="structPDI_1_1Reference__base_1_1Referenced__buffer" kindref="compound">Referenced_buffer</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123" refid="structPDI_1_1Reference__base_1_1Referenced__buffer_1a2e143e68185ed62e38238173e904d8a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structPDI_1_1Reference__base_1_1Referenced__buffer" kindref="compound">Referenced_buffer</ref>()</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_delete();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!m_owners);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(m_read_locks<sp/>==<sp/>0<sp/>||<sp/>m_read_locks<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(m_write_locks<sp/>==<sp/>0<sp/>||<sp/>m_write_locks<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(m_notifications.empty());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131" refid="structPDI_1_1Reference__base_1_1Referenced__buffer_1ab37085f14d84b20f38540cf8f26cdaf7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PDI_NO_EXPORT<sp/><ref refid="structPDI_1_1Reference__base_1_1Referenced__data" kindref="compound">Referenced_data</ref><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/><ref refid="structPDI_1_1Reference__base_1_1Referenced__buffer" kindref="compound">Referenced_buffer</ref>*<sp/>m_buffer;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>m_data;</highlight></codeline>
<codeline lineno="145" refid="structPDI_1_1Reference__base_1_1Referenced__buffer_1af373be0540e44fa6acbc111cf513eeae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>m_type;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_owners;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPDI_1_1Reference__base_1_1Referenced__data" kindref="compound">Referenced_data</ref>(<ref refid="structPDI_1_1Reference__base_1_1Referenced__buffer" kindref="compound">Referenced_buffer</ref>*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>type):</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_buffer{buffer},</highlight></codeline>
<codeline lineno="160" refid="structPDI_1_1Reference__base_1_1Referenced__data" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_data{data},</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_type{std::move(type)},</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_owners{0}</highlight></codeline>
<codeline lineno="163" refid="structPDI_1_1Reference__base_1_1Referenced__data_1a47d425768bcf062a051b1885d6704eab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(buffer);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(data);</highlight></codeline>
<codeline lineno="166" refid="structPDI_1_1Reference__base_1_1Referenced__data_1aa875a3fbf2de9102a301be833c27fc37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_buffer-&gt;m_owners++;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPDI_1_1Reference__base_1_1Referenced__data" kindref="compound">Referenced_data</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&gt;<sp/>freefunc,<sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>type,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readable,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>writable):</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_data{data},</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_type{std::move(type)},</highlight></codeline>
<codeline lineno="180" refid="structPDI_1_1Reference__base_1_1Referenced__data_1aa2153e70a3fe6e93c52ba1a384919af5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_owners{0}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(data);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref>*<sp/>cloned_type<sp/>=<sp/>m_type-&gt;<ref refid="classPDI_1_1Datatype_1af42770105e821dea4ca30f0992f2274c" kindref="member">clone_type</ref>().release();<sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>use<sp/>uptr,<sp/>because<sp/>std::function<sp/>must<sp/>be<sp/>CopyConstructible</highlight><highlight class="normal"/></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_buffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structPDI_1_1Reference__base_1_1Referenced__buffer" kindref="compound">Referenced_buffer</ref>{[data,<sp/>freefunc,<sp/>cloned_type]()<sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cloned_type-&gt;<ref refid="classPDI_1_1Datatype_1a73bcba3fb827468daeda6ab0a4fd92b5" kindref="member">destroy_data</ref>(data);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>(cloned_type);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freefunc(data);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>readable,<sp/>writable};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_buffer-&gt;m_owners++;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Referenced_data()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Referenced_data(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Referenced_data&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Referenced_data(Referenced_data&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~Referenced_data()</highlight></codeline>
<codeline lineno="199" refid="structPDI_1_1Reference__base_1_1Referenced__data_1a06d48a429afc3475cb13a4affe44d6a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_buffer-&gt;m_owners--;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_buffer-&gt;m_owners<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_buffer;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>Referenced_data*<sp/>m_content;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Referenced_data<sp/>PDI_NO_EXPORT*<sp/>get_content(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>&amp;<sp/>other)<sp/>noexcept</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!other.m_content<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!other.m_content-&gt;m_data<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>other.m_content;</highlight></codeline>
<codeline lineno="220" refid="structPDI_1_1Reference__base_1_1Referenced__data_1a59f52a41f5dc22ff0521c0a980029370" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Symbol<sp/>should<sp/>not<sp/>be<sp/>exported,<sp/>but<sp/>it<sp/>required<sp/>to<sp/>force</highlight><highlight class="normal"/></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generation<sp/>of<sp/>all<sp/>4<sp/>variants<sp/>of<sp/>`Ref_any::copy`</highlight><highlight class="normal"/></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref</ref><sp/>do_copy(<ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_r</ref><sp/>ref);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>()<sp/>noexcept:</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_content(</highlight><highlight class="keywordtype">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="232" refid="classPDI_1_1Reference__base_1a83bc9b650ba7604ee7aa5fa72c3a3abe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>(<ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>&amp;<sp/>operator<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237" refid="classPDI_1_1Reference__base_1abffc0d025215e15765806b9335fce6f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>&amp;<sp/>operator<sp/>=<sp/>(<ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="240"><highlight class="normal"/><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref>&amp;<sp/>type()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::hash&lt;Referenced_data*&gt;()(get_content(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="250" refid="classPDI_1_1Reference__base_1a4dd1558a879722ee11c8b349e78b367c" refkind="member"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>Data_ref_base</highlight><highlight class="normal"/></codeline>
<codeline lineno="251"><highlight class="normal"/></codeline>
<codeline lineno="252"><highlight class="normal"/></codeline>
<codeline lineno="266"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>W&gt;</highlight></codeline>
<codeline lineno="267" refid="classPDI_1_1Reference__base_1a797958e702e1c0d8068b8c6a2f3a76b5" refkind="member"><highlight class="normal"/><highlight class="keyword">class<sp/></highlight><highlight class="normal">PDI_EXPORT<sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref>:</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref></highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"/><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref>&amp;<sp/>other)<sp/>noexcept:</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>()</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link(get_content(other));</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OR,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OW&gt;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any&lt;OR, OW&gt;</ref>&amp;<sp/>other)<sp/>noexcept:</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>()</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link(get_content(other));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="303" refid="classPDI_1_1Ref__any_1a9c7a6f95721dbc45abe421532bdcc51c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Ref__any_1a9c7a6f95721dbc45abe421532bdcc51c" kindref="member">Ref_any</ref>(<ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref>&amp;&amp;<sp/>other)<sp/>noexcept:</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>()</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!other.m_content)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>other<sp/>ref<sp/>notification<sp/>disappears</highlight><highlight class="normal"/></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.m_content-&gt;m_buffer-&gt;m_notifications.erase(&amp;other);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>we<sp/>get<sp/>the<sp/>same<sp/>privileges<sp/>as<sp/>those<sp/>we<sp/>release<sp/>we<sp/>can<sp/>just<sp/>steal<sp/>the<sp/>content</highlight><highlight class="normal"/></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_content<sp/>=<sp/>other.m_content;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.m_content<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&gt;<sp/>freefunc,<sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>type,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readable,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>writable):</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>()</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="325" refid="classPDI_1_1Ref__any_1a58af66a3ad905c93c90e645da1517683" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type-&gt;datasize()<sp/>&amp;&amp;<sp/>!data<sp/>&amp;&amp;<sp/>(readable||writable))<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Error" kindref="compound">Error</ref>{<ref refid="group__error_1gga85517a933cd17af89b7b921c6671ff54a7eb3671f2fe468efe6b23291d3a11ade" kindref="member">PDI_ERR_TYPE</ref>,<sp/></highlight><highlight class="stringliteral">"Referencing<sp/>null<sp/>data<sp/>with<sp/>non-null<sp/>size"</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Referenced_data(data,<sp/>freefunc,<sp/>std::move(type),<sp/>readable,<sp/><sp/>writable));</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>Ref_any(<ref refid="namespacePDI_1adc363df268e6e68e68947a4fc799ca00" kindref="member">Ref</ref><sp/>other,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,<sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>type):</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reference_base()</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="344" refid="classPDI_1_1Ref__any_1a452ff2a3f09be920e36cb836cf941252" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Referenced_data*<sp/>other_content<sp/>=<sp/>get_content(other);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Referenced_data(</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other_content-&gt;m_buffer,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(other_content-&gt;m_data)<sp/>+<sp/>offset,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(type)));</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>~Ref_any()</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reset();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>Ref_any&amp;<sp/>operator=<sp/>(Ref_any&amp;&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>self-copy:<sp/>nothing<sp/>to<sp/>do</highlight><highlight class="normal"/></codeline>
<codeline lineno="363" refid="classPDI_1_1Ref__any_1ad3b23b81d198eabcf570e16baa162834" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;other<sp/>==<sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we'll<sp/>be<sp/>copied<sp/>into,<sp/>start<sp/>nullifying<sp/>ourselves<sp/>first</highlight><highlight class="normal"/></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reset();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>other<sp/>is<sp/>null<sp/>also,<sp/>we're<sp/>done</highlight><highlight class="normal"/></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.is_null())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>other<sp/>ref<sp/>notification<sp/>disappears</highlight><highlight class="normal"/></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.m_content-&gt;m_buffer-&gt;m_notifications.erase(&amp;other);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>we<sp/>get<sp/>the<sp/>same<sp/>privileges<sp/>as<sp/>those<sp/>we<sp/>release<sp/>we<sp/>can<sp/>just<sp/>steal<sp/>the<sp/>content</highlight><highlight class="normal"/></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_content<sp/>=<sp/>other.m_content;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.m_content<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref>&amp;<sp/>operator=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">Ref_any</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept</highlight></codeline>
<codeline lineno="377" refid="classPDI_1_1Ref__any_1a5a218fe4417d8f0a3dbe26ced3803ac4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>self-copy:<sp/>nothing<sp/>to<sp/>do</highlight><highlight class="normal"/></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;other<sp/>==<sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we'll<sp/>be<sp/>copied<sp/>into,<sp/>start<sp/>nullifying<sp/>ourselves<sp/>first</highlight><highlight class="normal"/></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reset();</highlight></codeline>
<codeline lineno="382" refid="classPDI_1_1Ref__any_1accdee708edbe126e188f225c6d1ded34" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>copy<sp/>the<sp/>content<sp/>from<sp/>the<sp/>other</highlight><highlight class="normal"/></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link(get_content(other));</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>&amp;<sp/>o)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_null();</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_content<sp/>==<sp/>get_content(o);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Reference_base&amp;<sp/>o)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_null();</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_content<sp/>!=<sp/>get_content(o);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398" refid="classPDI_1_1Ref__any_1a8ee978e5f25bf6ae3de60a2f4012fd6e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;<sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>&amp;<sp/>o)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_null();</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_content<sp/>&lt;<sp/>get_content(o);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;<sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>&amp;<sp/>o)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_null();</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_content<sp/>&gt;<sp/>get_content(o);</highlight></codeline>
<codeline lineno="409" refid="classPDI_1_1Ref__any_1aaba9dfd510ac25c7bafd7a25d96da0c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>&amp;<sp/>o)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_null();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_content<sp/>&lt;=<sp/>get_content(o);</highlight></codeline>
<codeline lineno="415" refid="classPDI_1_1Ref__any_1af640649a7aadf5deb73a403371b4db86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>&amp;<sp/>o)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_null();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_content<sp/>&gt;=<sp/>get_content(o);</highlight></codeline>
<codeline lineno="421" refid="classPDI_1_1Ref__any_1acde4af4cc40aae6374179bd27cd55363" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="427" refid="classPDI_1_1Ref__any_1a28a762df5e82eed15ea81cd02e9c81f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ref_access&lt;R,<sp/>W&gt;::type()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="428"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get();</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ref_access&lt;R,<sp/>W&gt;::type<sp/>get()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="437"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_null())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Error" kindref="compound">Error</ref>{<ref refid="group__error_1gga85517a933cd17af89b7b921c6671ff54ae573fb10e871f40c2b37182ff415f454" kindref="member">PDI_ERR_RIGHT</ref>,<sp/></highlight><highlight class="stringliteral">"Trying<sp/>to<sp/>dereference<sp/>a<sp/>null<sp/>reference"</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="439" refid="classPDI_1_1Ref__any_1a902c7d2864a1323dfb804fa65503b32e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_content-&gt;m_data;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ref_access&lt;R,<sp/>W&gt;::type<sp/>get(std::nothrow_t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_null())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="449" refid="classPDI_1_1Ref__any_1ad762f327bf4a69f0682927d9e19b03f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_content-&gt;m_data;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool<sp/>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="458" refid="classPDI_1_1Ref__any_1ad8d6851233a405e0e1c27d2e762c6cb9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!is_null();</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset()<sp/>noexcept</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_content)<sp/>unlink();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1adc363df268e6e68e68947a4fc799ca00" kindref="member">Ref</ref><sp/>copy()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="474"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>do_copy(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>release()<sp/>noexcept</highlight></codeline>
<codeline lineno="485" refid="classPDI_1_1Ref__any_1aeffec00c8b23f6d5edadd3af1a651e5d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_null())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>notify<sp/>everybody<sp/>of<sp/>the<sp/>nullification</highlight><highlight class="normal"/></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!m_content-&gt;m_buffer-&gt;m_notifications.empty())<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>key<sp/>of<sp/>a<sp/>notification</highlight><highlight class="normal"/></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Reference__base" kindref="compound">Reference_base</ref>*<sp/>key<sp/>=<sp/>m_content-&gt;m_buffer-&gt;m_notifications.begin()-&gt;first;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>this<sp/>notification,<sp/>this<sp/>might<sp/>invalidate<sp/>any<sp/>iterator</highlight><highlight class="normal"/></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_content-&gt;m_buffer-&gt;m_notifications.begin()-&gt;second(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>notification<sp/>we<sp/>just<sp/>called</highlight><highlight class="normal"/></codeline>
<codeline lineno="495" refid="classPDI_1_1Ref__any_1a92c53a0398732686e7b50480d4e2d82b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_content-&gt;m_buffer-&gt;m_notifications.erase(key);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>result<sp/>=<sp/>m_content-&gt;m_data;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_content-&gt;m_data<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_content-&gt;m_buffer-&gt;m_delete<sp/>=<sp/>[]()<sp/>{};<sp/></highlight><highlight class="comment">//<sp/>Referenced_metadata<sp/>won't<sp/>delete<sp/>data</highlight><highlight class="normal"/></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506" refid="classPDI_1_1Ref__any_1a2f653ad7b6152b4c1f027ed155c12e25" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_nullify(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(<ref refid="classPDI_1_1Ref__any" kindref="compound">Ref</ref>)&gt;<sp/>notifier)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_null())<sp/>m_content-&gt;m_buffer-&gt;m_notifications[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]<sp/>=<sp/>notifier;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="516"><highlight class="normal"/><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PDI_NO_EXPORT<sp/>is_null()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_content)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_content-&gt;m_data)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink();</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533" refid="classPDI_1_1Ref__any_1ab7cdbc0c95456fbf7993bb260e908bea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDI_NO_EXPORT<sp/>unlink()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(m_content);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_content-&gt;m_buffer-&gt;m_notifications.erase(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(R<sp/>||<sp/>W)<sp/>--m_content-&gt;m_buffer-&gt;m_write_locks;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(W)<sp/>--m_content-&gt;m_buffer-&gt;m_read_locks;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--m_content-&gt;m_owners;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_content-&gt;m_owners)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_content;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_content<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDI_NO_EXPORT<sp/>link(Referenced_data*<sp/>content)<sp/>noexcept</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!m_content);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!content<sp/>||<sp/>!content-&gt;m_data)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>null<sp/>ref</highlight><highlight class="normal"/></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(R<sp/>&amp;&amp;<sp/>content-&gt;m_buffer-&gt;m_read_locks)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(W<sp/>&amp;&amp;<sp/>content-&gt;m_buffer-&gt;m_write_locks)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_content<sp/>=<sp/>content;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_content-&gt;m_owners;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(R<sp/>||<sp/>W)<sp/>++m_content-&gt;m_buffer-&gt;m_write_locks;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(W)<sp/>++m_content-&gt;m_buffer-&gt;m_read_locks;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="568"><highlight class="normal">};</highlight></codeline>
<codeline lineno="569"><highlight class="normal"/></codeline>
<codeline lineno="570"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>PDI</highlight><highlight class="normal"/></codeline>
<codeline lineno="571"><highlight class="normal"/></codeline>
<codeline lineno="572"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"/></codeline>
<codeline lineno="574"><highlight class="normal"/><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>W&gt;</highlight></codeline>
<codeline lineno="575" refid="structstd_1_1hash_3_01PDI_1_1Ref__any_3_01R_00_01W_01_4_01_4" refkind="compound"><highlight class="normal"/><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;<ref refid="namespacePDI" kindref="compound">PDI</ref>::Ref_any&lt;R,W&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="576" refid="structstd_1_1hash_3_01PDI_1_1Ref__any_3_01R_00_01W_01_4_01_4_1afc5f2df0f563f17fbbadf292e45954e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">PDI::Ref_any&lt;R,W&gt;</ref>&amp;<sp/>r)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r.hash();</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal">};</highlight></codeline>
<codeline lineno="581"><highlight class="normal"/></codeline>
<codeline lineno="582"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"/></codeline>
<codeline lineno="583"><highlight class="normal"/></codeline>
<codeline lineno="584"><highlight class="normal"/><highlight class="preprocessor">#endif<sp/>//<sp/><sp/>PDI_REF_ANY_H_</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/ref_any.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="scalar__datatype_8h" kind="file" language="C++">
    <compoundname>scalar_datatype.h</compoundname>
    <includes local="no">functional</includes>
    <includes local="no">string</includes>
    <includes refid="pdi__fwd_8h" local="no">pdi/pdi_fwd.h</includes>
    <includes refid="datatype_8h" local="no">pdi/datatype.h</includes>
    <incdepgraph>
      <node id="9">
        <label>pdi/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="2">
        <label>functional</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="8">
        <label>pdi/export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="4">
        <label>pdi/pdi_fwd.h</label>
        <link refid="pdi__fwd_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>paraconf.h</label>
      </node>
      <node id="1">
        <label>scalar_datatype.h</label>
        <link refid="scalar__datatype_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>pdi/datatype_template.h</label>
        <link refid="datatype__template_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>pdi.h</label>
        <link refid="pdi_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>pdi/datatype.h</label>
        <link refid="datatype_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="classPDI_1_1Scalar__datatype" prot="public">PDI::Scalar_datatype</innerclass>
    <innernamespace refid="namespacePDI">PDI</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2015-2019<sp/>Commissariat<sp/>a<sp/>l'energie<sp/>atomique<sp/>et<sp/>aux<sp/>energies<sp/>alternatives<sp/>(CEA)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>CEA<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>"AS<sp/>IS",<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"/></codeline>
<codeline lineno="24"><highlight class="normal"/></codeline>
<codeline lineno="25"><highlight class="normal"/><highlight class="preprocessor">#ifndef<sp/>PDI_SCALAR_DATATYPE_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="26"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_SCALAR_DATATYPE_H_</highlight><highlight class="normal"/></codeline>
<codeline lineno="27"><highlight class="normal"/></codeline>
<codeline lineno="28"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="29"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="30"><highlight class="normal"/></codeline>
<codeline lineno="31"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/pdi_fwd.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="32"><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/datatype.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline lineno="33"><highlight class="normal"/></codeline>
<codeline lineno="34"><highlight class="normal"/></codeline>
<codeline lineno="35"><highlight class="normal"/><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacePDI" kindref="compound">PDI</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"/></codeline>
<codeline lineno="37"><highlight class="normal"/><highlight class="keyword">class<sp/></highlight><highlight class="normal">PDI_EXPORT<sp/>Scalar_datatype:</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Datatype</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_size;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_dense_size;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_align;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7" kindref="member">Scalar_kind</ref><sp/>m_kind;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&gt;<sp/>m_copy;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;void(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&gt;<sp/>m_destroy;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"/><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="59" refid="classPDI_1_1Scalar__datatype" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Scalar__datatype" kindref="compound">Scalar_datatype</ref>(<ref refid="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7" kindref="member">Scalar_kind</ref><sp/>kind,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Scalar__datatype" kindref="compound">Scalar_datatype</ref>(<ref refid="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7" kindref="member">Scalar_kind</ref><sp/>kind,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>align);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPDI_1_1Scalar__datatype" kindref="compound">Scalar_datatype</ref>(<ref refid="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7" kindref="member">Scalar_kind</ref><sp/>kind,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>align,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dense_size,<sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&gt;<sp/>copy,<sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&gt;<sp/>destroy);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7" kindref="member">Scalar_kind</ref><sp/>kind()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a90938550644cca0d8f3b8473267c3524" kindref="member">Datatype_template_uptr</ref><sp/>clone()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>clone_type()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>densify()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacePDI_1a72ea1e67c0a642bfc9cb3159a85c7a82" kindref="member">Datatype_uptr</ref><sp/>evaluate(<ref refid="classPDI_1_1Context" kindref="compound">Context</ref>&amp;)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dense()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>datasize()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffersize()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alignment()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>simple()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data_to_dense_copy(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data_from_dense_copy(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy_data(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>debug_string()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Datatype" kindref="compound">Datatype</ref>&amp;)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal">};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"/></codeline>
<codeline lineno="99"><highlight class="normal"/><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Scalar__datatype" kindref="compound">Scalar_datatype</ref><sp/><ref refid="namespacePDI_1abb344c7480f77937ef5176d6cabcaf05" kindref="member">UNDEF_TYPE</ref><sp/>=<sp/>{<ref refid="namespacePDI_1aaeb021e0fbcb2477836bd770c3c473c7a696b031073e74bf2cb98e5ef201d4aa3" kindref="member">Scalar_kind::UNKNOWN</ref>,<sp/>0};</highlight></codeline>
<codeline lineno="100"><highlight class="normal"/></codeline>
<codeline lineno="101"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>PDI</highlight><highlight class="normal"/></codeline>
<codeline lineno="102"><highlight class="normal"/></codeline>
<codeline lineno="103"><highlight class="normal"/><highlight class="preprocessor">#endif<sp/>//<sp/>PDI_SCALAR_DATATYPE_H_</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/scalar_datatype.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Specification__tree__ref_8md" kind="file" language="Markdown">
    <compoundname>Specification_tree_ref.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">\page<sp/>Specification_tree_ref<sp/>Specification<sp/>tree<sp/>Reference</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>%PDI<sp/>specification<sp/>tree<sp/>is<sp/>expressed<sp/>in</highlight></codeline>
<codeline><highlight class="normal">[YAML](https://en.wikipedia.org/wiki/YAML).</highlight></codeline>
<codeline><highlight class="normal">As<sp/>such,<sp/>it<sp/>is<sp/>a<sp/>tree<sp/>that<sp/>contains<sp/>3<sp/>distinct<sp/>kinds<sp/>of<sp/>nodes:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>scalars,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>sequences,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>mappings.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>**scalar**<sp/>is<sp/>a<sp/>leaf<sp/>in<sp/>the<sp/>tree,<sp/>represented<sp/>as<sp/>a<sp/>string.</highlight></codeline>
<codeline><highlight class="normal">Some<sp/>form<sp/>of<sp/>scalars<sp/>can<sp/>be<sp/>interpreted<sp/>as<sp/>a<sp/>boolean,<sp/>integer<sp/>or<sp/>floating-point</highlight></codeline>
<codeline><highlight class="normal">valued.</highlight></codeline>
<codeline><highlight class="normal">Simple<sp/>examples<sp/>of<sp/>scalars<sp/>include<sp/>for<sp/>example<sp/>(see<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[YAML<sp/>specification](https://yaml.org/spec/1.2/spec.html#id2760844)<sp/>for<sp/>the</highlight></codeline>
<codeline><highlight class="normal">complete<sp/>syntax):</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`"hello"`,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`world`,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`3`,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`5.7`.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>**sequence**<sp/>is<sp/>an<sp/>ordered<sp/>list<sp/>of<sp/>sub-nodes<sp/>(that<sp/>can<sp/>themselves<sp/>be<sp/>scalars,</highlight></codeline>
<codeline><highlight class="normal">sequences<sp/>or<sp/>mappings).</highlight></codeline>
<codeline><highlight class="normal">Two<sp/>main<sp/>syntaxes<sp/>are<sp/>available<sp/>for<sp/>sequences<sp/>(see<sp/>the<sp/></highlight></codeline>
<codeline><highlight class="normal">[YAML<sp/>specification](https://yaml.org/spec/1.2/spec.html#id2759963)<sp/>for<sp/>the</highlight></codeline>
<codeline><highlight class="normal">complete<sp/>syntax).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>in-line<sp/>sequence:<sp/>`[1,<sp/>2,<sp/>3,<sp/>hello,<sp/>"world"]`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>multi-line<sp/>sequence:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">-<sp/>2</highlight></codeline>
<codeline><highlight class="normal">-<sp/>3</highlight></codeline>
<codeline><highlight class="normal">-<sp/>hello</highlight></codeline>
<codeline><highlight class="normal">-<sp/>world</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>**mapping**<sp/>is<sp/>an<sp/>unordered<sp/>list<sp/>of<sp/>key-value<sp/>pairs<sp/>(whose<sp/>elements<sp/>can</highlight></codeline>
<codeline><highlight class="normal">themselves<sp/>be<sp/>scalars,<sp/>sequences<sp/>or<sp/>mappings).</highlight></codeline>
<codeline><highlight class="normal">Two<sp/>main<sp/>syntaxes<sp/>are<sp/>available<sp/>for<sp/>mapping<sp/>(see<sp/>the<sp/></highlight></codeline>
<codeline><highlight class="normal">[YAML<sp/>specification](https://yaml.org/spec/1.2/spec.html#id2759963)<sp/>for<sp/>the</highlight></codeline>
<codeline><highlight class="normal">complete<sp/>syntax).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>in-line<sp/>mapping:<sp/>`{1:<sp/>one,<sp/>2:<sp/>"two",<sp/>"three":<sp/>3}`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>multi-line<sp/>mapping:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">1:<sp/>one</highlight></codeline>
<codeline><highlight class="normal">2:<sp/>two</highlight></codeline>
<codeline><highlight class="normal">"three":<sp/>3</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline/>
<codeline><highlight class="normal">#<sp/>specification<sp/>tree<sp/>root<sp/>{#root_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>*specification<sp/>tree<sp/>root*<sp/>is<sp/>a<sp/>**mapping**<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`"data"`<sp/>(*optional*)|a<sp/>\ref<sp/>data_map_node|</highlight></codeline>
<codeline><highlight class="normal">|`"metadata"`<sp/>(*optional*)|a<sp/>\ref<sp/>data_map_node|</highlight></codeline>
<codeline><highlight class="normal">|`"plugins"`<sp/>(*optional*)|a<sp/>\ref<sp/>plugin_map_node|</highlight></codeline>
<codeline><highlight class="normal">|`".*"`<sp/>(*optional*)|<sp/>*anything*<sp/>|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>the<sp/>`data`<sp/>and<sp/>`metadata`<sp/>sections<sp/>specify<sp/>the<sp/>type<sp/>of<sp/>the<sp/>data<sp/>in<sp/>buffers</highlight></codeline>
<codeline><highlight class="normal">exposed<sp/>by<sp/>the<sp/>application;<sp/>for<sp/>`metadata`,<sp/>%PDI<sp/>keeps<sp/>a<sp/>copy<sp/>while<sp/>it<sp/>only</highlight></codeline>
<codeline><highlight class="normal">keeps<sp/>references<sp/>for<sp/>`data`,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>`plugin`<sp/>section<sp/>specifies<sp/>the<sp/>list<sp/>of<sp/>plugins<sp/>to<sp/>load<sp/>and<sp/>their</highlight></codeline>
<codeline><highlight class="normal">configuration,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>additional<sp/>sections<sp/>are<sp/>ignored.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Example:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_metadata:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>subtype:<sp/>double</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size:<sp/>5</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>decl_hdf5:<sp/>#...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>mpi:<sp/>#...</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>array_type<sp/>{#array_type_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*array_type*<sp/>is<sp/>a<sp/>**mapping**<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`"type"`|`"array"`|</highlight></codeline>
<codeline><highlight class="normal">|`"size"`|a<sp/>\ref<sp/>intexpr_or_seq_node|</highlight></codeline>
<codeline><highlight class="normal">|`"subtype"`<sp/>(*optional*)|a<sp/>\ref<sp/>datatype_node|</highlight></codeline>
<codeline><highlight class="normal">|`"subsize"`<sp/>(*optional,<sp/>deprecated*)|a<sp/>\ref<sp/>intexpr_or_seq_node|</highlight></codeline>
<codeline><highlight class="normal">|`"start"`<sp/>(*optional,<sp/>deprecated*)|a<sp/>\ref<sp/>intexpr_or_seq_node|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*array_type_node*<sp/>represents<sp/>a<sp/>potentially<sp/>multi-dimensional<sp/>array<sp/>where:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>value<sp/>associated<sp/>to<sp/>the<sp/>`size`<sp/>key<sp/>represents<sp/>the<sp/>size<sp/>of<sp/>the<sp/>array<sp/>in</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>each<sp/>dimension<sp/>(C<sp/>order),</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>value<sp/>associated<sp/>to<sp/>the<sp/>`subtype`<sp/>key<sp/>represents<sp/>the<sp/>type<sp/>of<sp/>the<sp/>elements</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>in<sp/>the<sp/>array,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>value<sp/>associated<sp/>to<sp/>the<sp/>`subsize`<sp/>key<sp/>represents<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>actually<sp/>use<sp/>in<sp/>each<sp/>dimension<sp/>(slicing),<sp/>if<sp/>specified<sp/>it<sp/>**must**<sp/>have<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>same<sp/>number<sp/>of<sp/>elements<sp/>as<sp/>`size`,<sp/>this<sp/>defaults<sp/>to<sp/>the<sp/>full<sp/>array<sp/>size<sp/>in</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>each<sp/>dimension,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>value<sp/>associated<sp/>to<sp/>the<sp/>`start`<sp/>key<sp/>represents<sp/>the<sp/>index<sp/>of<sp/>the<sp/>first</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>element<sp/>to<sp/>actually<sp/>use<sp/>in<sp/>each<sp/>dimension<sp/>(slicing),<sp/>if<sp/>specified<sp/>it<sp/>**must**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>have<sp/>the<sp/>same<sp/>number<sp/>of<sp/>elements<sp/>as<sp/>`size`,<sp/>this<sp/>defaults<sp/>to<sp/>the<sp/>first<sp/>(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>element<sp/>in<sp/>each<sp/>dimension.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Examples:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal">subtype:<sp/>double</highlight></codeline>
<codeline><highlight class="normal">size:<sp/>5</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal">subtype:<sp/>{<sp/>type:<sp/>character,<sp/>kind:<sp/>4<sp/>}</highlight></codeline>
<codeline><highlight class="normal">size:<sp/>[<sp/>'$size_1d',<sp/>'$size_2d'<sp/>]</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>char_type<sp/>{#char_type_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*char_type*<sp/>is<sp/>a<sp/>**mapping**<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`"type"`|`"char"`|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*char_type*<sp/>represents<sp/>the<sp/>C<sp/>`char`<sp/>datatype;<sp/>it<sp/>accepts<sp/>no<sp/>parameter.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Example:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">type:<sp/>char</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>character_type<sp/>{#character_type_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*character_type*<sp/>is<sp/>a<sp/>**mapping**<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`"type"`|`"character"`|</highlight></codeline>
<codeline><highlight class="normal">|`"kind"`<sp/>(*optional*)|a<sp/>\ref<sp/>expression_node<sp/>"integer-valued<sp/>$-expression"|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*character_type_node*<sp/>represents<sp/>the<sp/>Fortran<sp/>`character`<sp/>datatype.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>value<sp/>associated<sp/>to<sp/>the<sp/>`kind`<sp/>key<sp/>corresponds<sp/>to<sp/>the<sp/>Fortran<sp/>*kind*</highlight></codeline>
<codeline><highlight class="normal">parameter<sp/>(`character(kind=...)`).</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Examples:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">type:<sp/>character</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">type:<sp/>character</highlight></codeline>
<codeline><highlight class="normal">kind:<sp/>4</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>datatype<sp/>{#datatype_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*datatype*<sp/>can<sp/>be<sp/>**any<sp/>of**:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>\ref<sp/>array_type_node,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>\ref<sp/>char_type_node,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>\ref<sp/>character_type_node,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>\ref<sp/>double_type_node,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>\ref<sp/>float_type_node,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>\ref<sp/>int_type_node,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>\ref<sp/>int16_type_node,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>\ref<sp/>int32_type_node,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>\ref<sp/>int64_type_node,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>\ref<sp/>int8_type_node,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>\ref<sp/>integer_type_node,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>\ref<sp/>logical_type_node,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>\ref<sp/>real_type_node,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>\ref<sp/>record_type_node,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>\ref<sp/>simple_datatype_node.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Amongst<sp/>these,<sp/>\ref<sp/>simple_datatype_node<sp/>is<sp/>the<sp/>only<sp/>scalar.</highlight></codeline>
<codeline><highlight class="normal">All<sp/>others<sp/>are<sp/>dictionaries<sp/>with<sp/>a<sp/>`type`<sp/>key<sp/>used<sp/>for<sp/>disambiguation<sp/>between</highlight></codeline>
<codeline><highlight class="normal">them.</highlight></codeline>
<codeline><highlight class="normal">Plugins<sp/>can<sp/>add<sp/>new<sp/>options<sp/>that<sp/>follow<sp/>the<sp/>same<sp/>pattern.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*datatype*<sp/>represents<sp/>the<sp/>memory<sp/>layout<sp/>and<sp/>interpretation<sp/>for<sp/>data</highlight></codeline>
<codeline><highlight class="normal">exposed<sp/>by<sp/>the<sp/>user<sp/>in<sp/>the<sp/>\ref<sp/>Data_store<sp/>"data<sp/>store".</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>data_map<sp/>{#data_map_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*data_map*<sp/>is<sp/>a<sp/>**mapping**<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`".*"`<sp/>(*optional*)|a<sp/>\ref<sp/>datatype_node|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>each<sp/>key<sp/>identifies<sp/>the<sp/>name<sp/>of<sp/>a<sp/>buffer<sp/>exposed<sp/>to<sp/>%PDI<sp/>associated<sp/>to<sp/>its</highlight></codeline>
<codeline><highlight class="normal">type.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Example:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">my_data_1:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">my_data_2:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>double,<sp/>size:<sp/>5}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>double_type<sp/>{#double_type_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*double_type*<sp/>is<sp/>a<sp/>**mapping**<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`"type"`|`"double"`|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*double_type*<sp/>represents<sp/>the<sp/>C<sp/>`double`<sp/>type.</highlight></codeline>
<codeline><highlight class="normal">It<sp/>accepts<sp/>no<sp/>parameter.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Example:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">type:<sp/>double</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>$-expression<sp/>{#expression_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*$-expression*<sp/>is<sp/>a<sp/>**scalar**<sp/>whose<sp/>content<sp/>matches<sp/>the<sp/>following</highlight></codeline>
<codeline><highlight class="normal">grammar:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">\include<sp/>docs/expression_grammar.in.txt</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>rules<sp/>for<sp/>evaluating<sp/>an<sp/>expression<sp/>are<sp/>close<sp/>to<sp/>those<sp/>of<sp/>BASH<sp/>for<sp/>example.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">In<sp/>addition<sp/>to<sp/>raw<sp/>text,<sp/>a<sp/>`STRING_LITERAL`<sp/>can<sp/>contain<sp/>references<sp/>to<sp/>the<sp/>string</highlight></codeline>
<codeline><highlight class="normal">value<sp/>of<sp/>some<sp/>data<sp/>in<sp/>the<sp/>store<sp/>as<sp/>well<sp/>as<sp/>the<sp/>result<sp/>of<sp/>an<sp/>operation<sp/>by</highlight></codeline>
<codeline><highlight class="normal">enclosing<sp/>it<sp/>inside<sp/>a<sp/>dollar-parenthesis<sp/>`$()`.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">An<sp/>`OPERATION`<sp/>can<sp/>include<sp/>logical<sp/>and<sp/>arithmetic<sp/>operators<sp/>grouped<sp/>by</highlight></codeline>
<codeline><highlight class="normal">parenthesis.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>basic<sp/>terms<sp/>manipulated<sp/>in<sp/>an<sp/>operation<sp/>can<sp/>be<sp/>integer<sp/>literals<sp/>or</highlight></codeline>
<codeline><highlight class="normal">references<sp/>to<sp/>the<sp/>integer<sp/>value<sp/>of<sp/>some<sp/>data<sp/>in<sp/>the<sp/>store.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>`REFERENCE`<sp/>is<sp/>introduced<sp/>by<sp/>a<sp/>dollar<sp/>`$`<sp/>sign<sp/>and<sp/>optionally<sp/>enclosed<sp/>in</highlight></codeline>
<codeline><highlight class="normal">curly<sp/>braces<sp/>`{`,<sp/>`}`.</highlight></codeline>
<codeline><highlight class="normal">Its<sp/>value<sp/>is<sp/>that<sp/>of<sp/>the<sp/>data<sp/>or<sp/>metadata<sp/>with<sp/>the<sp/>associated<sp/>name.</highlight></codeline>
<codeline><highlight class="normal">It<sp/>is<sp/>always<sp/>a<sp/>good<sp/>idea<sp/>to<sp/>have<sp/>referenced<sp/>values<sp/>in<sp/>the<sp/>metadata<sp/>section<sp/>as<sp/>it</highlight></codeline>
<codeline><highlight class="normal">prevents<sp/>dangling<sp/>references.</highlight></codeline>
<codeline><highlight class="normal">A<sp/>direct<sp/>reference<sp/>is<sp/>possible<sp/>as<sp/>well<sp/>as<sp/>sub-references<sp/>to<sp/>array<sp/>elements<sp/>using</highlight></codeline>
<codeline><highlight class="normal">the<sp/>square<sp/>brackets<sp/>`[`,<sp/>`]`<sp/>operator.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">The<sp/>value-type<sp/>of<sp/>an<sp/>`EXPRESSION`<sp/>is<sp/>as<sp/>follow:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>if<sp/>it's<sp/>a<sp/>`REFERENCE`,<sp/>it<sp/>has<sp/>the<sp/><sp/>type<sp/>of<sp/>the<sp/>referenced<sp/>data<sp/>in<sp/>the<sp/>store,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>if<sp/>it's<sp/>a<sp/>`OPERATION`,<sp/>it<sp/>is<sp/>integer-valued,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>if<sp/>it's<sp/>a<sp/>`STRING_LITERAL`,<sp/>it<sp/>is<sp/>string-valued.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">In<sp/>addition,<sp/>an<sp/>integer<sp/>can<sp/>be<sp/>interpreted<sp/>as<sp/>a<sp/>string<sp/>or<sp/>as<sp/>a<sp/>boolean<sp/>value</highlight></codeline>
<codeline><highlight class="normal">where<sp/>zero<sp/>is<sp/>interpreted<sp/>as<sp/>false<sp/>and<sp/>any<sp/>other<sp/>value<sp/>as<sp/>true.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Examples:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">'$my_data'</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">'($my_data<sp/>+<sp/>3)<sp/>%<sp/>6'</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">'my<sp/>name<sp/>is<sp/>${my_name}'</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>float_type<sp/>{#float_type_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*float_type*<sp/>is<sp/>a<sp/>**mapping**<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`"type"`|`"float"`|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>\ref<sp/>float_type_node<sp/>represents<sp/>the<sp/>C<sp/>`float`<sp/>type.</highlight></codeline>
<codeline><highlight class="normal">It<sp/>accepts<sp/>no<sp/>parameter.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Example:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">type:<sp/>float</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>int_type<sp/>{#int_type_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*int_type*<sp/>is<sp/>a<sp/>**mapping**<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`"type"`|`"int"`|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>\ref<sp/>int_type_node<sp/>represents<sp/>the<sp/>C<sp/>`int`<sp/>type.</highlight></codeline>
<codeline><highlight class="normal">It<sp/>accepts<sp/>no<sp/>parameter.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Example:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">type:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>int16_type<sp/>{#int16_type_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*int16_type*<sp/>is<sp/>a<sp/>**mapping**<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`"type"`|`"int16"`|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>\ref<sp/>int16_type_node<sp/>represents<sp/>the<sp/>C<sp/>`int16_t`<sp/>type<sp/>from</highlight></codeline>
<codeline><highlight class="normal">the<sp/>`&lt;stdtypes.h&gt;`<sp/>header.</highlight></codeline>
<codeline><highlight class="normal">It<sp/>accepts<sp/>no<sp/>parameter.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Example:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">type:<sp/>int16</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>int32_type<sp/>{#int32_type_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*int32_type*<sp/>is<sp/>a<sp/>**mapping**<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`"type"`|`"int32"`|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>\ref<sp/>int32_type_node<sp/>represents<sp/>the<sp/>C<sp/>`int32_t`<sp/>type<sp/>from</highlight></codeline>
<codeline><highlight class="normal">the<sp/>`&lt;stdtypes.h&gt;`<sp/>header.</highlight></codeline>
<codeline><highlight class="normal">It<sp/>accepts<sp/>no<sp/>parameter.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Example:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">type:<sp/>int32</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>int64_type<sp/>{#int64_type_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*int64_type*<sp/>is<sp/>a<sp/>**mapping**<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`"type"`|`"int64"`|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*int64_type*<sp/>represents<sp/>the<sp/>C<sp/>`int64_t`<sp/>type<sp/>from</highlight></codeline>
<codeline><highlight class="normal">the<sp/>`&lt;stdtypes.h&gt;`<sp/>header.</highlight></codeline>
<codeline><highlight class="normal">It<sp/>accepts<sp/>no<sp/>parameter.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Example:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">type:<sp/>int64</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>int8_type<sp/>{#int8_type_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*int8_type*<sp/>is<sp/>a<sp/>**mapping**<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`"type"`|`"int8"`|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>\ref<sp/>int8_type_node<sp/>represents<sp/>the<sp/>C<sp/>`int8_t`<sp/>type<sp/>from<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`&lt;stdtypes.h&gt;`<sp/>header.</highlight></codeline>
<codeline><highlight class="normal">It<sp/>accepts<sp/>no<sp/>parameter.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Example:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">type:<sp/>int8</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>integer_type<sp/>{#integer_type_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*integer_type*<sp/>is<sp/>a<sp/>**mapping**<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`"type"`|`"integer"`|</highlight></codeline>
<codeline><highlight class="normal">|`"kind"`<sp/>(*optional*)|a<sp/>\ref<sp/>expression_node<sp/>"integer-valued<sp/>$-expression"|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*integer_type*<sp/>represents<sp/>the<sp/>Fortran<sp/>`integer`<sp/>datatype.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>value<sp/>associated<sp/>to<sp/>the<sp/>`kind`<sp/>key<sp/>corresponds<sp/>to<sp/>the<sp/>Fortran<sp/>*kind*</highlight></codeline>
<codeline><highlight class="normal">parameter<sp/>(`integer(kind=...)`).</highlight></codeline>
<codeline><highlight class="normal">If<sp/>missing,<sp/>the<sp/>default<sp/>kind<sp/>of<sp/>the<sp/>Fortran<sp/>implementation<sp/>is<sp/>used.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Examples:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">type:<sp/>integer</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">type:<sp/>integer</highlight></codeline>
<codeline><highlight class="normal">kind:<sp/>2</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>intexpr_seq<sp/>{#intexpr_seq_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*intexpr_seq*<sp/>is<sp/>a<sp/>**sequence**<sp/>where<sp/>each<sp/>element<sp/>of<sp/>the<sp/>sequence<sp/>is</highlight></codeline>
<codeline><highlight class="normal">a<sp/>\ref<sp/>expression_node<sp/>"integer-valued<sp/>$-expression".</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Example:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>'2',<sp/>'$size',<sp/>'$other_size<sp/>+<sp/>2'<sp/>]</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>intexpr_or_seq<sp/>{#intexpr_or_seq_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*intexpr_or_seq*<sp/>can<sp/>be<sp/>**any<sp/>of**:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>\ref<sp/>expression_node<sp/>"integer-valued<sp/>$-expression",</highlight></codeline>
<codeline><highlight class="normal">*<sp/>a<sp/>\ref<sp/>intexpr_seq_node.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">In<sp/>that<sp/>context,<sp/>a<sp/>simple<sp/>\ref<sp/>expression_node<sp/>is<sp/>interpreted<sp/>as<sp/>a<sp/>shortcut<sp/>for</highlight></codeline>
<codeline><highlight class="normal">a<sp/>sequence<sp/>containing<sp/>a<sp/>single<sp/>\ref<sp/>expression_node.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">For<sp/>example,<sp/>the<sp/>following<sp/>value:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">"$x<sp/>+<sp/>2"</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">is<sp/>interpreted<sp/>as<sp/>if<sp/>it<sp/>was:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">[<sp/>"$x<sp/>+<sp/>2"<sp/>]</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>logical_type<sp/>{#logical_type_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*logical_type*<sp/>is<sp/>a<sp/>**mapping**<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`"type"`|`"logical"`|</highlight></codeline>
<codeline><highlight class="normal">|`"kind"`<sp/>(*optional*)|a<sp/>\ref<sp/>expression_node<sp/>"integer-valued<sp/>$-expression"|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*logical_type*<sp/>represents<sp/>the<sp/>Fortran<sp/>`logical`<sp/>datatype.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>value<sp/>associated<sp/>to<sp/>the<sp/>`kind`<sp/>key<sp/>corresponds<sp/>to<sp/>the<sp/>Fortran<sp/>*kind*</highlight></codeline>
<codeline><highlight class="normal">parameter<sp/>(`logical(kind=...)`).</highlight></codeline>
<codeline><highlight class="normal">If<sp/>missing,<sp/>the<sp/>default<sp/>kind<sp/>of<sp/>the<sp/>Fortran<sp/>implementation<sp/>is<sp/>used.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Examples:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">type:<sp/>logical</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">type:<sp/>logical</highlight></codeline>
<codeline><highlight class="normal">kind:<sp/>1</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>member_desc<sp/>{#member_desc_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*member_desc*<sp/>is<sp/>a<sp/>**mapping**<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`"disp"`|a<sp/>\ref<sp/>expression_node<sp/>"integer-valued<sp/>$-expression"|</highlight></codeline>
<codeline><highlight class="normal">|`"type"`|a<sp/>`scalar`,<sp/>`array`<sp/>or<sp/>`record`<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`".*"`<sp/>(*optional*)|<sp/>*anything*<sp/>|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>the<sp/>value<sp/>associated<sp/>to<sp/>the<sp/>`disp`<sp/>key<sp/>identifies<sp/>the<sp/>displacement<sp/>in<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>from<sp/>the<sp/>base<sp/>address<sp/>of<sp/>the<sp/>record<sp/>and<sp/>the<sp/>address<sp/>of<sp/>this<sp/>specific<sp/>member,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>value<sp/>associated<sp/>to<sp/>the<sp/>`type`<sp/>key<sp/>identifies<sp/>the<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>\ref<sp/>datatype_node<sp/>"type"<sp/>of<sp/>this<sp/>record,<sp/>all<sp/>other<sp/>keys<sp/>required<sp/>for<sp/>this</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>\ref<sp/>datatype_node<sp/>must<sp/>be<sp/>present.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Examples:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">my_char:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>disp:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type:<sp/>int64</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>my_array:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>disp:<sp/>8</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subtype:<sp/>int64</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/>[10,<sp/>10]</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">See<sp/>\ref<sp/>record_type_node<sp/>for<sp/>more<sp/>examples.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>members_map<sp/>{#members_map_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*members_map*<sp/>is<sp/>a<sp/>**mapping**<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`".*"`<sp/>(*optional*)|a<sp/>\ref<sp/>member_desc_node|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>each<sp/>key<sp/>identifies<sp/>the<sp/>name<sp/>of<sp/>a<sp/>member<sp/>of<sp/>the<sp/>record<sp/>and<sp/>the<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>associated<sp/>to<sp/>it<sp/>describes<sp/>the<sp/>member<sp/>itself.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">See<sp/>\ref<sp/>record_type_node<sp/>for<sp/>an<sp/>example.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>plugin_map<sp/>{#plugin_map_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*plugin_map*<sp/>is<sp/>a<sp/>**mapping**<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`".*"`<sp/>(*optional*)|<sp/>*anything*<sp/>|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">*<sp/>each<sp/>key<sp/>identifies<sp/>the<sp/>name<sp/>of<sp/>a<sp/>plugin<sp/>to<sp/>load<sp/>associated<sp/>to<sp/>its</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>configuration;<sp/>the<sp/>content<sp/>of<sp/>the<sp/>configuration<sp/>depends<sp/>on<sp/>the<sp/>plugin.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Have<sp/>a<sp/>look<sp/>at<sp/>the<sp/>\ref<sp/>Plugins<sp/>"plugins"<sp/>documentation<sp/>to<sp/>see<sp/>the<sp/>specification</highlight></codeline>
<codeline><highlight class="normal">tree<sp/>they<sp/>accept.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">See<sp/>\ref<sp/>root_node<sp/>for<sp/>an<sp/>example.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>real_type<sp/>{#real_type_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*real_type*<sp/>is<sp/>a<sp/>**mapping**<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`"type"`|`"real"`|</highlight></codeline>
<codeline><highlight class="normal">|`"kind"`<sp/>(*optional*)|a<sp/>\ref<sp/>expression_node<sp/>"integer-valued<sp/>$-expression"|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*real_type*<sp/>represents<sp/>the<sp/>Fortran<sp/>`real`<sp/>datatype.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>value<sp/>associated<sp/>to<sp/>the<sp/>`kind`<sp/>key<sp/>corresponds<sp/>to<sp/>the<sp/>Fortran<sp/>*kind*</highlight></codeline>
<codeline><highlight class="normal">parameter<sp/>(`real(kind=...)`).</highlight></codeline>
<codeline><highlight class="normal">If<sp/>missing,<sp/>the<sp/>default<sp/>kind<sp/>of<sp/>the<sp/>Fortran<sp/>implementation<sp/>is<sp/>used.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Examples:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">type:<sp/>real</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">type:<sp/>real</highlight></codeline>
<codeline><highlight class="normal">kind:<sp/>8</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>record_type<sp/>{#record_type_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*record_type*<sp/>is<sp/>a<sp/>**mapping**<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>keys:</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">|key|value|</highlight></codeline>
<codeline><highlight class="normal">|:--|:----|</highlight></codeline>
<codeline><highlight class="normal">|`"type"`|`"record"`|</highlight></codeline>
<codeline><highlight class="normal">|`"buffersize"`|a<sp/>\ref<sp/>expression_node<sp/>"integer-valued<sp/>$-expression"|</highlight></codeline>
<codeline><highlight class="normal">|`"members"`<sp/>(*optional*)|a<sp/>\ref<sp/>members_map_node|</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>\ref<sp/>record_type_node<sp/>represents<sp/>a<sp/>"record",<sp/>*aka*<sp/>C<sp/>"struct",<sp/>C++<sp/>"class",</highlight></codeline>
<codeline><highlight class="normal">Fortran<sp/>"derived<sp/>type"<sp/>where:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>value<sp/>associated<sp/>to<sp/>the<sp/>`buffersize`<sp/>key<sp/>represents<sp/>the<sp/>overall<sp/>size<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>the<sp/>record,<sp/>including<sp/>potential<sp/>padding,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>the<sp/>value<sp/>associated<sp/>to<sp/>the<sp/>`members`<sp/>key<sp/>lists<sp/>all<sp/>members<sp/>of<sp/>the<sp/>record.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">**Example:**</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">type:<sp/>record</highlight></codeline>
<codeline><highlight class="normal">buffersize:<sp/>8</highlight></codeline>
<codeline><highlight class="normal">members:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>first_int:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>disp:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>int32</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>seconf_int:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>disp:<sp/>4</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>int32</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>simple_datatype<sp/>{#simple_datatype_node}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">A<sp/>*simple_datatype*<sp/>is<sp/>a<sp/>**scalar**.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">It<sp/>is<sp/>interpreted<sp/>as<sp/>a<sp/>shortcut<sp/>for<sp/>a<sp/>mapping<sp/>with<sp/>a</highlight></codeline>
<codeline><highlight class="normal">single<sp/>key<sp/>`type`<sp/>whose<sp/>value<sp/>is<sp/>the<sp/>provided<sp/>scalar<sp/>and<sp/>therefore<sp/>another</highlight></codeline>
<codeline><highlight class="normal">\ref<sp/>datatype_node.</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">For<sp/>example,<sp/>the<sp/>following<sp/>value:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">"my_type"</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">is<sp/>interpreted<sp/>as<sp/>if<sp/>it<sp/>was:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">{<sp/>type:<sp/>"my_type"<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
    </programlisting>
    <location file="Specification_tree_ref.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="version_8h" kind="file" language="C++">
    <compoundname>version.h</compoundname>
    <includedby refid="pdi_8h" local="no">pdi.h</includedby>
    <invincdepgraph>
      <node id="1">
        <label>version.h</label>
        <link refid="version_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>context.h</label>
        <link refid="context_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ref_any.h</label>
        <link refid="ref__any_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>paraconf_wrapper.h</label>
        <link refid="paraconf__wrapper_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>data_descriptor.h</label>
        <link refid="data__descriptor_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>pointer_datatype.h</label>
        <link refid="pointer__datatype_8h_source"/>
      </node>
      <node id="12">
        <label>record_datatype.h</label>
        <link refid="record__datatype_8h_source"/>
      </node>
      <node id="15">
        <label>error.h</label>
        <link refid="error_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>plugin.h</label>
        <link refid="plugin_8h_source"/>
      </node>
      <node id="4">
        <label>array_datatype.h</label>
        <link refid="array__datatype_8h_source"/>
      </node>
      <node id="3">
        <label>pdi_fwd.h</label>
        <link refid="pdi__fwd_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>scalar_datatype.h</label>
        <link refid="scalar__datatype_8h_source"/>
      </node>
      <node id="14">
        <label>datatype_template.h</label>
        <link refid="datatype__template_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>expression.h</label>
        <link refid="expression_8h_source"/>
      </node>
      <node id="2">
        <label>pdi.h</label>
        <link refid="pdi_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>logger.h</label>
        <link refid="logger_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>datatype.h</label>
        <link refid="datatype_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>context_proxy.h</label>
        <link refid="context__proxy_8h_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="version_8h_1a2253a05dc1a5c1f8e9753a961e73af42" prot="public" static="no">
        <name>PDI_VERSION_MAJOR</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/build/pdi/version.h" line="25" column="14" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/build/pdi/version.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="version_8h_1a24463e9db5d01caf8474bb1c35520e5f" prot="public" static="no">
        <name>PDI_VERSION_MINOR</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/build/pdi/version.h" line="26" column="14" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/build/pdi/version.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="version_8h_1aa60c73e1e74e88e46395b99772eb9423" prot="public" static="no">
        <name>PDI_VERSION_PATCH</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/build/pdi/version.h" line="27" column="14" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/build/pdi/version.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="version_8h_1a4b5fc0727221432432f65c08736ab4ab" prot="public" static="no">
        <name>PDI_VERSION_MODIF</name>
        <initializer>"pre_git-62e94b978"</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/build/pdi/version.h" line="28" column="9" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/build/pdi/version.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="version_8h_1a914f40bdb285c5d14cf1b307a69241bf" prot="public" static="no">
        <name>PDI_VERSION</name>
        <initializer>((PDI_VERSION_MAJOR&lt;&lt;24) + (PDI_VERSION_MINOR&lt;&lt;16) + (PDI_VERSION_PATCH&lt;&lt;8))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/build/pdi/version.h" line="30" column="9" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/build/pdi/version.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2015-2019<sp/>Commissariat<sp/>a<sp/>l'energie<sp/>atomique<sp/>et<sp/>aux<sp/>energies<sp/>alternatives<sp/>(CEA)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>CEA<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>"AS<sp/>IS",<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"/></codeline>
<codeline lineno="24"><highlight class="normal"/></codeline>
<codeline lineno="25"><highlight class="normal"/><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/><sp/>PDI_VERSION_MAJOR<sp/><sp/>0</highlight><highlight class="normal"/></codeline>
<codeline lineno="26"><highlight class="normal"/><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/><sp/>PDI_VERSION_MINOR<sp/><sp/>7</highlight><highlight class="normal"/></codeline>
<codeline lineno="27"><highlight class="normal"/><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/><sp/>PDI_VERSION_PATCH<sp/><sp/>0</highlight><highlight class="normal"/></codeline>
<codeline lineno="28"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_VERSION_MODIF<sp/>"pre_git-62e94b978"</highlight><highlight class="normal"/></codeline>
<codeline lineno="29"><highlight class="normal"/></codeline>
<codeline lineno="30"><highlight class="normal"/><highlight class="preprocessor">#define<sp/>PDI_VERSION<sp/>((PDI_VERSION_MAJOR&lt;&lt;24)<sp/>+<sp/>(PDI_VERSION_MINOR&lt;&lt;16)<sp/>+<sp/>(PDI_VERSION_PATCH&lt;&lt;8))</highlight></codeline>
    </programlisting>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/build/pdi/version.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="group__init__final" kind="group">
    <compoundname>init_final</compoundname>
    <title>Initialization and finalization</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__init__final_1ga3dc660be40c93c169337e3d2692b2ed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_init</definition>
        <argsstring>(PC_tree_t conf)</argsstring>
        <name>PDI_init</name>
        <param>
          <type>PC_tree_t</type>
          <declname>conf</declname>
        </param>
        <briefdescription>
<para>Initializes <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">conf</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="162" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="162" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__init__final_1ga7995fbda2099950ed4ffc7fd4c0bb969" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_finalize</definition>
        <argsstring>(void)</argsstring>
        <name>PDI_finalize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Finalizes <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an error status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="167" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="167" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__init__final_1gaddd32ea29cf9dfa21587abbd0b5a8fd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_version</definition>
        <argsstring>(unsigned long *provided, unsigned long expected)</argsstring>
        <name>PDI_version</name>
        <param>
          <type>unsigned long *</type>
          <declname>provided</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>expected</declname>
        </param>
        <briefdescription>
<para>Checks <ref refid="namespacePDI" kindref="compound">PDI</ref> API version. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">provided</parametername>
</parameternamelist>
<parameterdescription>
<para>version if non-null it is filled with the provided API version </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">expected</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-zero the expected API version </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status if the expected version is incompatible with the provided one </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="176" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="176" declcolumn="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The initialization and finalization part of the API is used to setup <ref refid="namespacePDI" kindref="compound">PDI</ref>, release its resources and check version information. </para>
    </briefdescription>
    <detaileddescription>
<para>The initialization and finalization part of the API is used to setup <ref refid="namespacePDI" kindref="compound">PDI</ref>, release its resources and check version information. </para>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="group__annotation" kind="group">
    <compoundname>annotation</compoundname>
    <title>Code annotation</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__annotation_1gafa02617bd8d016f3f931adc107b38027" prot="public" static="no" strong="no">
        <type/>
        <name>PDI_inout_e</name>
        <enumvalue id="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a90e36abac02b52f568e5cd3100e77d7a" prot="public">
          <name>PDI_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>No data transfert. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a70fa3cd94e02b997794d9eaaea34b0b6" prot="public">
          <name>PDI_IN</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>data tranfer from <ref refid="namespacePDI" kindref="compound">PDI</ref> to the main code </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" prot="public">
          <name>PDI_OUT</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>data transfer from the main code to <ref refid="namespacePDI" kindref="compound">PDI</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a5cf752cb5cd43b4ae3d7590af61c9939" prot="public">
          <name>PDI_INOUT</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>data transfer in both direction </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Access directions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="187" column="25" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" bodystart="187" bodyend="197"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__annotation_1ga34e34cede8627c47c07e6ede997e37fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_share</definition>
        <argsstring>(const char *name, void *data, PDI_inout_t access)</argsstring>
        <name>PDI_share</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>PDI_inout_t</type>
          <declname>access</declname>
        </param>
        <briefdescription>
<para>Shares some data with <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The user code should not modify it before a call to either PDI_release or PDI_reclaim. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the data name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">data</parametername>
</parameternamelist>
<parameterdescription>
<para>the accessed data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">access</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the data can be accessed for read or write by <ref refid="namespacePDI" kindref="compound">PDI</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status </para>
</simplesect>
<simplesect kind="pre"><para>the user code owns the data buffer </para>
</simplesect>
<simplesect kind="post"><para>ownership of the data buffer is shared between <ref refid="namespacePDI" kindref="compound">PDI</ref> and the user code</para>
</simplesect>
the access parameter is a binary OR of PDI_IN &amp; PDI_OUT.<itemizedlist>
<listitem><para>PDI_IN means <ref refid="namespacePDI" kindref="compound">PDI</ref> can set the buffer content</para>
</listitem><listitem><para>PDI_OUT means the buffer contains data that can be accessed by <ref refid="namespacePDI" kindref="compound">PDI</ref> </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="214" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="214" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__annotation_1ga8dcd0c81d7697ea473a55bd57efb717d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_access</definition>
        <argsstring>(const char *name, void **buffer, PDI_inout_t inout)</argsstring>
        <name>PDI_access</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>PDI_inout_t</type>
          <declname>inout</declname>
        </param>
        <briefdescription>
<para>Requests for <ref refid="namespacePDI" kindref="compound">PDI</ref> to access a data buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the data name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the accessed data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">inout</parametername>
</parameternamelist>
<parameterdescription>
<para>the access properties (PDI_IN, PDI_OUT, PDI_INOUT) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="namespacePDI" kindref="compound">PDI</ref> owns the data buffer </para>
</simplesect>
<simplesect kind="post"><para>ownership of the data buffer is shared between <ref refid="namespacePDI" kindref="compound">PDI</ref> and the user code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="224" column="16" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="224" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__annotation_1ga001117ae897dd4e4a25c312b5d00c43a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_release</definition>
        <argsstring>(const char *name)</argsstring>
        <name>PDI_release</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Releases ownership of a data shared with <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespacePDI" kindref="compound">PDI</ref> is then responsible to free the associated memory whenever necessary. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the data to release </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status </para>
</simplesect>
<simplesect kind="pre"><para>ownership of the data buffer is shared between <ref refid="namespacePDI" kindref="compound">PDI</ref> and the user code </para>
</simplesect>
<simplesect kind="pre"><para><ref refid="namespacePDI" kindref="compound">PDI</ref> owns the data buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="233" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="233" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__annotation_1gabf58b7c146cbf7e3341245f60cec0f7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_reclaim</definition>
        <argsstring>(const char *name)</argsstring>
        <name>PDI_reclaim</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Reclaims ownership of a data buffer shared with <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespacePDI" kindref="compound">PDI</ref> does not manage the buffer memory anymore. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the data to reclaim </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status </para>
</simplesect>
<simplesect kind="pre"><para>ownership of the data buffer is shared between <ref refid="namespacePDI" kindref="compound">PDI</ref> and the user code </para>
</simplesect>
<simplesect kind="post"><para>the user code owns the data buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="242" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="242" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__annotation_1gab21d59fd8d6532f6b8d7a4ac69a2388b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_event</definition>
        <argsstring>(const char *event)</argsstring>
        <name>PDI_event</name>
        <param>
          <type>const char *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Triggers a <ref refid="namespacePDI" kindref="compound">PDI</ref> "event". </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>the event name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="248" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="248" declcolumn="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The code annotation API is the main interface to use in the code. </para>
    </briefdescription>
    <detaileddescription>
<para>It offers functions that can be called from code with no side effect by default and that can therefore be considered as annotations. </para>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="group__error" kind="group">
    <compoundname>error</compoundname>
    <title>Error handling</title>
    <innerclass refid="structPDI__errhandler__s" prot="public">PDI_errhandler_s</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__error_1ga85517a933cd17af89b7b921c6671ff54" prot="public" static="no" strong="no">
        <type/>
        <name>PDI_status_e</name>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54a752e28c3de06c8d7c6e270a7c7eef906" prot="public">
          <name>PDI_OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>everything went well </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54a167ca60326e4c984b2d84d5bb226b854" prot="public">
          <name>PDI_UNAVAILABLE</name>
          <briefdescription>
<para>on an input call, no such data is available </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54a65609429c408deee8f6ad265b6549518" prot="public">
          <name>PDI_ERR_CONFIG</name>
          <briefdescription>
<para>The configuration file is invalid. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54a3f8ad0c92399f5fd4d03a69bf5cc1eb7" prot="public">
          <name>PDI_ERR_VALUE</name>
          <briefdescription>
<para>A value expression is invalid. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54ad6308770d341201db122e30829c718af" prot="public">
          <name>PDI_ERR_PLUGIN</name>
          <briefdescription>
<para>Tried to load a non-existing plugin. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54ab4f8142de69e35811e0e1f231e544534" prot="public">
          <name>PDI_ERR_IMPL</name>
          <briefdescription>
<para>Implementation limitation (typically an unimplemented feature) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54a9b282d8284fbacc7a4fd81e81964260b" prot="public">
          <name>PDI_ERR_SYSTEM</name>
          <briefdescription>
<para>A system error occured (OS, etc.) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54a501534fa48095e939e2d553cc72640b7" prot="public">
          <name>PDI_ERR_STATE</name>
          <briefdescription>
<para>A call to a function has been made at a wrong time (e.g. </para>
          </briefdescription>
          <detaileddescription>
<para>closing an unopened transaction) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54ae573fb10e871f40c2b37182ff415f454" prot="public">
          <name>PDI_ERR_RIGHT</name>
          <briefdescription>
<para>A conflict of onwership over a content has been raised. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__error_1gga85517a933cd17af89b7b921c6671ff54a7eb3671f2fe468efe6b23291d3a11ade" prot="public">
          <name>PDI_ERR_TYPE</name>
          <briefdescription>
<para>Invalid type error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Error codes of <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="77" column="26" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" bodystart="77" bodyend="101"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__error_1ga9e635248278d0dda3d5df7142a720f81" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* PDI_errfunc_f) (PDI_status_t status, const char *message, void *context)</definition>
        <argsstring>)(PDI_status_t status, const char *message, void *context)</argsstring>
        <name>PDI_errfunc_f</name>
        <briefdescription>
<para>Type of a callback function used when an error occurs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>the error code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the human-readable error message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>a user-provided context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="108" column="9" bodyfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__error_1ga071fa4de35e77bd21db91b92659c7341" prot="public" static="no" mutable="no">
        <type>const PDI_errhandler_t</type>
        <definition>const PDI_errhandler_t PDI_ASSERT_HANDLER</definition>
        <argsstring/>
        <name>PDI_ASSERT_HANDLER</name>
        <briefdescription>
<para>Prints the error message and aborts if the status is invalid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="125" column="32" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="125" declcolumn="32"/>
      </memberdef>
      <memberdef kind="variable" id="group__error_1ga9807c58ccf192137c930993273a31cf9" prot="public" static="no" mutable="no">
        <type>const PDI_errhandler_t</type>
        <definition>const PDI_errhandler_t PDI_WARN_HANDLER</definition>
        <argsstring/>
        <name>PDI_WARN_HANDLER</name>
        <briefdescription>
<para>Prints the error message and continue if the status is invalid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="129" column="32" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="129" declcolumn="32"/>
      </memberdef>
      <memberdef kind="variable" id="group__error_1ga5d883a6c102ceeb7d3527201df2ab877" prot="public" static="no" mutable="no">
        <type>const PDI_errhandler_t</type>
        <definition>const PDI_errhandler_t PDI_NULL_HANDLER</definition>
        <argsstring/>
        <name>PDI_NULL_HANDLER</name>
        <briefdescription>
<para>Does nothing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="133" column="32" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="133" declcolumn="32"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__error_1gad969c54dedc6a5e579dc8f9c894a92ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* PDI_errmsg</definition>
        <argsstring>(void)</argsstring>
        <name>PDI_errmsg</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return a human-readabe message describing the last error that occured in <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="138" column="13" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="138" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__error_1ga01fffcbd0a27c1fe0624cb8d64372a25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_errhandler_t</type>
        <definition>PDI_errhandler_t PDI_errhandler</definition>
        <argsstring>(PDI_errhandler_t handler)</argsstring>
        <name>PDI_errhandler</name>
        <param>
          <type>PDI_errhandler_t</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Sets the error handler to use. </para>
        </briefdescription>
        <detaileddescription>
<para>PDI_asserthandler is the default handler before this function is called</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the new handler to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the previous handler </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="147" column="19" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="147" declcolumn="19"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The error handling API supports checking the error status of <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>By default, errors in <ref refid="namespacePDI" kindref="compound">PDI</ref> C API are signaled by a return code of type PDI_status_t and an error message can be retrieved with the PDI_errmsg function. This default behavior can be changed by replacing the error handler with the PDI_errhandler function. </para>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="group__hl__annotation" kind="group">
    <compoundname>hl_annotation</compoundname>
    <title>High-level annotations</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_expose</definition>
        <argsstring>(const char *name, void *data, PDI_inout_t access)</argsstring>
        <name>PDI_expose</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>PDI_inout_t</type>
          <declname>access</declname>
        </param>
        <briefdescription>
<para>Shortly exposes some data to <ref refid="namespacePDI" kindref="compound">PDI</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to PDI_share + PDI_reclaim. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the data name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>the exposed data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">access</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the data can be accessed for read or write by <ref refid="namespacePDI" kindref="compound">PDI</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="263" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="263" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__hl__annotation_1gae5c670b378e423e3083122f62c1f0a59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_multi_expose</definition>
        <argsstring>(const char *event_name, const char *name, void *data, PDI_inout_t access,...)</argsstring>
        <name>PDI_multi_expose</name>
        <param>
          <type>const char *</type>
          <declname>event_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>PDI_inout_t</type>
          <declname>access</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Performs multiple exposes at once. </para>
        </briefdescription>
        <detaileddescription>
<para>All the data is shared in order they were specified and reclaimed in reversed order after an event is triggered.</para>
<para>NULL argument indicates an end of the list.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the event that will be triggered when all data become available </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the data name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>the exposed data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">access</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the data can be accessed for read or write by <ref refid="namespacePDI" kindref="compound">PDI</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>(additional arguments) additional list of data to expose, each should contain name, data and access, NULL argument inidactes an end of the list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="280" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="280" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__hl__annotation_1ga39bceccdb0528be91cc79df784a161bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_transaction_begin</definition>
        <argsstring>(const char *name)</argsstring>
        <name>PDI_transaction_begin</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Begin a transaction in which all PDI_expose calls are grouped. </para>
        </briefdescription>
        <detaileddescription>
<para>This requires a call to PDI_transaction_end to close the transaction.</para>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>the transaction part of the API is deprecated, the PDI_multi_expose function should be used instead.</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref> the function used to expose data inside the transaction </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__hl__annotation_1gac11c4c2885e34660a40f789f049d3d34" kindref="member">PDI_transaction_end</ref> the function used to end the transaction</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the transaction (an event thus named will be triggered when all data become available) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="296" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="296" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__hl__annotation_1gac11c4c2885e34660a40f789f049d3d34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PDI_status_t</type>
        <definition>PDI_status_t PDI_transaction_end</definition>
        <argsstring>(void)</argsstring>
        <name>PDI_transaction_end</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Ends the previously opened transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>the transaction part of the API is deprecated, the PDI_multi_expose function should be used instead.</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__hl__annotation_1ga39bceccdb0528be91cc79df784a161bc" kindref="member">PDI_transaction_begin</ref> the function used to start the transaction </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref> the function used to expose data inside the transaction</para>
</simplesect>
<simplesect kind="return"><para>an error status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" line="308" column="15" declfile="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi.h" declline="308" declcolumn="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The high-level annotation API offers a higher level of interface for the same features as the <ref refid="group__annotation" kindref="compound">Code annotation</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Concepts" kind="page">
    <compoundname>Concepts</compoundname>
    <title>Core Concepts</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="Concepts_1pdi_philosophy">
<title>Philosophy of PDI</title>
<para>Similarly to aspect-oriented programming, <ref refid="namespacePDI" kindref="compound">PDI</ref> distinguishes between core concerns and cross-cutting concerns.</para>
<para>Core concerns are the aspects of the code that fulfill its main goal. We consider as core concerns of a simulation code the aspects handled in the main loop that generate elements needed as input of the next iteration of the loop.</para>
<para>Cross-cutting concerns are the aspect of the code that are not core concerns. We consider as cross-cutting concerns of a simulation code:</para>
<para>the aspects handled before the simulation main loop such as parameters reading, data initialization, etc, the aspects handled after the simulation main loop, such as result post-processing, storage to disk, visualization, etc, the aspects handled during the simulation main loop, but whose execution is not required for the next iteration of the loop, such as fault tolerance, logging, etc. The simulation could run with none of the cross-cutting concerns implemented (even if this would be completely useless with no result ever saved). The deactivation of a core concern on the other hand would lead to a failure of the simulation.</para>
<para><ref refid="namespacePDI" kindref="compound">PDI</ref> supports calling libraries from the specification tree instead of from the code. This is well suited for cross-cutting concerns but means that the code has no control over what and how these aspects are handled which does not fit the needs of core concerns.</para>
</sect1>
<sect1 id="Concepts_1PDI_description">
<title>PDI description</title>
<para>PDI offers to exchange data between the application code and various external data handlers, such as for example the file-system for I/O or another code for code-coupling.</para>
<para>Before using PDI, it is however a good idea to understand the three core concepts that make this possible.</para>
<para>Each data exchange is a two-step process. The PDI-enabled application makes its data available through the <ref refid="Concepts_1Data_store" kindref="member">data store</ref>. The <ref refid="Concepts_1Event_subsystem" kindref="member">event subsystem</ref> then notifies interested external data handlers about this change in the store. Once notified, each data handler (implemented as a plugin) can look in the store and use the data accessible from there.</para>
<para>The orchestration of these exchanges, the description of what data can be put in the store, what each handler should do with it, etc. is described in the <ref refid="Concepts_1Specification_tree" kindref="member">specification tree</ref>.</para>
<para><image type="html" name="PDI_schema.jpg">PDI structure schema</image>
</para>
</sect1>
<sect1 id="Concepts_1Data_store">
<title>Data store</title>
<para>The data store is the mechanism offered by PDI to handle <emphasis>data transfer</emphasis> between the application code and external data handlers. Data transfer is the action of making data available to another part of the code. For example, in a function call the list of parameters determines data transfer.</para>
<para>PDI data store is somewhat similar to a file-system or a document store with some specific properties:<itemizedlist>
<listitem><para>unlike in traditional file-systems, data stored in PDI store is typed, one can differentiate between a record with named members and an array for example;</para>
</listitem><listitem><para>each process contains a distinct instance of the store, inter-process communications might be offered by data handlers accessing objects in the store and exchanging them between process boundaries, but not by PDI itself;</para>
</listitem><listitem><para>storing an object in PDI store is cheap as it does not triggers any copy, instead the store holds a reference to the exact same object in memory as that manipulated by the code;</para>
</listitem><listitem><para>to prevent invalid concurrent accesses to the objects, the stores offers a mutual exclusion mechanism where only one handler can access the object for write but concurrent read access is possible.</para>
</listitem></itemizedlist>
</para>
<para>This approach makes it possible to exchange data between very weakly coupled code modules. Each module can add or access objects in the store and does not need to know which other module created it or how.</para>
<para>In summary, the store hold a set of object references, each identified by a name and that contains:<itemizedlist>
<listitem><para>the address of the buffer storing the data (a pointer),</para>
</listitem><listitem><para>the description of the type of the data (memory layout and interpretation),</para>
</listitem><listitem><para>a RW-lock to ensure exclusive access.</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="Concepts_1Event_subsystem">
<title>Event subsystem</title>
<para>While the <ref refid="Concepts_1Data_store" kindref="member">data store</ref> handles data transfer between the application code and external data handlers, the event subsystem handles <emphasis>control</emphasis> transfer. Control transfer is the action of passing the CPU control to another part of the code. For example, calling a function is a way to transfer control, creating a thread is another way.</para>
<para>The event subsystem makes it possible to observe the store and to be notified when it is accessed; thus complementing the store with a way for data handler to implement their expected behavior. Notifications are emitted when:<itemizedlist>
<listitem><para>a reference becomes available in the store,</para>
</listitem><listitem><para>a reference ceases to be available in the store,</para>
</listitem><listitem><para>someone accesses a reference that is not in the store,</para>
</listitem><listitem><para>a <ref refid="group__annotation_1gab21d59fd8d6532f6b8d7a4ac69a2388b" kindref="member">named event</ref> is emitted.</para>
</listitem></itemizedlist>
</para>
<para>To ensure minimal overhead, the PDI event subsystem is synchronous by default (like a function call). Plugins can implement other behaviors on top of that. For example, a plugin could create a thread for asynchronous execution.</para>
<para>This approach makes it possible to exchange data between very weakly coupled code modules. Each module can execute specific code when the required data becomes available and does not need to know which other module created it or how.</para>
</sect1>
<sect1 id="Concepts_1Specification_tree">
<title>Specification tree</title>
<para>The combination of data transfer offered by the <ref refid="Concepts_1Data_store" kindref="member">data store</ref> and control transfer offered by the <ref refid="Concepts_1Event_subsystem" kindref="member">event subsystem</ref> offers the basis for weak coupling of multiple independent modules. The specification tree builds on this basis and orchestrates the interaction between the multiple modules used in an execution.</para>
<para>The specification tree is specified in a file written in the <ulink url="https://en.wikipedia.org/wiki/YAML">YAML</ulink> format and provided to PDI at <ref refid="group__init__final_1ga3dc660be40c93c169337e3d2692b2ed0" kindref="member">initialization</ref>. This makes it possible to change the list of modules to load and their interactions without having to recompile any code.</para>
<para>The specification tree structure is described in details in its <ref refid="Specification_tree_ref" kindref="compound">reference documentation</ref>. It contains two main subparts:<itemizedlist>
<listitem><para>the data types description,</para>
</listitem><listitem><para>the plugin list configuration.</para>
</listitem></itemizedlist>
</para>
<para>The data types description defines the type of data expected in the store. This is most useful for non-reflexive statically typed languages (C, C++, Fortran) for which this information can not be automatically extracted at execution. The types can be expressed in function of the value of other data through <computeroutput>$-expressions</computeroutput>. For example, a given object might be described as an array of <computeroutput>N</computeroutput> <computeroutput>doubles</computeroutput> where <computeroutput>N</computeroutput> is an integer available elsewhere in the store.</para>
<para>The plugin list configuration defines the list of plugins to load and a configuration for each of them. Each plugin can accept a different way of specifying the configuration, but in any case, this is where the orchestration of interactions is specified. The <ref refid="user_code_plugin" kindref="compound">user-code plugin</ref> is somewhat specific in that instead of providing a service itself, it enables the application to react to events and implement specific code handle data from the store.</para>
</sect1>
<sect1 id="Concepts_1Conclusion">
<title>Conclusion</title>
<para>To summarize, interactions between weakly coupled modules in PDI go through the <ref refid="Concepts_1Data_store" kindref="member">data store</ref> that acts somewhat like a file-system. One can share data buffers in this store to make them available to other modules. When a buffer becomes available in the store, the <ref refid="Concepts_1Event_subsystem" kindref="member">event subsystem</ref> notifies interested modules so that they can use the data. The plugins loaded and configured through the <ref refid="Concepts_1Specification_tree" kindref="member">specification tree</ref> offer various reusable services through that mechanism such as data write to disk, fault tolerance, code coupling, etc. </para>
</sect1>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="First_steps" kind="page">
    <compoundname>First_steps</compoundname>
    <title>First steps with PDI</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="First_steps_1Yaml">
<title>Yaml language</title>
<para>Yaml is used to create the specification tree of PDI. There are 3 basic values in yaml:<orderedlist>
<listitem><para>Scalar - is a single value.</para>
</listitem><listitem><para>List - is an array of values.</para>
</listitem><listitem><para>Map - consist of mulitple keys and values.</para>
</listitem></orderedlist>
</para>
<para>Indentation level indicates the level in the tree.</para>
<para>Here is an example: <programlisting filename=".yaml"><codeline><highlight class="normal">tree_1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>array_1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>scalar_1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>scalar_2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>array_2:<sp/>[1,<sp/>2,<sp/>3]</highlight></codeline>
<codeline><highlight class="normal">tree_2:<sp/>{subtree_1:<sp/>scalar_1,<sp/>subtree_2:<sp/>scalar_2}</highlight></codeline>
</programlisting></para>
<para><image type="html" name="yaml_example.jpg">Visualization of the yaml tree.</image>
</para>
<para>The blue nodes are map values, yellow are lists and pink are scalars. As can be seen, the list and map can be defined in both ways (in one line and multiple lines).</para>
<para>The PDI_init function gets as parameter a tree with <computeroutput>logging</computeroutput>, <computeroutput>data</computeroutput>, <computeroutput>metadata</computeroutput> and <computeroutput>plugins</computeroutput> maps defined in its root. User can define its own values in yaml and pass to PDI only the subtree:</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">duration:<sp/>0.75</highlight></codeline>
<codeline><highlight class="normal">size:<sp/>[64,<sp/>64]</highlight></codeline>
<codeline><highlight class="normal">parallelism:<sp/>{<sp/>height:<sp/>4,<sp/>width:<sp/>4<sp/>}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">#<sp/>only<sp/>the<sp/>following<sp/>config<sp/>will<sp/>be<sp/>passed<sp/>to<sp/>PDI</highlight></codeline>
<codeline><highlight class="normal">pdi_subtree:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>iteration:<sp/><sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>main_field:<sp/>double</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>decl_hdf5:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".c"><codeline><highlight class="normal">PC_tree_t<sp/>root<sp/>=<sp/>PC_parse_path(</highlight><highlight class="stringliteral">"example.yaml"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__init__final_1ga3dc660be40c93c169337e3d2692b2ed0" kindref="member">PDI_init</ref>(PC_get(root,<sp/></highlight><highlight class="stringliteral">"pdi_subtree"</highlight><highlight class="normal">));</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="First_steps_1fs_hello_event">
<title>Hello Event</title>
<para>As mentioned in <ref refid="Concepts_1Specification_tree" kindref="member">Specification tree</ref> we have to provide specification tree to instruct PDI what data we will share and what to do with it. We want to show what happens on each PDI API call. We will use <ref refid="trace_plugin" kindref="compound">Trace plugin</ref>, which is very simple plugin that just prints every information it gets. Let's create a specification tree named <computeroutput>hello_event.yml</computeroutput> that will load trace plugin: <programlisting filename=".yaml"><codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>trace:<sp/>~</highlight></codeline>
</programlisting></para>
<para>Yes, that is whole specification tree. Trace plugin prints everything, so there is no need to specify what we want it to do.</para>
<para>We need to write a source code of our application: <programlisting filename=".C"><codeline><highlight class="preprocessor">#include<sp/>&lt;pdi.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga3dc660be40c93c169337e3d2692b2ed0" kindref="member">PDI_init</ref>(PC_parse_path(</highlight><highlight class="stringliteral">"hello_event.yml"</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1gab21d59fd8d6532f6b8d7a4ac69a2388b" kindref="member">PDI_event</ref>(</highlight><highlight class="stringliteral">"Hello<sp/>World<sp/>Event"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga7995fbda2099950ed4ffc7fd4c0bb969" kindref="member">PDI_finalize</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Let's analyze what happens in each line. Firstly we have <ref refid="group__init__final_1ga3dc660be40c93c169337e3d2692b2ed0" kindref="member">PDI_init()</ref> function which take parameter of type <computeroutput>PC_tree_t</computeroutput>. It's a tree structure parsed from some YAML file, in our case we parse it with <computeroutput>paraconf</computeroutput> library build in PDI. To parse a file we need to call <computeroutput>PC_parse_path</computeroutput> function passing file path as argument. The next step is to call an event in PDI named "Hello World Event". At the end we have to call <ref refid="group__init__final_1ga7995fbda2099950ed4ffc7fd4c0bb969" kindref="member">PDI_finalize()</ref>. The output from this program is presented below: <programlisting><codeline><highlight class="normal">[PDI][Trace-plugin][10:25:28]<sp/>***<sp/>info:<sp/>Welcome!</highlight></codeline>
<codeline><highlight class="normal">[PDI][10:25:28]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][10:25:28]<sp/>***<sp/>info:<sp/>!!!<sp/>named<sp/>event:<sp/>Hello<sp/>World<sp/>Event</highlight></codeline>
<codeline><highlight class="normal">[PDI][10:25:28]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][10:25:28]<sp/>***<sp/>info:<sp/>Goodbye!</highlight></codeline>
</programlisting></para>
<para>The first line indicates that plugin has loaded successfully. The second is PDI message, that tells it managed to create all descriptors and load all defined plugins. Then we have message from loaded trace plugin which printed the event name it has received. The next information is from PDI and indicates that finalization has started and now it will deallocate resources. Last message is from trace plugin destructor.</para>
<sect2 id="First_steps_1fs_hello_data">
<title>Hello Data</title>
<para>In <ref refid="First_steps_1fs_hello_event" kindref="member">Hello Event</ref> we learned how to call an event. In this chapter we will see how to share and reclaim data.</para>
<para>Firstly we have to create a specification tree named <computeroutput>hello_data.yml</computeroutput> with <computeroutput>data</computeroutput> and trace plugin tree declared:</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>world:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>trace:<sp/>~</highlight></codeline>
</programlisting></para>
<para>We have declared trace plugin and one descriptor named <computeroutput>world</computeroutput> of integer type. Now let's write our program:</para>
<para><programlisting filename=".C"><codeline><highlight class="preprocessor">#include<sp/>&lt;pdi.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga3dc660be40c93c169337e3d2692b2ed0" kindref="member">PDI_init</ref>(PC_parse_path(</highlight><highlight class="stringliteral">"hello_data.yml"</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>my_world<sp/>=<sp/>42;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1ga34e34cede8627c47c07e6ede997e37fe" kindref="member">PDI_share</ref>(</highlight><highlight class="stringliteral">"world"</highlight><highlight class="normal">,<sp/>&amp;my_world,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//variable<sp/>my_world<sp/>is<sp/>shared<sp/>with<sp/>PDI</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1gabf58b7c146cbf7e3341245f60cec0f7e" kindref="member">PDI_reclaim</ref>(</highlight><highlight class="stringliteral">"world"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//variable<sp/>my_world<sp/>is<sp/>no<sp/>longer<sp/>shared<sp/>with<sp/>PDI</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga7995fbda2099950ed4ffc7fd4c0bb969" kindref="member">PDI_finalize</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Let's analyze new functions:<itemizedlist>
<listitem><para><computeroutput>PDI_share</computeroutput> shares access to the variable with PDI. The first argument is a descriptor name and indicates what data we are sharing. The second one is pointer to our variable and the last one is access direction. <computeroutput>PDI_OUT</computeroutput> means data direction from application to PDI, <computeroutput>PDI_IN</computeroutput> is a direction from PDI to the program, <computeroutput>PDI_INOUT</computeroutput> includes both directions.</para>
</listitem><listitem><para><computeroutput>PDI_reclaim</computeroutput> reclaims the share which means that PDI will no longer have access to shared variable. As an argument it takes name of the descriptor.</para>
</listitem></itemizedlist>
</para>
<para>The output from our application: <programlisting><codeline><highlight class="normal">[PDI][Trace-plugin][10:59:35]<sp/>***<sp/>info:<sp/>Welcome!</highlight></codeline>
<codeline><highlight class="normal">[PDI][10:59:35]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][10:59:35]<sp/>***<sp/>info:<sp/>=&gt;&gt;<sp/><sp/><sp/>data<sp/>becoming<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>world</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][10:59:35]<sp/>***<sp/>info:<sp/>&lt;&lt;=<sp/>data<sp/>stop<sp/>being<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>world</highlight></codeline>
<codeline><highlight class="normal">[PDI][10:59:35]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][10:59:35]<sp/>***<sp/>info:<sp/>Goodbye!</highlight></codeline>
</programlisting></para>
<para>As we can see from the logs above, when we called <computeroutput>PDI_share</computeroutput> plugin gained access to the shared variable and after <computeroutput>PDI_reclaim</computeroutput> the variable has become no longer available for the plugin. The share notification gives plugin possibility to operate on data dependently what has been declared in specification tree.</para>
<para>The same exact result we can achieve with <computeroutput>PDI_expose</computeroutput> which is just <computeroutput>PDI_share</computeroutput> call and right after <computeroutput>PDI_reclaim</computeroutput> is called.</para>
<para><programlisting filename=".c"><codeline><highlight class="normal"><ref refid="group__annotation_1ga34e34cede8627c47c07e6ede997e37fe" kindref="member">PDI_share</ref>(</highlight><highlight class="stringliteral">"world"</highlight><highlight class="normal">,<sp/>&amp;my_world,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__annotation_1gabf58b7c146cbf7e3341245f60cec0f7e" kindref="member">PDI_reclaim</ref>(</highlight><highlight class="stringliteral">"world"</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>is the same as: <programlisting filename=".c"><codeline><highlight class="normal"><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"world"</highlight><highlight class="normal">,<sp/>&amp;my_world,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="First_steps_1fs_access">
<title>Hello Access</title>
<para>Now we will try to access a descriptor we share with PDI. In this case we won't need any plugin. We want to define string in our <computeroutput>world_access.yml</computeroutput>: <programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_message:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>32}</highlight></codeline>
</programlisting></para>
<para>Now let's write some simple program:</para>
<para><programlisting filename=".C"><codeline><highlight class="preprocessor">#include<sp/>&lt;pdi.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_secret_msg()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1ga8dcd0c81d7697ea473a55bd57efb717d" kindref="member">PDI_access</ref>(</highlight><highlight class="stringliteral">"my_message"</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;message,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a70fa3cd94e02b997794d9eaaea34b0b6" kindref="member">PDI_IN</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">"%s\n"</highlight><highlight class="normal">,<sp/>message);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1ga001117ae897dd4e4a25c312b5d00c43a" kindref="member">PDI_release</ref>(</highlight><highlight class="stringliteral">"my_message"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga3dc660be40c93c169337e3d2692b2ed0" kindref="member">PDI_init</ref>(PC_parse_path(</highlight><highlight class="stringliteral">"world_access.yml"</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>secret_msg<sp/>=<sp/></highlight><highlight class="stringliteral">"Watermelon<sp/>is<sp/>the<sp/>tastiest<sp/>fruit"</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1ga34e34cede8627c47c07e6ede997e37fe" kindref="member">PDI_share</ref>(</highlight><highlight class="stringliteral">"my_message"</highlight><highlight class="normal">,<sp/>secret_msg,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>print_secret_msg();</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1gabf58b7c146cbf7e3341245f60cec0f7e" kindref="member">PDI_reclaim</ref>(</highlight><highlight class="stringliteral">"my_message"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga7995fbda2099950ed4ffc7fd4c0bb969" kindref="member">PDI_finalize</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>We will focus on <computeroutput>print_secret_msg</computeroutput> function. If you don't understand what happens in <computeroutput>main</computeroutput> function, please see <ref refid="First_steps_1fs_hello_data" kindref="member">Hello Data</ref> example. <computeroutput>PDI_access</computeroutput> sets our pointer to the data location. We need to pass <computeroutput>PDI_IN</computeroutput> because data flows from PDI to our application. We also want to use <computeroutput>PDI_release</computeroutput>, because <computeroutput>PDI_reclaim</computeroutput> would end the sharing status of this descriptor and we reclaim this data later in <computeroutput>main</computeroutput> function. Output from the program:</para>
<para><programlisting><codeline><highlight class="normal">[PDI][13:42:31]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">Watermelon<sp/>is<sp/>the<sp/>tastiest<sp/>fruit</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:42:31]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
</programlisting></para>
<para>As you can see, we manage to access data descriptor from function only by passing its name and correct direction access.</para>
</sect2>
<sect2 id="First_steps_1fs_multiexpose">
<title>Hello multi expose</title>
<para>In some cases we would want to expose many descriptors at once. For this we have multi expose which shares all the given descriptors, then call given event and then reclaim all passed data. Let's look at the example.</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_int:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_float:<sp/>float</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_string:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>32}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugin:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>trace:<sp/>~</highlight></codeline>
</programlisting></para>
<para>We have defined 3 descriptors and trace plugin. Now it's time for our application: <programlisting filename=".C"><codeline><highlight class="preprocessor">#include<sp/>&lt;pdi.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga3dc660be40c93c169337e3d2692b2ed0" kindref="member">PDI_init</ref>(PC_parse_path(</highlight><highlight class="stringliteral">"hello_multi_expose.yml"</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>z<sp/>=<sp/></highlight><highlight class="stringliteral">"RGB<sp/>=<sp/>Really<sp/>Gawky<sp/>Biscuit"</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__hl__annotation_1gae5c670b378e423e3083122f62c1f0a59" kindref="member">PDI_multi_expose</ref>(</highlight><highlight class="stringliteral">"event_between"</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">"my_int"</highlight><highlight class="normal">,<sp/>&amp;x,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">"my_float"</highlight><highlight class="normal">,<sp/>&amp;y,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">"my_string"</highlight><highlight class="normal">,<sp/>&amp;z,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga7995fbda2099950ed4ffc7fd4c0bb969" kindref="member">PDI_finalize</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>First argument of the <computeroutput>PDI_multi_expose</computeroutput> is the event name we want to call when all the descriptors are shared. After this we pass in loop:</para>
<para><itemizedlist>
<listitem><para>name of the descriptor</para>
</listitem><listitem><para>pointer to the data</para>
</listitem><listitem><para>direction access As the last argument we have to pass <computeroutput>NULL</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para>The output of the execution:</para>
<para><programlisting><codeline><highlight class="normal">[PDI][Trace-plugin][14:14:51]<sp/>***<sp/>info:<sp/>Welcome!</highlight></codeline>
<codeline><highlight class="normal">[PDI][14:14:51]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][14:14:51]<sp/>***<sp/>info:<sp/>=&gt;&gt;<sp/><sp/><sp/>data<sp/>becoming<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>my_int</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][14:14:51]<sp/>***<sp/>info:<sp/>=&gt;&gt;<sp/><sp/><sp/>data<sp/>becoming<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>my_float</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][14:14:51]<sp/>***<sp/>info:<sp/>=&gt;&gt;<sp/><sp/><sp/>data<sp/>becoming<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>my_string</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][14:14:51]<sp/>***<sp/>info:<sp/>!!!<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>event:<sp/>event_between</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][14:14:51]<sp/>***<sp/>info:<sp/>&lt;&lt;=<sp/>data<sp/>stop<sp/>being<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>my_string</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][14:14:51]<sp/>***<sp/>info:<sp/>&lt;&lt;=<sp/>data<sp/>stop<sp/>being<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>my_float</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][14:14:51]<sp/>***<sp/>info:<sp/>&lt;&lt;=<sp/>data<sp/>stop<sp/>being<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>my_int</highlight></codeline>
<codeline><highlight class="normal">[PDI][14:14:51]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
<codeline><highlight class="normal">[PDI][Trace-plugin][14:14:51]<sp/>***<sp/>info:<sp/>Goodbye!</highlight></codeline>
</programlisting></para>
<para>The logs from trace plugin confirm the execution order we were expecting. </para>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="how_to_create_plugin" kind="page">
    <compoundname>how_to_create_plugin</compoundname>
    <title>How to create a plugin</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="how_to_create_plugin_1plugin_class">
<title>Plugin class</title>
<para>Plugin is a class, that handles shared data and triggered events to perform an I/O operations. It is dynamically linked to the user program by <ref refid="namespacePDI" kindref="compound">PDI</ref>. Behavior of each plugin is defined by specification tree in plugins subtree.</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>example:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
</programlisting></para>
<para>The given example will load example plugin and pass its subtree to the plugin's constructor.</para>
<para>The plugin has to inherit from <ref refid="classPDI_1_1Plugin" kindref="compound">PDI::Plugin</ref> and have a constructor with arguments <ref refid="classPDI_1_1Context" kindref="compound">PDI::Context</ref>&amp; and PC_tree_t.</para>
<sect2 id="how_to_create_plugin_1example_plugin">
<title>Example plugin</title>
<para>Example of the simplest plugin, that does nothing:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;pdi/context.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/paraconf_wrapper.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/plugin.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keyword">struct<sp/></highlight><highlight class="normal">example_plugin<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Plugin" kindref="compound">PDI::Plugin</ref></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>example_plugin(<ref refid="classPDI_1_1Context" kindref="compound">PDI::Context</ref>&amp;<sp/>ctx,<sp/>PC_tree_t<sp/>spec_tree):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Plugin{ctx}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">PDI_PLUGIN(example)</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="how_to_create_plugin_1adding_callback">
<title>Adding a callback</title>
<para><ref refid="classPDI_1_1Context" kindref="compound">PDI::Context</ref> has a container with all the functions (callbacks) that are called when user is sharing the data (calls PDI_share). To add a new function to this container the plugin must call add_data_callback.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">std::function&lt;void()&gt;<sp/>add_data_callback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;,<sp/>Ref)&gt;&amp;<sp/>callback,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name<sp/>=<sp/>{}))</highlight></codeline>
</programlisting></para>
<para>The first argument is the function to be called when user shares the data. If the second parameter (name) is given, the function will be called only on a specified data name. Returns a function that removes the callback from <ref refid="classPDI_1_1Context" kindref="compound">PDI::Context</ref> container.</para>
<para>Example of adding new callback: <programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;pdi/context.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/paraconf_wrapper.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/plugin.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/ref_any.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keyword">struct<sp/></highlight><highlight class="normal">example_plugin<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Plugin" kindref="compound">PDI::Plugin</ref></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>example_plugin(<ref refid="classPDI_1_1Context" kindref="compound">PDI::Context</ref>&amp;<sp/>ctx,<sp/>PC_tree_t<sp/>spec_tree):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Plugin{ctx}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.<ref refid="classPDI_1_1Context_1ac665503fccb2a848e7e85d5b2aa49ed5" kindref="member">add_data_callback</ref>([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>data_name,<sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">PDI::Ref</ref><sp/>ref){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">"User<sp/>has<sp/>shared<sp/>a<sp/>data<sp/>named<sp/>"</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>data_name<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">PDI_PLUGIN(example)</highlight></codeline>
</programlisting></para>
<para>If user create specification tree: <programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>some_integer:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>example:<sp/>~</highlight></codeline>
</programlisting></para>
<para>And a program: <programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;pdi.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga3dc660be40c93c169337e3d2692b2ed0" kindref="member">PDI_init</ref>(PC_parse_path(</highlight><highlight class="stringliteral">"spec_tree.yaml"</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>some_integer<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"some_integer"</highlight><highlight class="normal">,<sp/>&amp;some_integer,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga7995fbda2099950ed4ffc7fd4c0bb969" kindref="member">PDI_finalize</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The console will display: <programlisting><codeline><highlight class="normal">[PDI][13:42:41]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">User<sp/>has<sp/>shared<sp/>a<sp/>data<sp/>named<sp/>some_integer</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:42:42]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="how_to_create_plugin_1rw_data">
<title>Reading and writing data</title>
<para>Example of reading and writing data: <programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;pdi/context.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/paraconf_wrapper.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/plugin.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/ref_any.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keyword">struct<sp/></highlight><highlight class="normal">example_plugin<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Plugin" kindref="compound">PDI::Plugin</ref></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>example_plugin(<ref refid="classPDI_1_1Context" kindref="compound">PDI::Context</ref>&amp;<sp/>ctx,<sp/>PC_tree_t<sp/>spec_tree):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Plugin{ctx}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.<ref refid="classPDI_1_1Context_1ac665503fccb2a848e7e85d5b2aa49ed5" kindref="member">add_data_callback</ref>([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>data_name,<sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">PDI::Ref</ref><sp/>ref){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classPDI_1_1Ref__any" kindref="compound">PDI::Ref_rw</ref><sp/>ref_rw{ref})<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Plugin<sp/>can<sp/>read<sp/>and<sp/>write</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>some_integer<sp/>=<sp/>ref_rw.get();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classPDI_1_1Ref__any" kindref="compound">PDI::Ref_r</ref><sp/>ref_r{ref})<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Plugin<sp/>can<sp/>read</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>some_integer<sp/>=<sp/>ref_r.get();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classPDI_1_1Ref__any" kindref="compound">PDI::Ref_w</ref><sp/>ref_w{ref})<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Plugin<sp/>can<sp/>write</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>some_integer<sp/>=<sp/>ref_w.get();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Plugin<sp/>cannot<sp/>read<sp/>nor<sp/>write</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">PDI_PLUGIN(example)</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="how_to_create_plugin_1example_events">
<title>Handling events</title>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;pdi/context.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/paraconf_wrapper.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/plugin.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/ref_any.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keyword">struct<sp/></highlight><highlight class="normal">example_plugin<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Plugin" kindref="compound">PDI::Plugin</ref></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>example_plugin(<ref refid="classPDI_1_1Context" kindref="compound">PDI::Context</ref>&amp;<sp/>ctx,<sp/>PC_tree_t<sp/>spec_tree):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Plugin{ctx}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.<ref refid="classPDI_1_1Context_1a8aad7d27ce647a616bee1c911e274154" kindref="member">add_event_callback</ref>([</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>event_name){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;handle_event(event_name);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.add_event_callback([</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>event_name){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;handle_special_event(event_name);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/></highlight><highlight class="stringliteral">"special_event"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"/><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_event(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>event_name)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">"Event"</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>event_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">"called."</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_special_event(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>event_name)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">"Special<sp/>event<sp/>`"</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>event_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">"'<sp/>called."</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">PDI_PLUGIN(example)</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="how_to_create_plugin_1reading_pc_tree">
<title>Reading scalar and array from specification tree</title>
<para>Specification tree: <programlisting filename=".yaml"><codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>example:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scalar:<sp/>some_string</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>array:<sp/>[0,<sp/>1,<sp/>2]</highlight></codeline>
</programlisting></para>
<para>Reading a scalar and an array: <programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;pdi/context.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/paraconf_wrapper.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/plugin.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/ref_any.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keyword">struct<sp/></highlight><highlight class="normal">example_plugin<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Plugin" kindref="compound">PDI::Plugin</ref></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>example_plugin(<ref refid="classPDI_1_1Context" kindref="compound">PDI::Context</ref>&amp;<sp/>ctx,<sp/>PC_tree_t<sp/>spec_tree):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Plugin{ctx}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//scalar</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PC_tree_t<sp/>scalar_tree<sp/>=<sp/>PC_get(spec_tree,<sp/></highlight><highlight class="stringliteral">".scalar"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>string_scalar<sp/>=<sp/><ref refid="namespacePDI_1ae1a842c5cdb57b5185c035de9a99c3c8" kindref="member">PDI::to_string</ref>(scalar_tree);</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//array</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PC_tree_t<sp/>array_tree<sp/>=<sp/>PC_get(spec_tree,<sp/></highlight><highlight class="stringliteral">".array"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>array_size<sp/>=<sp/><ref refid="namespacePDI_1a00f2173a7fb0dc37655e9e39756e135e" kindref="member">PDI::len</ref>(array_tree);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;long&gt;<sp/>array;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>array_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PC_tree_t<sp/>array_element<sp/>=<sp/>PC_get(array_tree,<sp/></highlight><highlight class="stringliteral">"[%d]"</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array.emplace_back(<ref refid="namespacePDI_1ac4e2b53893618edfb9bff90c65c4ee01" kindref="member">PDI::to_long</ref>(array_element));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">PDI_PLUGIN(example)</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="how_to_create_plugin_1reading_pc_tree_2">
<title>Reading maps from specification tree</title>
<para>Specification tree: <programlisting filename=".yaml"><codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>example:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>custom_subtree:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can:<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be:<sp/>2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>any:<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtree:<sp/>4</highlight></codeline>
</programlisting></para>
<para>Reading a scalar and an array: <programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/context.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/paraconf_wrapper.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/plugin.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi/ref_any.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keyword">struct<sp/></highlight><highlight class="normal">example_plugin<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Plugin" kindref="compound">PDI::Plugin</ref></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>example_plugin(<ref refid="classPDI_1_1Context" kindref="compound">PDI::Context</ref>&amp;<sp/>ctx,<sp/>PC_tree_t<sp/>spec_tree):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Plugin{ctx}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PC_tree_t<sp/>subtree<sp/>=<sp/>PC_get(spec_tree,<sp/></highlight><highlight class="stringliteral">".custom_subtree"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subtree_size<sp/>=<sp/><ref refid="namespacePDI_1a00f2173a7fb0dc37655e9e39756e135e" kindref="member">PDI::len</ref>(subtree);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;std::string,<sp/>long&gt;<sp/>custom_map;</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>subtree_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PC_tree_t<sp/>key<sp/>=<sp/>PC_get(subtree,<sp/></highlight><highlight class="stringliteral">"{%d}"</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PC_tree_t<sp/>value<sp/>=<sp/>PC_get(subtree,<sp/></highlight><highlight class="stringliteral">"&lt;%d&gt;"</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>custom_map.emplace_back(<ref refid="namespacePDI_1ae1a842c5cdb57b5185c035de9a99c3c8" kindref="member">PDI::to_string</ref>(key),<sp/><ref refid="namespacePDI_1ac4e2b53893618edfb9bff90c65c4ee01" kindref="member">PDI::to_long</ref>(value));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">PDI_PLUGIN(example)</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="how_to_create_plugin_1create_true_plugin">
<title>Creating a true plugin: POSIX plugin</title>
<sect2 id="how_to_create_plugin_1step_1">
<title>Step 1: Think what your plugin will be for.</title>
<para>Simple checkpointing. Each data will be saved in separate file. User can check the status of all files at once and then recover the data.</para>
</sect2>
<sect2 id="how_to_create_plugin_1step_2">
<title>Step 2: Prepare your specification tree schema.</title>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>some_data:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>64}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>can_recover_data:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>posix:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>some_data:<sp/>/file_path/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>can_recover_all:<sp/>can_recover_data</highlight></codeline>
</programlisting></para>
<para>/file_path/ is a path where to save and load from some_data. can_recover_data is a flag that indicates if the recover is possible.</para>
<para>The fastest way to learn is by examples. To show how to create a plugin, we will create "posix plugin". It won't do anything special, but give you a basic knowledge how to create one.</para>
</sect2>
<sect2 id="how_to_create_plugin_1step_3">
<title>Step 3: Write your plugin.</title>
<para>Members and constructor: <programlisting filename=".cpp"><codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">posix_plugin<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Plugin" kindref="compound">PDI::Plugin</ref></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>m_can_recover_data;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;std::string,<sp/>std::string&gt;<sp/>m_data_to_path_map;</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>posix_plugin(<ref refid="classPDI_1_1Context" kindref="compound">PDI::Context</ref>&amp;<sp/>ctx,<sp/>PC_tree_t<sp/>spec_tree):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Plugin{ctx}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">PDI_PLUGIN(posix)</highlight></codeline>
</programlisting></para>
<para>Read recover tree: <programlisting filename=".cpp"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>read_recover_tree(PC_tree_t<sp/>spec_tree)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PC_tree_t<sp/>recover_tree<sp/>=<sp/>PC_get(spec_tree,<sp/></highlight><highlight class="stringliteral">".can_recover_all"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!PC_status(recover_tree))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_can_recover_data<sp/>=<sp/><ref refid="namespacePDI_1ae1a842c5cdb57b5185c035de9a99c3c8" kindref="member">PDI::to_string</ref>(recover_tree);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Read data tree: <programlisting filename=".cpp"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>read_data_tree(PC_tree_t<sp/>spec_tree)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PC_tree_t<sp/>data_tree<sp/>=<sp/>PC_get(spec_tree,<sp/></highlight><highlight class="stringliteral">".data"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PC_status(data_tree))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_tree_size<sp/>=<sp/><ref refid="namespacePDI_1a00f2173a7fb0dc37655e9e39756e135e" kindref="member">PDI::len</ref>(data_tree);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>data_tree_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PC_tree_t<sp/>key<sp/>=<sp/>PC_get(data_tree,<sp/></highlight><highlight class="stringliteral">"{%d}"</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PC_tree_t<sp/>value<sp/>=<sp/>PC_get(data_tree,<sp/></highlight><highlight class="stringliteral">"&lt;%d&gt;"</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_data_to_path_map.emplace_back(<ref refid="namespacePDI_1ae1a842c5cdb57b5185c035de9a99c3c8" kindref="member">PDI::to_string</ref>(key),<sp/><ref refid="namespacePDI_1ae1a842c5cdb57b5185c035de9a99c3c8" kindref="member">PDI::to_string</ref>(value));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Create a function that writes data to temporary file and check if file was created, size is correct and then replace old file: <programlisting filename=".cpp"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_data(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>data_name,<sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">PDI::Ref_r</ref><sp/>ref_r)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ref_r)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>tmp_path<sp/>=<sp/>m_data_to_path_map[data_name]<sp/>+<sp/></highlight><highlight class="stringliteral">".tmp"</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>file{tmp_path,<sp/>std::ios::binary};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ref_r.type().buffersize()<sp/>==<sp/>ref_r.type().datasize())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//dense<sp/>data</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.write((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)ref_r.<ref refid="classPDI_1_1Ref__any_1ad8d6851233a405e0e1c27d2e762c6cb9" kindref="member">get</ref>(),<sp/>ref_r.type().buffersize());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//sparse<sp/>data</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;char&gt;<sp/>data_copy<sp/>{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[ref_r.type().dataSize()]};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_r.type().data_to_dense_copy(data_copy.get(),<sp/>ref_r.<ref refid="classPDI_1_1Ref__any_1ad8d6851233a405e0e1c27d2e762c6cb9" kindref="member">get</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.write(data_copy.get(),<sp/>ref_r.type().datasize());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>file.close();</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//replace<sp/>old<sp/>file</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>status;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stat(tmp_path.c_str(),<sp/>&amp;status)<sp/>&amp;&amp;<sp/>status.st_size<sp/>==<sp/>ref_r.type().datasize())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stat(m_data_to_path_map[data_name].c_str())<sp/>&amp;&amp;<sp/>std::remove(m_data_to_path_map[data_name].c_str()))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Error" kindref="compound">PDI::Error</ref><sp/>{<ref refid="group__error_1gga85517a933cd17af89b7b921c6671ff54a9b282d8284fbacc7a4fd81e81964260b" kindref="member">PDI_ERR_SYSTEM</ref>,<sp/></highlight><highlight class="stringliteral">"Cannot<sp/>remove<sp/>old<sp/>file<sp/>{}"</highlight><highlight class="normal">,<sp/>m_data_to_path_map[data_name]};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::rename(tmp_path.c_str(),<sp/>m_data_to_path_map[data_name].c_str()))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Error" kindref="compound">PDI::Error</ref><sp/>{<ref refid="group__error_1gga85517a933cd17af89b7b921c6671ff54a9b282d8284fbacc7a4fd81e81964260b" kindref="member">PDI_ERR_SYSTEM</ref>,<sp/></highlight><highlight class="stringliteral">"Cannot<sp/>rename<sp/>temporary<sp/>file<sp/>{}"</highlight><highlight class="normal">,<sp/>tmp_path};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Error" kindref="compound">PDI::Error</ref><sp/>{<ref refid="group__error_1gga85517a933cd17af89b7b921c6671ff54a9b282d8284fbacc7a4fd81e81964260b" kindref="member">PDI_ERR_SYSTEM</ref>,<sp/></highlight><highlight class="stringliteral">"Data<sp/>write<sp/>not<sp/>complete"</highlight><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Create a function that reads data from file: <programlisting filename=".cpp"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>read_data(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>data_name,<sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">PDI::Ref_w</ref><sp/>ref_w)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ref_w)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>file{m_data_to_path_map[data_name],<sp/>std::ios::binary};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ref_w.type().buffersize()<sp/>==<sp/>ref_w.type().datasize())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//dense<sp/>data</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.read((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)ref_w.<ref refid="classPDI_1_1Ref__any_1ad8d6851233a405e0e1c27d2e762c6cb9" kindref="member">get</ref>(),<sp/>ref_w.type().buffersize());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//sparse<sp/>data</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;char&gt;<sp/>data_copy<sp/>{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[ref_w.type().dataSize()]};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.read(data_copy.get(),<sp/>ref_w.type().datasize());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_w.type().data_from_dense_copy(ref_w.<ref refid="classPDI_1_1Ref__any_1ad8d6851233a405e0e1c27d2e762c6cb9" kindref="member">get</ref>(),<sp/>data_copy.get());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Handle can_recover_all data: <programlisting filename=".cpp"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>can_recover(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>data_name,<sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">PDI::Ref_w</ref><sp/>ref_w)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ref_w)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Error" kindref="compound">PDI::Error</ref><sp/>{<ref refid="group__error_1gga85517a933cd17af89b7b921c6671ff54ae573fb10e871f40c2b37182ff415f454" kindref="member">PDI_ERR_RIGHT</ref>,<sp/></highlight><highlight class="stringliteral">"Cannot<sp/>write<sp/>to<sp/>`can_recover_all'<sp/>data"</highlight><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>data_path_pair<sp/>:<sp/>m_data_to_path_map)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>status;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stat(data_path_pair.second.c_str(),<sp/>&amp;status))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ref_w.<ref refid="classPDI_1_1Ref__any_1ad8d6851233a405e0e1c27d2e762c6cb9" kindref="member">get</ref>())<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ref_w.<ref refid="classPDI_1_1Ref__any_1ad8d6851233a405e0e1c27d2e762c6cb9" kindref="member">get</ref>())<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Add created functions to callbacks: <programlisting filename=".cpp"><codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">posix_plugin<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classPDI_1_1Plugin" kindref="compound">PDI::Plugin</ref></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>m_can_recover_data;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;std::string,<sp/>std::string&gt;<sp/>m_data_to_path_map;</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>posix_plugin(<ref refid="classPDI_1_1Context" kindref="compound">PDI::Context</ref>&amp;<sp/>ctx,<sp/>PC_tree_t<sp/>spec_tree):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Plugin{ctx}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_recover_tree(spec_tree);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_data_tree(spec_tree);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>data_path_pair<sp/>:<sp/>m_data_to_path_map)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.add_data_callback([</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>data_name,<sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">PDI::Ref</ref><sp/>ref)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;write_data(data_name,<sp/>ref);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>data_path_pair.first);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.add_data_callback([</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>data_name,<sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">PDI::Ref</ref><sp/>ref)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;read_data(data_name,<sp/>ref);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>data_path_pair.first);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_can_recover_data.empty())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.add_data_callback([</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>data_name,<sp/><ref refid="classPDI_1_1Ref__any" kindref="compound">PDI::Ref</ref><sp/>ref)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;can_recover(data_name,<sp/>ref);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>m_can_recover_all_data);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="how_to_create_plugin_1plugin_compile">
<title>Next steps</title>
<para><orderedlist>
<listitem><para>Compile: g++ posix.cxx -o libpdi_posix_plugin.so -lpdi -shared -fPIC -std=c++11</para>
</listitem><listitem><para>Copy created file to path where dynamic linker can find it. For example: sudo cp libpdi_posix_plugin.so /usr/local/lib/</para>
</listitem><listitem><para>Configure dynamic linker run-time bindings: sudo ldconfig</para>
</listitem><listitem><para>Create program that uses posix plugin.</para>
</listitem><listitem><para>Compile your test program: gcc example_use.cxx -o example_use -lpdi -lparaconf</para>
</listitem><listitem><para>Run your test program: ./example_use</para>
</listitem></orderedlist>
</para>
<para>You can see example of the program that uses this plugin on these <ulink url="https://docs.google.com/presentation/d/1jT416oALDkquBBgq_XkVrU48o4qx72wGHUPb4emXJw4">slides</ulink>. </para>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Installation" kind="page">
    <compoundname>Installation</compoundname>
    <title>Installation of PDI source distribution</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="warning"><para>The recommended approach to install PDI is to use the stable pre-compiled binary packages for Debian, Fedora and Ubuntu available at <ulink url="https://github.com/pdidev/pkgs/tree/repo">https://github.com/pdidev/pkgs/tree/repo</ulink> .</para>
</simplesect>
<simplesect kind="warning"><para>On other distributions, in case you do not have root acces, or if you want a more recent version, the <bold>PDI source distribution</bold> can be easily downloaded and compiled.</para>
</simplesect>
The PDI source distribution includes:<itemizedlist>
<listitem><para>the PDI core and its bindings for Fortran and python,</para>
</listitem><listitem><para>all PDI plugins,</para>
</listitem><listitem><para>the PDI configuration validator,</para>
</listitem><listitem><para>examples and tests,</para>
</listitem><listitem><para>most dependencies of all the above.</para>
</listitem></itemizedlist>
</para>
<sect1 id="Installation_1downloading_distribution">
<title>Downloading PDI source distribution</title>
<para>To download the sources, have a look at the list of all releases from: <ulink url="https://gitlab.maisondelasimulation.fr/pdidev/pdi/tags">https://gitlab.maisondelasimulation.fr/pdidev/pdi/tags</ulink></para>
<para>For example, release 0.6.1 can be downloaded by following these instructions: <programlisting filename=".bash"><codeline><highlight class="normal">wget<sp/>https://gitlab.maisondelasimulation.fr/pdidev/pdi/-/archive/0.6.1/pdi-0.6.1.tar.bz2</highlight></codeline>
<codeline><highlight class="normal">tar<sp/>-xjf<sp/>pdi-0.6.1.tar.bz2</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Installation_1default_installation">
<title>Default installation</title>
<para><simplesect kind="attention"><para>The <emphasis>default PDI source distribution</emphasis> consists in a subset of the PDI source distribution considered stable enough for production use.</para>
</simplesect>
Installing the default PDI source distribution is fairly easy. Most dependencies are embedded in the distribution and the only required external dependencies are:<itemizedlist>
<listitem><para><ulink url="https://cmake.org">cmake</ulink>, version &gt;= 3.5,</para>
</listitem><listitem><para>a C 99, C++ 14 and Fortran 95 compiler (<ulink url="https://gcc.gnu.org/">gcc</ulink> 5.4 is tested),</para>
</listitem><listitem><para>a POSIX compatible OS with a <ulink url="https://www.gnu.org/software/bash/">bash</ulink> and <ulink url="https://www.python.org/">python</ulink> interpreter (<ulink url="https://www.kernel.org/">linux</ulink> with <ulink url="https://www.gnu.org/software/libc/">GNU libc</ulink> 2.27 is tested),</para>
</listitem><listitem><para>a MPI implementation.</para>
</listitem></itemizedlist>
</para>
<para>For example, release 0.6.1 can be installed by following these instructions (but look for the latest release at <ulink url="https://gitlab.maisondelasimulation.fr/pdidev/pdi/tags">https://gitlab.maisondelasimulation.fr/pdidev/pdi/tags</ulink>):</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">mkdir<sp/>pdi-0.6.1/build<sp/>&amp;&amp;<sp/>cd<sp/>pdi-0.6.1/build</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-DCMAKE_INSTALL_PREFIX=/usr/<sp/>..<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>configuration</highlight></codeline>
<codeline><highlight class="normal">make<sp/>install<sp/><sp/><sp/>#<sp/>compilation<sp/>and<sp/>installation</highlight></codeline>
</programlisting></para>
<para><simplesect kind="attention"><para>The <computeroutput>cmake</computeroutput> command must be followed by the path to the <computeroutput>pdi</computeroutput> directory, here <computeroutput>..</computeroutput> because we have just created and moved to the <computeroutput>build</computeroutput> subdirectory.</para>
</simplesect>
<simplesect kind="attention"><para>The <computeroutput>-DCMAKE_INSTALL_PREFIX=/usr/</computeroutput> flag is used to specify where to install the distribution, flags are <ref refid="Installation_1cmake_config" kindref="member">discussed in more detail below</ref>.</para>
</simplesect>
If the default installation fails or if you need an installation better tailored to your needs, keep reading.</para>
</sect1>
<sect1 id="Installation_1cmake_config">
<title>Configuration</title>
<para>The PDI source distribution is compiled using CMake. The <computeroutput>cmake</computeroutput> command accepts options to configure the distribution with flags. The syntax is <computeroutput>-D&lt;FLAG&gt;=&lt;VALUE&gt;</computeroutput> to set <computeroutput>FLAG</computeroutput> value to <computeroutput>VALUE</computeroutput>.</para>
<para>For example, the installation directory can be changed with the following command: <programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>-DCMAKE_INSTALL_PREFIX=/home/user/<sp/>..</highlight></codeline>
</programlisting></para>
<para>The following general flags are useful to configure the distribution as a whole.</para>
<para><table rows="7" cols="3"><row>
<entry thead="yes"><para>Flag </para>
</entry><entry thead="yes"><para>Default </para>
</entry><entry thead="yes"><para>Description  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>CMAKE_INSTALL_PREFIX</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>/usr/local</computeroutput> </para>
</entry><entry thead="no"><para>The path where to install the distribution.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>CMAKE_PREFIX_PATH</computeroutput> </para>
</entry><entry thead="no"><para/>
</entry><entry thead="no"><para>A semicolon-separated list of prefix where to look for PDI dependencies in addition to system path.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>DIST_PROFILE</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>User</computeroutput> </para>
</entry><entry thead="no"><para>Sets the default values of other flags. The possible values are <computeroutput>User</computeroutput> for the PDI use profile and <computeroutput>Devel</computeroutput> for the developer profile.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>USE_DEFAULT</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>AUTO</computeroutput> </para>
</entry><entry thead="no"><para>Whether to compile the embedded versions of the dependencies. The possible values are <computeroutput>SYSTEM</computeroutput> to use the system versions, <computeroutput>EMBEDDED</computeroutput> to compile the version provided in the distribution and <computeroutput>AUTO</computeroutput> to prefer a system version but fall-back on the embedded version if unavailable.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>BUILD_UNSTABLE</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>OFF</computeroutput> </para>
</entry><entry thead="no"><para>Whether to build the unstable parts of the distribution, either <computeroutput>ON</computeroutput> or <computeroutput>OFF</computeroutput>.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>CMAKE_BUILD_TYPE</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>Release</computeroutput> </para>
</entry><entry thead="no"><para>Optimization level and debug verbosity. The possible values are <computeroutput>Release</computeroutput> and <computeroutput>Debug</computeroutput>.  </para>
</entry></row>
</table>
</para>
<para>The following flags define which features of the distribution to enable or not.</para>
<para><table rows="17" cols="3"><row>
<entry thead="yes"><para>Flag </para>
</entry><entry thead="yes"><para>Default </para>
</entry><entry thead="yes"><para>Description  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>BUILD_FORTRAN</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>ON</computeroutput> </para>
</entry><entry thead="no"><para>Build the Fortran interface.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>BUILD_DECL_HDF5_PLUGIN</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>ON</computeroutput> </para>
</entry><entry thead="no"><para>Build the Decl'HDF5 plug-in.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>BUILD_HDF5_PARALLEL</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>ON</computeroutput> </para>
</entry><entry thead="no"><para>Build the parallel version of the Decl'HDF5 plugin instead of the sequential one.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>BUILD_MPI_PLUGIN</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>ON</computeroutput> </para>
</entry><entry thead="no"><para>Build the MPI plug-in.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>BUILD_TEST_PLUGIN</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>ON</computeroutput> </para>
</entry><entry thead="no"><para>Build the Test plug-in.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>BUILD_TRACE_PLUGIN</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>ON</computeroutput> </para>
</entry><entry thead="no"><para>Build the Trace plug-in.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>BUILD_USER_CODE_PLUGIN</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>ON</computeroutput> </para>
</entry><entry thead="no"><para>Build the User-code plug-in.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>BUILD_PYTHON</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>OFF</computeroutput> </para>
</entry><entry thead="no"><para>Build the Python interface.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>BUILD_DECL_SION_PLUGIN</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>OFF</computeroutput> </para>
</entry><entry thead="no"><para>Build the decl'SION plug-in.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>BUILD_FLOWVR_PLUGIN</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>OFF</computeroutput> </para>
</entry><entry thead="no"><para>Build the FlowVR plug-in.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>BUILD_FTI_PLUGIN</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>OFF</computeroutput> </para>
</entry><entry thead="no"><para>Build the FTI plug-in.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>BUILD_PYCALL_PLUGIN</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>OFF</computeroutput> </para>
</entry><entry thead="no"><para>Build Pycall plug-in.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>BUILD_TESTING</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>OFF</computeroutput> </para>
</entry><entry thead="no"><para>Build the tests.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>BUILD_DOCUMENTATION</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>OFF</computeroutput> </para>
</entry><entry thead="no"><para>Build the documentation website.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>BUILD_INDENT</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>OFF</computeroutput> </para>
</entry><entry thead="no"><para>Build the code auto-indentation tools.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>BUILD_CFG_VALIDATOR</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>OFF</computeroutput> </para>
</entry><entry thead="no"><para>Build the <ref refid="namespacePDI" kindref="compound">PDI</ref> configuration validation script.  </para>
</entry></row>
</table>
</para>
<para>The following flags define whether to:<itemizedlist>
<listitem><para>use the preinstalled version of a dependency (<computeroutput>SYSTEM</computeroutput>), it will be looked for in the system directories and those specified by the <computeroutput>CMAKE_PREFIX_PATH</computeroutput> list,</para>
</listitem><listitem><para>compile the version of the dependency provided in the distribution (<computeroutput>EMBEDDED</computeroutput>),</para>
</listitem><listitem><para>compile another version of the dependency (the path to the source archive),</para>
</listitem><listitem><para>use the preinstalled version of a dependency if available and fallback on the compilation of the version of the dependency provided in the distribution if no preinstalled version is found.</para>
</listitem></itemizedlist>
</para>
<para><table rows="13" cols="3"><row>
<entry thead="yes"><para>Flag </para>
</entry><entry thead="yes"><para>Default </para>
</entry><entry thead="yes"><para>Description  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>USE_Astyle</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>AUTO</computeroutput> </para>
</entry><entry thead="no"><para>the <ulink url="http://astyle.sourceforge.net/">astyle</ulink> tool.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>USE_Bpp</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>EMBEDDED</computeroutput> </para>
</entry><entry thead="no"><para>the <ulink url="https://github.com/jbigot/zpp">bpp/zpp</ulink> preprocessor.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>USE_Doxygen</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>AUTO</computeroutput> </para>
</entry><entry thead="no"><para>the <ulink url="http://www.doxygen.nl/">doxygen</ulink> tool.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>USE_FlowVR</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>AUTO</computeroutput> </para>
</entry><entry thead="no"><para>the <ulink url="https://gitlab.inria.fr/flowvr/flowvr-ex">FlowVR</ulink> framework.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>USE_FTI</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>AUTO</computeroutput> </para>
</entry><entry thead="no"><para>the <ulink url="https://github.com/leobago/fti">FTI</ulink> library.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>USE_GTest</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>EMBEDDED</computeroutput> </para>
</entry><entry thead="no"><para>the <ulink url="https://github.com/google/googletest">googletest</ulink> framework.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>USE_HDF5</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>AUTO</computeroutput> </para>
</entry><entry thead="no"><para>the <ulink url="https://www.hdfgroup.org/solutions/hdf5/">HDF5</ulink> library.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>USE_paraconf</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>AUTO</computeroutput> </para>
</entry><entry thead="no"><para>the <ulink url="https://github.com/pdidev/paraconf">paraconf</ulink> library.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>USE_pybind11</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>AUTO</computeroutput> </para>
</entry><entry thead="no"><para>the <ulink url="https://pybind11.readthedocs.io/en/stable">pybind11</ulink> library.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>USE_SIONlib</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>AUTO</computeroutput> </para>
</entry><entry thead="no"><para>the SIONlib library.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>USE_spdlog</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>AUTO</computeroutput> </para>
</entry><entry thead="no"><para>the <ulink url="https://github.com/gabime/spdlog">spdlog</ulink> library.  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>USE_yaml</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>AUTO</computeroutput> </para>
</entry><entry thead="no"><para>the <ulink url="https://github.com/jbigot/zpp">yaml</ulink> library.  </para>
</entry></row>
</table>
</para>
</sect1>
<sect1 id="Installation_1dependecies">
<title>List of dependencies</title>
<para>Here is a list of all dependencies required by one feature or another. All dependencies are provided in the distribution unless specified otherwise.</para>
<para>Dependencies of <bold>PDI</bold>:</para>
<para><itemizedlist>
<listitem><para><bold><ulink url="https://cmake.org/">cmake</ulink> version 3.5 or above (not provided)</bold>,</para>
</listitem><listitem><para><bold>a C 99 and C++ 14 compiler such as <ulink url="https://gcc.gnu.org/">gcc</ulink> 5.4 or above (not provided)</bold>,</para>
</listitem><listitem><para>the <ulink url="https://github.com/pdidev/paraconf">paraconf</ulink> library version 0.4 or above,</para>
</listitem><listitem><para>the <ulink url="https://pyyaml.org/wiki/LibYAML">libyaml</ulink> library version 0.1 or above,</para>
</listitem><listitem><para>the <ulink url="https://github.com/gabime/spdlog">spdlog</ulink> library.</para>
</listitem></itemizedlist>
</para>
<para>Dependencies of <bold>the Fortran API</bold>:</para>
<para><itemizedlist>
<listitem><para>the <ref refid="namespacePDI" kindref="compound">PDI</ref> library,</para>
</listitem><listitem><para><bold>a Fortran 95 compiler such as <ulink url="https://gcc.gnu.org/">gcc</ulink> 5.4 or above (not provided)</bold>,</para>
</listitem><listitem><para><bold>a <ulink url="https://www.python.org/">python</ulink> interpreter version 2.7 or above (not provided)</bold>,</para>
</listitem><listitem><para><bold>a <ulink url="https://www.gnu.org/software/bash/">bash</ulink> interpreter (not provided)</bold>,</para>
</listitem><listitem><para>the <ulink url="https://github.com/jbigot/zpp">bpp/zpp</ulink> preprocessor version 0.3.0 or above.</para>
</listitem></itemizedlist>
</para>
<para>Dependencies of <bold>the Decl'HDF5 plugin</bold>:</para>
<para><itemizedlist>
<listitem><para>the <ref refid="namespacePDI" kindref="compound">PDI</ref> library,</para>
</listitem><listitem><para>the <ulink url="https://www.hdfgroup.org/solutions/hdf5/">HDF5</ulink> library version 1.8 or above,</para>
</listitem><listitem><para><bold>a MPI implementation for the parallel version of the plugin (not provided)</bold>.</para>
</listitem></itemizedlist>
</para>
<para>Dependencies of <bold>the MPI plugin</bold>:</para>
<para><itemizedlist>
<listitem><para>the <ref refid="namespacePDI" kindref="compound">PDI</ref> library,</para>
</listitem><listitem><para><bold>a MPI implementation (not provided)</bold>.</para>
</listitem></itemizedlist>
</para>
<para>Dependencies of <bold>the Python API</bold>:</para>
<para><itemizedlist>
<listitem><para>the <ref refid="namespacePDI" kindref="compound">PDI</ref> library,</para>
</listitem><listitem><para><bold>the <ulink url="https://www.python.org/">python</ulink> development environment version 3.5 or above (not provided)</bold>,</para>
</listitem><listitem><para>the <ulink url="https://pybind11.readthedocs.io/en/stable">pybind11</ulink> library version 2.3 or above,</para>
</listitem></itemizedlist>
</para>
<para>Dependencies of <bold>the Decl'SION plugin</bold>:</para>
<para><itemizedlist>
<listitem><para>the <ref refid="namespacePDI" kindref="compound">PDI</ref> library,</para>
</listitem><listitem><para><ulink url="https://www.fz-juelich.de/ias/jsc/EN/Expertise/Support/Software/SIONlib/_node.html">SIONlib</ulink> version 1.7.2 or above,</para>
</listitem></itemizedlist>
</para>
<para>Dependencies of <bold>the FlowVR plugin</bold>:</para>
<para><itemizedlist>
<listitem><para>the <ref refid="namespacePDI" kindref="compound">PDI</ref> library,</para>
</listitem><listitem><para><ulink url="https://gitlab.inria.fr/flowvr/flowvr-ex">FlowVR</ulink>.</para>
</listitem></itemizedlist>
</para>
<para>Dependencies of <bold>the FTI plugin</bold>:</para>
<para><itemizedlist>
<listitem><para>the <ref refid="namespacePDI" kindref="compound">PDI</ref> library,</para>
</listitem><listitem><para>the <ulink url="https://github.com/leobago/fti">FTI</ulink> library version 1.3 or above.</para>
</listitem></itemizedlist>
</para>
<para>Dependencies of <bold>the Pycall plugin</bold>:</para>
<para><itemizedlist>
<listitem><para>the <ref refid="namespacePDI" kindref="compound">PDI</ref> library with python API.</para>
</listitem></itemizedlist>
</para>
<para>Dependencies of <bold>the tests</bold>:</para>
<para><itemizedlist>
<listitem><para>the <ref refid="namespacePDI" kindref="compound">PDI</ref> library,</para>
</listitem><listitem><para><bold><ulink url="https://www.cmake.org/">cmake</ulink> version 3.10 or above (not provided)</bold>,</para>
</listitem><listitem><para>the <ulink url="https://github.com/google/googletest">googletest</ulink> framework version 1.8 or above,</para>
</listitem><listitem><para><ulink url="http://astyle.sourceforge.net/">astyle</ulink> version 3.1 or above.</para>
</listitem></itemizedlist>
</para>
<para>Dependencies of <bold>the documentation website builder</bold>:</para>
<para><itemizedlist>
<listitem><para><ulink url="http://www.doxygen.nl/">doxygen</ulink> version 1.8 or above.</para>
</listitem></itemizedlist>
</para>
<para>Dependencies of <bold>the <ref refid="namespacePDI" kindref="compound">PDI</ref> configuration validation tool</bold>:</para>
<para><itemizedlist>
<listitem><para><bold>a <ulink url="https://www.python.org/">python</ulink> interpreter version 2.7 or above (not provided)</bold>,</para>
</listitem><listitem><para><bold>the <ulink url="https://pyyaml.org/">python YAML</ulink> module (not provided)</bold>. </para>
</listitem></itemizedlist>
</para>
</sect1>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Plugins" kind="page">
    <compoundname>Plugins</compoundname>
    <title>Plugins</title>
    <innerpage refid="Decl_HDF5_plugin">The Decl'HDF5 plugin</innerpage>
    <innerpage refid="FlowVR_plugin">The FlowVR plugin</innerpage>
    <innerpage refid="trace_plugin">Trace plugin</innerpage>
    <innerpage refid="user_code_plugin">The user-code plugin</innerpage>
    <innerpage refid="set_value_plugin">Set_value plugin</innerpage>
    <innerpage refid="FTI_plugin">FTI plugin</innerpage>
    <innerpage refid="pycall_plugin">Pycall plugin</innerpage>
    <innerpage refid="how_to_create_plugin">How to create a plugin</innerpage>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><table rows="10" cols="2"><row>
<entry thead="yes"><para>Plugin </para>
</entry><entry thead="yes"><para>Description  </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="Decl_HDF5_plugin" kindref="compound">Decl'HDF5 plugin</ref> </para>
</entry><entry thead="no"><para>Read and write data from HDF5 files in a declarative way.  </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="FlowVR_plugin" kindref="compound">FlowVR plugin</ref> </para>
</entry><entry thead="no"><para>Write FlowVR modules without knowing any specific FlowVR API calls.  </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="trace_plugin" kindref="compound">trace plugin</ref> </para>
</entry><entry thead="no"><para>Generate a trace of what happens in PDI data store.  </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="user_code_plugin" kindref="compound">user-code plugin</ref> </para>
</entry><entry thead="no"><para>Call your function on event or when data becomes available  </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="set_value_plugin" kindref="compound">set_value plugin</ref> </para>
</entry><entry thead="no"><para>Set values to data and metadata from yaml file.  </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="FTI_plugin" kindref="compound">FTI plugin</ref> </para>
</entry><entry thead="no"><para>Perform checkpoints using FTI library.  </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="pycall_plugin" kindref="compound">Pycall plugin</ref> </para>
</entry><entry thead="no"><para>Call python scripts from C application  </para>
</entry></row>
<row>
<entry thead="no"><para>MPI plugin </para>
</entry><entry thead="no"><para>Enables MPI support in PDI and plugins.  </para>
</entry></row>
<row>
<entry thead="no"><para>Decl'SION plugin </para>
</entry><entry thead="no"><para>Read and write data from SIONlib files in a declarative way.  </para>
</entry></row>
</table>
</para>
<para>To learn how to create your own plugin see: <ref refid="how_to_create_plugin" kindref="compound">How to create a plugin</ref> </para>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Specification_tree_ref" kind="page">
    <compoundname>Specification_tree_ref</compoundname>
    <title>Specification tree Reference</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The PDI specification tree is expressed in <ulink url="https://en.wikipedia.org/wiki/YAML">YAML</ulink>. As such, it is a tree that contains 3 distinct kinds of nodes:<itemizedlist>
<listitem><para>scalars,</para>
</listitem><listitem><para>sequences,</para>
</listitem><listitem><para>mappings.</para>
</listitem></itemizedlist>
</para>
<para>A <bold>scalar</bold> is a leaf in the tree, represented as a string. Some form of scalars can be interpreted as a boolean, integer or floating-point valued. Simple examples of scalars include for example (see the <ulink url="https://yaml.org/spec/1.2/spec.html#id2760844">YAML specification</ulink> for the complete syntax):<itemizedlist>
<listitem><para><computeroutput>"hello"</computeroutput>,</para>
</listitem><listitem><para><computeroutput>world</computeroutput>,</para>
</listitem><listitem><para><computeroutput>3</computeroutput>,</para>
</listitem><listitem><para><computeroutput>5.7</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para>A <bold>sequence</bold> is an ordered list of sub-nodes (that can themselves be scalars, sequences or mappings). Two main syntaxes are available for sequences (see the <ulink url="https://yaml.org/spec/1.2/spec.html#id2759963">YAML specification</ulink> for the complete syntax).<itemizedlist>
<listitem><para>in-line sequence: <computeroutput>[1, 2, 3, hello, "world"]</computeroutput></para>
</listitem><listitem><para>multi-line sequence: <programlisting><codeline><highlight class="normal">-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">-<sp/>2</highlight></codeline>
<codeline><highlight class="normal">-<sp/>3</highlight></codeline>
<codeline><highlight class="normal">-<sp/>hello</highlight></codeline>
<codeline><highlight class="normal">-<sp/>world</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
<para>A <bold>mapping</bold> is an unordered list of key-value pairs (whose elements can themselves be scalars, sequences or mappings). Two main syntaxes are available for mapping (see the <ulink url="https://yaml.org/spec/1.2/spec.html#id2759963">YAML specification</ulink> for the complete syntax).<itemizedlist>
<listitem><para>in-line mapping: <computeroutput>{1: one, 2: "two", "three": 3}</computeroutput></para>
</listitem><listitem><para>multi-line mapping: <programlisting><codeline><highlight class="normal">1:<sp/>one</highlight></codeline>
<codeline><highlight class="normal">2:<sp/>two</highlight></codeline>
<codeline><highlight class="normal">"three":<sp/>3</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
<sect1 id="Specification_tree_ref_1root_node">
<title>specification tree root</title>
<para>The <emphasis>specification tree root</emphasis> is a <bold>mapping</bold> that contains the following keys:</para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"data"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="Specification_tree_ref_1data_map_node" kindref="member">data_map</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"metadata"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="Specification_tree_ref_1data_map_node" kindref="member">data_map</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"plugins"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="Specification_tree_ref_1plugin_map_node" kindref="member">plugin_map</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>".*"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para><emphasis>anything</emphasis>  </para>
</entry></row>
</table>
</para>
<para><itemizedlist>
<listitem><para>the <computeroutput>data</computeroutput> and <computeroutput>metadata</computeroutput> sections specify the type of the data in buffers exposed by the application; for <computeroutput>metadata</computeroutput>, PDI keeps a copy while it only keeps references for <computeroutput>data</computeroutput>,</para>
</listitem><listitem><para>the <computeroutput>plugin</computeroutput> section specifies the list of plugins to load and their configuration,</para>
</listitem><listitem><para>additional sections are ignored.</para>
</listitem></itemizedlist>
</para>
<para><bold>Example:</bold></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_metadata:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>subtype:<sp/>double</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size:<sp/>5</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>decl_hdf5:<sp/>#...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>mpi:<sp/>#...</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Specification_tree_ref_1array_type_node">
<title>array_type</title>
<para>A <emphasis>array_type</emphasis> is a <bold>mapping</bold> that contains the following keys:</para>
<para><table rows="6" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"type"</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>"array"</computeroutput>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"size"</computeroutput> </para>
</entry><entry thead="no"><para>a <ref refid="Specification_tree_ref_1intexpr_or_seq_node" kindref="member">intexpr_or_seq</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"subtype"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="Specification_tree_ref_1datatype_node" kindref="member">datatype</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"subsize"</computeroutput> (<emphasis>optional, deprecated</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="Specification_tree_ref_1intexpr_or_seq_node" kindref="member">intexpr_or_seq</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"start"</computeroutput> (<emphasis>optional, deprecated</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="Specification_tree_ref_1intexpr_or_seq_node" kindref="member">intexpr_or_seq</ref>  </para>
</entry></row>
</table>
</para>
<para>A <emphasis>array_type_node</emphasis> represents a potentially multi-dimensional array where:<itemizedlist>
<listitem><para>the value associated to the <computeroutput>size</computeroutput> key represents the size of the array in each dimension (C order),</para>
</listitem><listitem><para>the value associated to the <computeroutput>subtype</computeroutput> key represents the type of the elements in the array,</para>
</listitem><listitem><para>the value associated to the <computeroutput>subsize</computeroutput> key represents the number of elements to actually use in each dimension (slicing), if specified it <bold>must</bold> have the same number of elements as <computeroutput>size</computeroutput>, this defaults to the full array size in each dimension,</para>
</listitem><listitem><para>the value associated to the <computeroutput>start</computeroutput> key represents the index of the first element to actually use in each dimension (slicing), if specified it <bold>must</bold> have the same number of elements as <computeroutput>size</computeroutput>, this defaults to the first (0) element in each dimension.</para>
</listitem></itemizedlist>
</para>
<para><bold>Examples:</bold></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal">subtype:<sp/>double</highlight></codeline>
<codeline><highlight class="normal">size:<sp/>5</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal">subtype:<sp/>{<sp/>type:<sp/>character,<sp/>kind:<sp/>4<sp/>}</highlight></codeline>
<codeline><highlight class="normal">size:<sp/>[<sp/>'$size_1d',<sp/>'$size_2d'<sp/>]</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Specification_tree_ref_1char_type_node">
<title>char_type</title>
<para>A <emphasis>char_type</emphasis> is a <bold>mapping</bold> that contains the following keys:</para>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"type"</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>"char"</computeroutput>  </para>
</entry></row>
</table>
</para>
<para>A <emphasis>char_type</emphasis> represents the C <computeroutput>char</computeroutput> datatype; it accepts no parameter.</para>
<para><bold>Example:</bold></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">type:<sp/>char</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Specification_tree_ref_1character_type_node">
<title>character_type</title>
<para>A <emphasis>character_type</emphasis> is a <bold>mapping</bold> that contains the following keys:</para>
<para><table rows="3" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"type"</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>"character"</computeroutput>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"kind"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="Specification_tree_ref_1expression_node" kindref="member">integer-valued $-expression</ref>  </para>
</entry></row>
</table>
</para>
<para>A <emphasis>character_type_node</emphasis> represents the Fortran <computeroutput>character</computeroutput> datatype. The value associated to the <computeroutput>kind</computeroutput> key corresponds to the Fortran <emphasis>kind</emphasis> parameter (<computeroutput>character(kind=...)</computeroutput>).</para>
<para><bold>Examples:</bold></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">type:<sp/>character</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">type:<sp/>character</highlight></codeline>
<codeline><highlight class="normal">kind:<sp/>4</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Specification_tree_ref_1datatype_node">
<title>datatype</title>
<para>A <emphasis>datatype</emphasis> can be <bold>any of</bold>:<itemizedlist>
<listitem><para>a <ref refid="Specification_tree_ref_1array_type_node" kindref="member">array_type</ref>,</para>
</listitem><listitem><para>a <ref refid="Specification_tree_ref_1char_type_node" kindref="member">char_type</ref>,</para>
</listitem><listitem><para>a <ref refid="Specification_tree_ref_1character_type_node" kindref="member">character_type</ref>,</para>
</listitem><listitem><para>a <ref refid="Specification_tree_ref_1double_type_node" kindref="member">double_type</ref>,</para>
</listitem><listitem><para>a <ref refid="Specification_tree_ref_1float_type_node" kindref="member">float_type</ref>,</para>
</listitem><listitem><para>a <ref refid="Specification_tree_ref_1int_type_node" kindref="member">int_type</ref>,</para>
</listitem><listitem><para>a <ref refid="Specification_tree_ref_1int16_type_node" kindref="member">int16_type</ref>,</para>
</listitem><listitem><para>a <ref refid="Specification_tree_ref_1int32_type_node" kindref="member">int32_type</ref>,</para>
</listitem><listitem><para>a <ref refid="Specification_tree_ref_1int64_type_node" kindref="member">int64_type</ref>,</para>
</listitem><listitem><para>a <ref refid="Specification_tree_ref_1int8_type_node" kindref="member">int8_type</ref>,</para>
</listitem><listitem><para>a <ref refid="Specification_tree_ref_1integer_type_node" kindref="member">integer_type</ref>,</para>
</listitem><listitem><para>a <ref refid="Specification_tree_ref_1logical_type_node" kindref="member">logical_type</ref>,</para>
</listitem><listitem><para>a <ref refid="Specification_tree_ref_1real_type_node" kindref="member">real_type</ref>,</para>
</listitem><listitem><para>a <ref refid="Specification_tree_ref_1record_type_node" kindref="member">record_type</ref>,</para>
</listitem><listitem><para>a <ref refid="Specification_tree_ref_1simple_datatype_node" kindref="member">simple_datatype</ref>.</para>
</listitem></itemizedlist>
</para>
<para>Amongst these, <ref refid="Specification_tree_ref_1simple_datatype_node" kindref="member">simple_datatype</ref> is the only scalar. All others are dictionaries with a <computeroutput>type</computeroutput> key used for disambiguation between them. Plugins can add new options that follow the same pattern.</para>
<para>A <emphasis>datatype</emphasis> represents the memory layout and interpretation for data exposed by the user in the <ref refid="Concepts_1Data_store" kindref="member">data store</ref>.</para>
</sect1>
<sect1 id="Specification_tree_ref_1data_map_node">
<title>data_map</title>
<para>A <emphasis>data_map</emphasis> is a <bold>mapping</bold> that contains the following keys:</para>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>".*"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="Specification_tree_ref_1datatype_node" kindref="member">datatype</ref>  </para>
</entry></row>
</table>
</para>
<para><itemizedlist>
<listitem><para>each key identifies the name of a buffer exposed to PDI associated to its type.</para>
</listitem></itemizedlist>
</para>
<para><bold>Example:</bold></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">my_data_1:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">my_data_2:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>double,<sp/>size:<sp/>5}</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Specification_tree_ref_1double_type_node">
<title>double_type</title>
<para>A <emphasis>double_type</emphasis> is a <bold>mapping</bold> that contains the following keys:</para>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"type"</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>"double"</computeroutput>  </para>
</entry></row>
</table>
</para>
<para>A <emphasis>double_type</emphasis> represents the C <computeroutput>double</computeroutput> type. It accepts no parameter.</para>
<para><bold>Example:</bold></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">type:<sp/>double</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Specification_tree_ref_1expression_node">
<title>$-expression</title>
<para>A <emphasis>$-expression</emphasis> is a <bold>scalar</bold> whose content matches the following grammar:</para>
<para><programlisting filename="docs/expression_grammar.in.txt"><codeline><highlight class="comment">/*<sp/>parsing<sp/>as<sp/>a<sp/>REFERENCE<sp/>is<sp/>preferred<sp/>over<sp/>OPERATION</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>parsing<sp/>as<sp/>an<sp/>OPERATION<sp/>is<sp/>preferred<sp/>over<sp/>STRING_LITERAL</highlight></codeline>
<codeline><highlight class="comment">*/</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal">EXPRESSION<sp/><sp/><sp/><sp/><sp/>:=<sp/>REFERENCE<sp/>|<sp/>OPERATION<sp/>|<sp/>STRING_LITERAL</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">STRING_LITERAL<sp/>:=<sp/>(<sp/>CHAR<sp/>|<sp/></highlight><highlight class="charliteral">'\'</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">'\'</highlight><highlight class="normal"><sp/>|<sp/></highlight><highlight class="charliteral">'\'</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">'$'</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>REFERENCE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/></highlight><highlight class="charliteral">'$'</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">'('</highlight><highlight class="normal"><sp/>OPERATION<sp/></highlight><highlight class="charliteral">')'</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)*</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="comment">/*<sp/>The<sp/>operator<sp/>descending<sp/>precedence<sp/>order<sp/>is:</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>1.<sp/>*,<sp/>/,<sp/>%:<sp/>multiplication,<sp/>division<sp/>and<sp/>modulo,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>2.<sp/>+,<sp/>-:<sp/>addition<sp/>and<sp/>subtraction,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>3.<sp/>&lt;,<sp/>&gt;:<sp/>less<sp/>than<sp/>and<sp/>greater<sp/>than,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>4.<sp/>=:<sp/>equality,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>5.<sp/>&amp;:<sp/>logical<sp/>AND,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>6.<sp/>|:<sp/>logical<sp/>OR.</highlight></codeline>
<codeline><highlight class="comment">*/</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal">OPERATION<sp/><sp/><sp/><sp/><sp/><sp/>:=<sp/>TERM<sp/>(<sp/>OPERATOR<sp/>TERM<sp/>)*</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">TERM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:=<sp/>(<sp/>INT_LITERAL<sp/>|<sp/>REFERENCE<sp/>|<sp/></highlight><highlight class="charliteral">'('</highlight><highlight class="normal"><sp/>OPERATION<sp/></highlight><highlight class="charliteral">')'</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">REFERENCE<sp/><sp/><sp/><sp/><sp/><sp/>:=<sp/></highlight><highlight class="charliteral">'$'</highlight><highlight class="normal"><sp/>(<sp/>IREFERENCE<sp/>|<sp/></highlight><highlight class="charliteral">'{'</highlight><highlight class="normal"><sp/>IREFERENCE<sp/></highlight><highlight class="charliteral">'}'</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">IREFERENCE<sp/><sp/><sp/><sp/><sp/>:=<sp/>ID<sp/>(<sp/></highlight><highlight class="charliteral">'['</highlight><highlight class="normal"><sp/>OPERATION<sp/></highlight><highlight class="charliteral">']'</highlight><highlight class="normal"><sp/>)*</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">INT_LITERAL<sp/>~=<sp/>(0x)?<sp/>[0-9]+<sp/>(<sp/>\.<sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~=<sp/>[a-zA-Z_][a-zA-Z0-9_]*</highlight></codeline>
<codeline><highlight class="normal">CHAR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~=<sp/>[^$\\]</highlight></codeline>
<codeline><highlight class="normal">OPERATOR<sp/><sp/><sp/><sp/>~=<sp/>[|&amp;=&lt;&gt;+\-\*/%]</highlight></codeline>
</programlisting></para>
<para>The rules for evaluating an expression are close to those of BASH for example.</para>
<para>In addition to raw text, a <computeroutput>STRING_LITERAL</computeroutput> can contain references to the string value of some data in the store as well as the result of an operation by enclosing it inside a dollar-parenthesis <computeroutput>$()</computeroutput>.</para>
<para>An <computeroutput>OPERATION</computeroutput> can include logical and arithmetic operators grouped by parenthesis. The basic terms manipulated in an operation can be integer literals or references to the integer value of some data in the store.</para>
<para>A <computeroutput>REFERENCE</computeroutput> is introduced by a dollar <computeroutput>$</computeroutput> sign and optionally enclosed in curly braces <computeroutput>{</computeroutput>, <computeroutput>}</computeroutput>. Its value is that of the data or metadata with the associated name. It is always a good idea to have referenced values in the metadata section as it prevents dangling references. A direct reference is possible as well as sub-references to array elements using the square brackets <computeroutput>[</computeroutput>, <computeroutput>]</computeroutput> operator.</para>
<para>The value-type of an <computeroutput>EXPRESSION</computeroutput> is as follow:<itemizedlist>
<listitem><para>if it's a <computeroutput>REFERENCE</computeroutput>, it has the type of the referenced data in the store,</para>
</listitem><listitem><para>if it's a <computeroutput>OPERATION</computeroutput>, it is integer-valued,</para>
</listitem><listitem><para>if it's a <computeroutput>STRING_LITERAL</computeroutput>, it is string-valued.</para>
</listitem></itemizedlist>
</para>
<para>In addition, an integer can be interpreted as a string or as a boolean value where zero is interpreted as false and any other value as true.</para>
<para><bold>Examples:</bold></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">'$my_data'</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">'($my_data<sp/>+<sp/>3)<sp/>%<sp/>6'</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">'my<sp/>name<sp/>is<sp/>${my_name}'</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Specification_tree_ref_1float_type_node">
<title>float_type</title>
<para>A <emphasis>float_type</emphasis> is a <bold>mapping</bold> that contains the following keys:</para>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"type"</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>"float"</computeroutput>  </para>
</entry></row>
</table>
</para>
<para>A <ref refid="Specification_tree_ref_1float_type_node" kindref="member">float_type</ref> represents the C <computeroutput>float</computeroutput> type. It accepts no parameter.</para>
<para><bold>Example:</bold></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">type:<sp/>float</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Specification_tree_ref_1int_type_node">
<title>int_type</title>
<para>A <emphasis>int_type</emphasis> is a <bold>mapping</bold> that contains the following keys:</para>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"type"</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>"int"</computeroutput>  </para>
</entry></row>
</table>
</para>
<para>A <ref refid="Specification_tree_ref_1int_type_node" kindref="member">int_type</ref> represents the C <computeroutput>int</computeroutput> type. It accepts no parameter.</para>
<para><bold>Example:</bold></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">type:<sp/>int</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Specification_tree_ref_1int16_type_node">
<title>int16_type</title>
<para>A <emphasis>int16_type</emphasis> is a <bold>mapping</bold> that contains the following keys:</para>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"type"</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>"int16"</computeroutput>  </para>
</entry></row>
</table>
</para>
<para>A <ref refid="Specification_tree_ref_1int16_type_node" kindref="member">int16_type</ref> represents the C <computeroutput>int16_t</computeroutput> type from the <computeroutput>&lt;stdtypes.h&gt;</computeroutput> header. It accepts no parameter.</para>
<para><bold>Example:</bold></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">type:<sp/>int16</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Specification_tree_ref_1int32_type_node">
<title>int32_type</title>
<para>A <emphasis>int32_type</emphasis> is a <bold>mapping</bold> that contains the following keys:</para>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"type"</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>"int32"</computeroutput>  </para>
</entry></row>
</table>
</para>
<para>A <ref refid="Specification_tree_ref_1int32_type_node" kindref="member">int32_type</ref> represents the C <computeroutput>int32_t</computeroutput> type from the <computeroutput>&lt;stdtypes.h&gt;</computeroutput> header. It accepts no parameter.</para>
<para><bold>Example:</bold></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">type:<sp/>int32</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Specification_tree_ref_1int64_type_node">
<title>int64_type</title>
<para>A <emphasis>int64_type</emphasis> is a <bold>mapping</bold> that contains the following keys:</para>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"type"</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>"int64"</computeroutput>  </para>
</entry></row>
</table>
</para>
<para>A <emphasis>int64_type</emphasis> represents the C <computeroutput>int64_t</computeroutput> type from the <computeroutput>&lt;stdtypes.h&gt;</computeroutput> header. It accepts no parameter.</para>
<para><bold>Example:</bold></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">type:<sp/>int64</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Specification_tree_ref_1int8_type_node">
<title>int8_type</title>
<para>A <emphasis>int8_type</emphasis> is a <bold>mapping</bold> that contains the following keys:</para>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"type"</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>"int8"</computeroutput>  </para>
</entry></row>
</table>
</para>
<para>A <ref refid="Specification_tree_ref_1int8_type_node" kindref="member">int8_type</ref> represents the C <computeroutput>int8_t</computeroutput> type from the <computeroutput>&lt;stdtypes.h&gt;</computeroutput> header. It accepts no parameter.</para>
<para><bold>Example:</bold></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">type:<sp/>int8</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Specification_tree_ref_1integer_type_node">
<title>integer_type</title>
<para>A <emphasis>integer_type</emphasis> is a <bold>mapping</bold> that contains the following keys:</para>
<para><table rows="3" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"type"</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>"integer"</computeroutput>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"kind"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="Specification_tree_ref_1expression_node" kindref="member">integer-valued $-expression</ref>  </para>
</entry></row>
</table>
</para>
<para>A <emphasis>integer_type</emphasis> represents the Fortran <computeroutput>integer</computeroutput> datatype. The value associated to the <computeroutput>kind</computeroutput> key corresponds to the Fortran <emphasis>kind</emphasis> parameter (<computeroutput>integer(kind=...)</computeroutput>). If missing, the default kind of the Fortran implementation is used.</para>
<para><bold>Examples:</bold></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">type:<sp/>integer</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">type:<sp/>integer</highlight></codeline>
<codeline><highlight class="normal">kind:<sp/>2</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Specification_tree_ref_1intexpr_seq_node">
<title>intexpr_seq</title>
<para>A <emphasis>intexpr_seq</emphasis> is a <bold>sequence</bold> where each element of the sequence is a <ref refid="Specification_tree_ref_1expression_node" kindref="member">integer-valued $-expression</ref>.</para>
<para><bold>Example:</bold></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">[<sp/>1,<sp/>'2',<sp/>'$size',<sp/>'$other_size<sp/>+<sp/>2'<sp/>]</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Specification_tree_ref_1intexpr_or_seq_node">
<title>intexpr_or_seq</title>
<para>A <emphasis>intexpr_or_seq</emphasis> can be <bold>any of</bold>:<itemizedlist>
<listitem><para>a <ref refid="Specification_tree_ref_1expression_node" kindref="member">integer-valued $-expression</ref>,</para>
</listitem><listitem><para>a <ref refid="Specification_tree_ref_1intexpr_seq_node" kindref="member">intexpr_seq</ref>.</para>
</listitem></itemizedlist>
</para>
<para>In that context, a simple <ref refid="Specification_tree_ref_1expression_node" kindref="member">$-expression</ref> is interpreted as a shortcut for a sequence containing a single <ref refid="Specification_tree_ref_1expression_node" kindref="member">$-expression</ref>.</para>
<para>For example, the following value: <programlisting><codeline><highlight class="normal">"$x<sp/>+<sp/>2"</highlight></codeline>
</programlisting></para>
<para>is interpreted as if it was: <programlisting><codeline><highlight class="normal">[<sp/>"$x<sp/>+<sp/>2"<sp/>]</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Specification_tree_ref_1logical_type_node">
<title>logical_type</title>
<para>A <emphasis>logical_type</emphasis> is a <bold>mapping</bold> that contains the following keys:</para>
<para><table rows="3" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"type"</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>"logical"</computeroutput>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"kind"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="Specification_tree_ref_1expression_node" kindref="member">integer-valued $-expression</ref>  </para>
</entry></row>
</table>
</para>
<para>A <emphasis>logical_type</emphasis> represents the Fortran <computeroutput>logical</computeroutput> datatype. The value associated to the <computeroutput>kind</computeroutput> key corresponds to the Fortran <emphasis>kind</emphasis> parameter (<computeroutput>logical(kind=...)</computeroutput>). If missing, the default kind of the Fortran implementation is used.</para>
<para><bold>Examples:</bold></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">type:<sp/>logical</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">type:<sp/>logical</highlight></codeline>
<codeline><highlight class="normal">kind:<sp/>1</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Specification_tree_ref_1member_desc_node">
<title>member_desc</title>
<para>A <emphasis>member_desc</emphasis> is a <bold>mapping</bold> that contains the following keys: <table rows="4" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"disp"</computeroutput> </para>
</entry><entry thead="no"><para>a <ref refid="Specification_tree_ref_1expression_node" kindref="member">integer-valued $-expression</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"type"</computeroutput> </para>
</entry><entry thead="no"><para>a <computeroutput>scalar</computeroutput>, <computeroutput>array</computeroutput> or <computeroutput>record</computeroutput>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>".*"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para><emphasis>anything</emphasis>  </para>
</entry></row>
</table>
</para>
<para><itemizedlist>
<listitem><para>the value associated to the <computeroutput>disp</computeroutput> key identifies the displacement in bytes from the base address of the record and the address of this specific member,</para>
</listitem><listitem><para>the value associated to the <computeroutput>type</computeroutput> key identifies the <ref refid="Specification_tree_ref_1datatype_node" kindref="member">type</ref> of this record, all other keys required for this <ref refid="Specification_tree_ref_1datatype_node" kindref="member">datatype</ref> must be present.</para>
</listitem></itemizedlist>
</para>
<para><bold>Examples:</bold></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">my_char:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>disp:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type:<sp/>int64</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">my_array:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>disp:<sp/>8</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>subtype:<sp/>int64</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size:<sp/>[10,<sp/>10]</highlight></codeline>
</programlisting></para>
<para>See <ref refid="Specification_tree_ref_1record_type_node" kindref="member">record_type</ref> for more examples.</para>
</sect1>
<sect1 id="Specification_tree_ref_1members_map_node">
<title>members_map</title>
<para>A <emphasis>members_map</emphasis> is a <bold>mapping</bold> that contains the following keys: <table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>".*"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="Specification_tree_ref_1member_desc_node" kindref="member">member_desc</ref>  </para>
</entry></row>
</table>
</para>
<para><itemizedlist>
<listitem><para>each key identifies the name of a member of the record and the value associated to it describes the member itself.</para>
</listitem></itemizedlist>
</para>
<para>See <ref refid="Specification_tree_ref_1record_type_node" kindref="member">record_type</ref> for an example.</para>
</sect1>
<sect1 id="Specification_tree_ref_1plugin_map_node">
<title>plugin_map</title>
<para>A <emphasis>plugin_map</emphasis> is a <bold>mapping</bold> that contains the following keys: <table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>".*"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para><emphasis>anything</emphasis>  </para>
</entry></row>
</table>
</para>
<para><itemizedlist>
<listitem><para>each key identifies the name of a plugin to load associated to its configuration; the content of the configuration depends on the plugin.</para>
</listitem></itemizedlist>
</para>
<para>Have a look at the <ref refid="Plugins" kindref="compound">plugins</ref> documentation to see the specification tree they accept.</para>
<para>See <ref refid="Specification_tree_ref_1root_node" kindref="member">specification tree root</ref> for an example.</para>
</sect1>
<sect1 id="Specification_tree_ref_1real_type_node">
<title>real_type</title>
<para>A <emphasis>real_type</emphasis> is a <bold>mapping</bold> that contains the following keys:</para>
<para><table rows="3" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"type"</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>"real"</computeroutput>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"kind"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="Specification_tree_ref_1expression_node" kindref="member">integer-valued $-expression</ref>  </para>
</entry></row>
</table>
</para>
<para>A <emphasis>real_type</emphasis> represents the Fortran <computeroutput>real</computeroutput> datatype. The value associated to the <computeroutput>kind</computeroutput> key corresponds to the Fortran <emphasis>kind</emphasis> parameter (<computeroutput>real(kind=...)</computeroutput>). If missing, the default kind of the Fortran implementation is used.</para>
<para><bold>Examples:</bold></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">type:<sp/>real</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">type:<sp/>real</highlight></codeline>
<codeline><highlight class="normal">kind:<sp/>8</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Specification_tree_ref_1record_type_node">
<title>record_type</title>
<para>A <emphasis>record_type</emphasis> is a <bold>mapping</bold> that contains the following keys:</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"type"</computeroutput> </para>
</entry><entry thead="no"><para><computeroutput>"record"</computeroutput>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"buffersize"</computeroutput> </para>
</entry><entry thead="no"><para>a <ref refid="Specification_tree_ref_1expression_node" kindref="member">integer-valued $-expression</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"members"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="Specification_tree_ref_1members_map_node" kindref="member">members_map</ref>  </para>
</entry></row>
</table>
</para>
<para>A <ref refid="Specification_tree_ref_1record_type_node" kindref="member">record_type</ref> represents a "record", <emphasis>aka</emphasis> C "struct", C++ "class", Fortran "derived type" where:<itemizedlist>
<listitem><para>the value associated to the <computeroutput>buffersize</computeroutput> key represents the overall size of the record, including potential padding,</para>
</listitem><listitem><para>the value associated to the <computeroutput>members</computeroutput> key lists all members of the record.</para>
</listitem></itemizedlist>
</para>
<para><bold>Example:</bold></para>
<para><programlisting filename=".python"><codeline><highlight class="normal">type:<sp/>record</highlight></codeline>
<codeline><highlight class="normal">buffersize:<sp/>8</highlight></codeline>
<codeline><highlight class="normal">members:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>first_int:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>disp:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>int32</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>seconf_int:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>disp:<sp/>4</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>int32</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="Specification_tree_ref_1simple_datatype_node">
<title>simple_datatype</title>
<para>A <emphasis>simple_datatype</emphasis> is a <bold>scalar</bold>.</para>
<para>It is interpreted as a shortcut for a mapping with a single key <computeroutput>type</computeroutput> whose value is the provided scalar and therefore another <ref refid="Specification_tree_ref_1datatype_node" kindref="member">datatype</ref>.</para>
<para>For example, the following value: <programlisting><codeline><highlight class="normal">"my_type"</highlight></codeline>
</programlisting></para>
<para>is interpreted as if it was: <programlisting><codeline><highlight class="normal">{<sp/>type:<sp/>"my_type"<sp/>}</highlight></codeline>
</programlisting> </para>
</sect1>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="PDI_example" kind="page">
    <compoundname>PDI_example</compoundname>
    <title>PDI example</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>PDI example application can be found in repository in the <computeroutput>example</computeroutput> directory. The source code is written in C, Fortran and Python.</para>
<para>The example has a single source file (for each supported programming language), but specification tree to each plugin. Just by replacing the configuration file, the example program will use different libraries and different I/O operations.</para>
<para>The example implements simple <ulink url="https://en.wikipedia.org/wiki/Heat_equation">Heat equation</ulink> algorithm in 2 dimensional space.</para>
<sect1 id="PDI_example_1heat_algorithm">
<title>Heat algorithm</title>
<para>Each element in a matrix is a point with temperature. In each iteration every cell is calculated by an weighted average of itself and neighbour cells (top, bottom, left and right):</para>
<para><programlisting filename=".C"><codeline><highlight class="normal">matrix[i][j]<sp/>=<sp/>0.500<sp/>*<sp/>matrix[i][j]<sp/>+<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.125<sp/>*<sp/>matrix[i-1][j]<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.125<sp/>*<sp/>matrix[i+1][j]<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.125<sp/>*<sp/>matrix[i][j-1]<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.125<sp/>*<sp/>matrix[i][j+1];<sp/></highlight></codeline>
</programlisting></para>
<para>To not override the cells while processing we need to create temporary matrix to save results and then move result to original matrix (<computeroutput>cur</computeroutput> and <computeroutput>next</computeroutput> in source file). Above calculations are written in <computeroutput>iter</computeroutput> function.</para>
<para>Now we can add a MPI to our algorithm. Let's split that matrix by MPI processes. Each process will compute part of global matrix.</para>
<para>For example: matrix 16 x 16 integers and 16 MPI processes gives submatrices of 4 x 4 integers for every process. We have to add to our global matrix one row above and below, column to the left and right to be able to compute border cells. In our example row on the top has some value (”x”) bigger than 0 (representing source of heat):</para>
<para><image type="html" name="heat_global_matrix.jpg"/>
</para>
<para>MPI processes need to exchange information about their local matrix border cells (communicate with neighbours to exchange row/column of matrix). Each MPI process will have a local matrix:</para>
<para><image type="html" name="heat_local_matrix.jpg"/>
</para>
<para>All the communications instructions are written in <computeroutput>exchange</computeroutput> function.</para>
</sect1>
<sect1 id="PDI_example_1pdi_integration">
<title>PDI integration</title>
<para>Now, when we know the algorithm, we can focus on analysing <computeroutput>decl_hdf5.yaml</computeroutput> specification tree. Fisrt 3 maps defined will not be seen to PDI: <programlisting filename=".yaml"><codeline><highlight class="normal">duration:<sp/>0.75</highlight></codeline>
<codeline><highlight class="normal">datasize:<sp/>[60,<sp/>12]</highlight></codeline>
<codeline><highlight class="normal">parallelism:<sp/>{<sp/>height:<sp/>3,<sp/>width:<sp/>1<sp/>}</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para><computeroutput>duration</computeroutput> is the value in seconds how long the application will run.</para>
</listitem><listitem><para><computeroutput>datasize</computeroutput> is size of our global matrix.</para>
</listitem><listitem><para><computeroutput>parallelism</computeroutput> defines the number of MPI processes in each dimension.</para>
</listitem></itemizedlist>
</para>
<para>Next, we have defined <computeroutput>data</computeroutput> and <computeroutput>metadata</computeroutput>: <programlisting filename=".yaml"><codeline><highlight class="normal">pdi:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>iter:<sp/><sp/><sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dsize:<sp/><sp/>{<sp/>size:<sp/>2,<sp/>type:<sp/>array,<sp/>subtype:<sp/>int<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>psize:<sp/><sp/>{<sp/>size:<sp/>2,<sp/>type:<sp/>array,<sp/>subtype:<sp/>int<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pcoord:<sp/>{<sp/>size:<sp/>2,<sp/>type:<sp/>array,<sp/>subtype:<sp/>int<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>main_field:<sp/>{<sp/>size:<sp/>[<sp/>'$dsize[0]',<sp/>'$dsize[1]'<sp/>],<sp/>type:<sp/>array,<sp/>subtype:<sp/>double<sp/>}</highlight></codeline>
</programlisting></para>
<para>In source file we will extract the <computeroutput>pdi</computeroutput> map and pass it as PDI_init argument.<itemizedlist>
<listitem><para><computeroutput>iter</computeroutput> will hold the current iteration number.</para>
</listitem><listitem><para><computeroutput>dsize</computeroutput> will hold the size of local matrix of each MPI process.</para>
</listitem><listitem><para><computeroutput>psize</computeroutput> will hold number of processes in dimensions.</para>
</listitem><listitem><para><computeroutput>pcoord</computeroutput> will hold coordinates for each process.</para>
</listitem><listitem><para><computeroutput>main_filed</computeroutput> is the local matrix for each process.</para>
</listitem></itemizedlist>
</para>
<para>Let's take a closer look at C source code.</para>
<para><programlisting filename=".C"><codeline><highlight class="normal"><ref refid="group__init__final_1ga3dc660be40c93c169337e3d2692b2ed0" kindref="member">PDI_init</ref>(PC_get(conf,<sp/></highlight><highlight class="stringliteral">".pdi"</highlight><highlight class="normal">));</highlight></codeline>
</programlisting></para>
<para>As mentioned before, we extract the <computeroutput>pdi</computeroutput> subtree and pass it to PDI_init.</para>
<para>We did not defined <computeroutput>mpi_comm</computeroutput> data in yaml, so this line will have no effect: <programlisting filename=".C"><codeline><highlight class="normal"><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"mpi_comm"</highlight><highlight class="normal">,<sp/>&amp;main_comm,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a5cf752cb5cd43b4ae3d7590af61c9939" kindref="member">PDI_INOUT</ref>);</highlight></codeline>
</programlisting></para>
<para>The same goes for all PDI calls with data we didn't defined.</para>
<para><programlisting filename=".C"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dsize[2];</highlight></codeline>
<codeline><highlight class="normal">PC_int(PC_get(conf,<sp/></highlight><highlight class="stringliteral">".datasize[0]"</highlight><highlight class="normal">),<sp/>&amp;longval);<sp/>dsize[0]<sp/>=<sp/>longval;</highlight></codeline>
<codeline><highlight class="normal">PC_int(PC_get(conf,<sp/></highlight><highlight class="stringliteral">".datasize[1]"</highlight><highlight class="normal">),<sp/>&amp;longval);<sp/>dsize[1]<sp/>=<sp/>longval;</highlight></codeline>
</programlisting></para>
<para>Here we are reading global matrix size from specification tree. Similar with parallelism and duration.</para>
<para>After calculating the local matrix sizes and coordinates, we expose them: <programlisting filename=".C"><codeline><highlight class="normal"><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"dsize"</highlight><highlight class="normal">,<sp/>dsize,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"psize"</highlight><highlight class="normal">,<sp/>psize,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"pcoord"</highlight><highlight class="normal">,<sp/>pcoord,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
</programlisting></para>
<para>At the beginning of each iteration, we call multiexpose: <programlisting filename=".C"><codeline><highlight class="normal"><ref refid="group__hl__annotation_1gae5c670b378e423e3083122f62c1f0a59" kindref="member">PDI_multi_expose</ref>(</highlight><highlight class="stringliteral">"newiter"</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">"iter"</highlight><highlight class="normal">,<sp/>&amp;ii,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a5cf752cb5cd43b4ae3d7590af61c9939" kindref="member">PDI_INOUT</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">"main_field"</highlight><highlight class="normal">,<sp/>cur,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a5cf752cb5cd43b4ae3d7590af61c9939" kindref="member">PDI_INOUT</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
</programlisting></para>
<para>Above instruction will share <computeroutput>iter</computeroutput> and <computeroutput>main_field</computeroutput>, call <computeroutput>newiter</computeroutput> event and then reclaim <computeroutput>main_field</computeroutput> and <computeroutput>iter</computeroutput>. This is the place when plugins will read/write our data.</para>
<para>We have covered the logic behind the PDI example. Now you can start the <ref refid="Hands_on" kindref="compound">Hands-on tutorial</ref>. </para>
</sect1>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Hands_on" kind="page">
    <compoundname>Hands_on</compoundname>
    <title>Hands-on tutorial</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="Hands_on_1autotoc_md4">
<title>Setup</title>
<para><simplesect kind="warning"><para>You need to <ulink url="Installation.html">install</ulink> PDI before proceeding with this tutorial.</para>
</simplesect>
After PDI <ulink url="Installation.html">is installed</ulink>, you can proceed with getting the sources for the hands-on tutorial from <ulink url="https://github.com/pdidev/tutorial">github</ulink>.</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">git<sp/>clone<sp/>https://github.com/pdidev/tutorial.git</highlight></codeline>
</programlisting></para>
<para>Before compilation, configure the tutorial by detecting all dependencies: <programlisting filename=".bash"><codeline><highlight class="normal">cd<sp/>tutorial</highlight></codeline>
<codeline><highlight class="normal">pdirun<sp/>cmake<sp/>.</highlight></codeline>
</programlisting></para>
<para>Now you're ready to work, <bold>good luck</bold>!</para>
</sect1>
<sect1 id="Hands_on_1autotoc_md5">
<title>Tutorial</title>
<para>For each exercise, once you've modified it, you can compile it by running the following command: <programlisting filename=".bashPDI"><codeline><highlight class="normal">Ex4.<sp/>Writing<sp/>some<sp/>real<sp/>data</highlight></codeline>
<codeline><highlight class="normal">make<sp/>ex?</highlight></codeline>
</programlisting></para>
<para>Where <computeroutput>?</computeroutput> is the number of the exercise.</para>
<para>Then, you can run it with the following command: <programlisting filename=".bash"><codeline><highlight class="normal">pdirun<sp/>mpirun<sp/>-n<sp/>1<sp/>./ex?</highlight></codeline>
</programlisting></para>
<para>Where <computeroutput>?</computeroutput> is again the number of the exercise.</para>
<sect2 id="Hands_on_1autotoc_md6">
<title>Ex1. Getting started</title>
<para>Ex1. implements a simple heat equation solver using an explicit forward finite difference scheme parallelized with MPI as described in the <ulink url="PDI_example.html">PDI example</ulink>. If you want to better understand what's going on, you should read this description before continuing.</para>
<para>In the exercises however, PDI will only be used to decouple I/O operations. There is no need to fully dive in the core of the solver implemented in the <computeroutput>iter</computeroutput> and <computeroutput>exchange</computeroutput> functions. The specification tree in the <computeroutput>.yml</computeroutput> files and the <computeroutput>main</computeroutput> function are the locations where all the I/O-related aspects will be handled and the only ones you will actually need to fully understand or modify.</para>
<para><itemizedlist>
<listitem><para>Examine the source code, compile it and run it. There is no input/output operations in the code yet, so you can not see any result.</para>
</listitem></itemizedlist>
</para>
<para>This example uses the <ulink url="https://github.com/pdidev/paraconf">paraconf library</ulink> to read its parameters in <ulink url="https://yaml.org">yaml format</ulink> from the <computeroutput>ex1.yml</computeroutput> file. If you've never heard about yaml, have a quick look at <ulink url="First_steps.html#Yaml">this example</ulink>.</para>
<para><itemizedlist>
<listitem><para>Play with and understand the code parameters in <computeroutput>ex1.yml</computeroutput>.</para>
</listitem><listitem><para>Set values in <computeroutput>ex1.yml</computeroutput> to be able to run the code with 3 MPI processes.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="Hands_on_1autotoc_md7">
<title>Ex2. Now with some PDI</title>
<para>Ex2. is the same code as ex1. with PDI calls added in main function. The PDI <ulink url="tra`PDIce_plugin.html">Trace plugin</ulink> is used to trace PDI calls.</para>
<para><itemizedlist>
<listitem><para>Add the required <computeroutput><ref refid="group__annotation_1ga34e34cede8627c47c07e6ede997e37fe" kindref="member">PDI_share</ref></computeroutput> and <computeroutput><ref refid="group__annotation_1gabf58b7c146cbf7e3341245f60cec0f7e" kindref="member">PDI_reclaim</ref></computeroutput> calls to match the output of <computeroutput>ex2.log</computeroutput> file. Change only the <computeroutput>ex2.c</computeroutput> file. The calls for now don't need to make any logic, just match output to the <computeroutput>ex2.log</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="attention"><para>Notice that some share/reclaim pairs come one after the other while others are interlaced. Is one better than the other? If you do not know the answer to this question, please wait until Ex5. :)</para>
</simplesect>
</para>
</sect2>
<sect2 id="Hands_on_1autotoc_md8">
<title>Ex3. HDF5 through PDI</title>
<para>Let's take the code from ex2. and make it output some HDF5 data. No need to touch the C code here, the PDI yaml file should be enough. The <ulink url="trace_plugin.html">Trace plugin</ulink> was replaced by the <ulink url="Decl_HDF5_plugin.html">Dec'HDF5 plugin</ulink>.</para>
<para>Fill 2 sections in the yaml file:<orderedlist>
<listitem><para>The <computeroutput>data</computeroutput> section to indicate to PDI the type of the fields that are exposed.</para>
</listitem><listitem><para>The <computeroutput>decl_hdf5</computeroutput> for the configuration of <ulink url="Decl_HDF5_plugin.html">Dec'HDF5 plugin</ulink>.</para>
</listitem></orderedlist>
</para>
<para>Only <computeroutput>dsize</computeroutput> is written as of now, let's add <computeroutput>psize</computeroutput> and <computeroutput>pcoord</computeroutput> to match the content expected described in <computeroutput>ex3.href 5dump</computeroutput> (use <computeroutput>h5dump</computeroutput> command to see content of HDF5 file).</para>
<para><simplesect kind="warning"><para>If you rerun the exercise, remember to delete your old <computeroutput>ex3.h5</computeroutput> file, because the data will not be overwritten.</para>
</simplesect>
</para>
</sect2>
<sect2 id="Hands_on_1autotoc_md9">
<title>Ex4. Writing some real data</title>
<para>In this exercise each MPI process will write its local matrix to separete HDF5 files. Touch only the yaml file again.</para>
<para>This time write the real 2D data contained in <computeroutput>main_field</computeroutput> using 2 MPI processes.</para>
<para>Notice that a list to write multiple files was used in the decl_hdf5 section instead of a single mapping as before.</para>
<para>Unlike the other fields manipulated until now, the type of <computeroutput>main_field</computeroutput> is not fully known, its size is dynamic. By moving other fields in the <computeroutput>metadata</computeroutput> section, you can reference them from "$ expressions" in the configuration file. This can be used to specify a dynamic size for <computeroutput>main_field</computeroutput>.</para>
<para>Unlike the other fields manipulated until now, <computeroutput>main_field</computeroutput> is exposed multiple times. In order not to overwrite it every time it is exposed, you can add a <computeroutput>when</computeroutput> condition to restrict its output. Only write <computeroutput>main_field</computeroutput> at the second iteration (when <computeroutput>ii==1</computeroutput>).</para>
<para>Set the parallelism degree to 2 in height and try to match the expected content described in <computeroutput>ex4.h5dump</computeroutput>.</para>
</sect2>
<sect2 id="Hands_on_1autotoc_md10">
<title>Ex5. Introducing events</title>
<para>In ex4, there were 2 pieces of data to <computeroutput>ex4-data*.h5</computeroutput>, but the file is opened and closed for each and every write. Since Decl'HDF5 only sees the data appear one after the other, it does not keep the file open. Since <computeroutput>ii</computeroutput> and <computeroutput>main_field</computeroutput> are shared in an interlaced way, they are both available at the same time and could be written without opening the file twice. You have to use events for that.</para>
<para>There are 3 main tasks in this exercise:</para>
<para><orderedlist>
<listitem><para>Call PDI event named <computeroutput>loop</computeroutput> when both <computeroutput>ii</computeroutput> and <computeroutput>main_field</computeroutput> are shared. With the <ulink url="trace_plugin.html">Trace plugin</ulink>, check that the event is indeed triggered at the expected time as described in <computeroutput>ex5.log</computeroutput>.</para>
</listitem><listitem><para>Use the <computeroutput>on_event</computeroutput> mechanism to trigger the write of <computeroutput>ii</computeroutput> and <computeroutput>main_field</computeroutput>. This mechanism can be combined with a <computeroutput>when</computeroutput> directive, in that case the write is only executed when both mechanisms agree.</para>
</listitem><listitem><para>Also notice the extended syntax that make it possible to write data to a dataset with a name different from the data in PDI. Use this mechanism to write main_field at iterations 1 and 2, in two distinct groups <computeroutput>iter1</computeroutput> and <computeroutput>iter2</computeroutput>.</para>
</listitem></orderedlist>
</para>
<para>Match the content as expected in <computeroutput>ex5.h5dump</computeroutput>.</para>
</sect2>
<sect2 id="Hands_on_1autotoc_md11">
<title>Ex6. Simplifying the code</title>
<para>As you can notice, the PDI code is quite redundant. In this exercise, you will use <computeroutput><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref></computeroutput> and <computeroutput><ref refid="group__hl__annotation_1gae5c670b378e423e3083122f62c1f0a59" kindref="member">PDI_multi_expose</ref></computeroutput> to simplify the code while keeping the exact same behaviour.</para>
<para>There are lots of matched <computeroutput><ref refid="group__annotation_1ga34e34cede8627c47c07e6ede997e37fe" kindref="member">PDI_share</ref></computeroutput>/<computeroutput><ref refid="group__annotation_1gabf58b7c146cbf7e3341245f60cec0f7e" kindref="member">PDI_reclaim</ref></computeroutput> in the code. Replace these by <computeroutput><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref></computeroutput> that is the exact equivalent of a <computeroutput><ref refid="group__annotation_1ga34e34cede8627c47c07e6ede997e37fe" kindref="member">PDI_share</ref></computeroutput> followed by a matching <computeroutput><ref refid="group__annotation_1gabf58b7c146cbf7e3341245f60cec0f7e" kindref="member">PDI_reclaim</ref></computeroutput>.</para>
<para>This replacement is not possible for interlaced <computeroutput><ref refid="group__annotation_1ga34e34cede8627c47c07e6ede997e37fe" kindref="member">PDI_share</ref></computeroutput>/<computeroutput><ref refid="group__annotation_1gabf58b7c146cbf7e3341245f60cec0f7e" kindref="member">PDI_reclaim</ref></computeroutput> with events in the middle. This case is however handled by <computeroutput><ref refid="group__hl__annotation_1gae5c670b378e423e3083122f62c1f0a59" kindref="member">PDI_multi_expose</ref></computeroutput> call that exposes all data, then triggers an event and finally does all the reclaim in reverse order. Replace the remaining <computeroutput><ref refid="group__annotation_1ga34e34cede8627c47c07e6ede997e37fe" kindref="member">PDI_share</ref></computeroutput>/<computeroutput><ref refid="group__annotation_1gabf58b7c146cbf7e3341245f60cec0f7e" kindref="member">PDI_reclaim</ref></computeroutput> by <computeroutput><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref></computeroutput>s and <computeroutput><ref refid="group__hl__annotation_1gae5c670b378e423e3083122f62c1f0a59" kindref="member">PDI_multi_expose</ref></computeroutput>s. There is one <computeroutput><ref refid="group__annotation_1ga34e34cede8627c47c07e6ede997e37fe" kindref="member">PDI_share</ref></computeroutput>/<computeroutput><ref refid="group__annotation_1gabf58b7c146cbf7e3341245f60cec0f7e" kindref="member">PDI_reclaim</ref></computeroutput> you can not replace.</para>
<para>Touch only the C file in this exercise.</para>
<para>Ensure that your code keeps the exact same behaviour by comparing its trace to <computeroutput>ex6.log</computeroutput>.</para>
</sect2>
<sect2 id="Hands_on_1autotoc_md12">
<title>Ex7. Writing a selection</title>
<para>In this exercise, you will only write a selection (part) of the data to the HDF5 file.</para>
<para>As you can notice, now the dataset is independantly described in the file. Use two directives to specify a selection from the data to write and a selection in the dataset where to write.</para>
<para><itemizedlist>
<listitem><para><computeroutput>memory_selection</computeroutput> tells what part to take from the data.</para>
</listitem><listitem><para><computeroutput>dataset_selection</computeroutput> tells where to write this part of data in file.</para>
</listitem></itemizedlist>
</para>
<para>Restrict the selection to the second line from the data and write it to a one-dimensional dataset in file.</para>
<para>Touch only the yaml file in this exercise.</para>
<para>Match the expected output described in <computeroutput>ex7.out</computeroutput>.</para>
<para>Here is an example: <programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>matrix:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>[8,8]}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>datasets:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrix:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>8}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory_selection:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/>[1,<sp/>8]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start:<sp/>[4,<sp/>0]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataset_selection:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/>8</highlight></codeline>
</programlisting></para>
<para>The graphical representation:</para>
<para><image type="html" name="PDI_hdf5_selection.jpg">graphical representation</image>
 <image type="latex" name="PDI_hdf5_selection.jpg">graphical representation</image>
 <image type="rtf" name="PDI_hdf5_selection.jpg">graphical representation</image>
 <image type="docbook" name="PDI_hdf5_selection.jpg">graphical representation</image>
</para>
</sect2>
<sect2 id="Hands_on_1autotoc_md13">
<title>Ex8. Writing an advanced selection</title>
<para>You can also add dimensions, write the 2D array excluding ghosts as a slab of a 3D dataset including a dimension for the time-iteration. Write iterations 1 to 3 inclusive into dimensions 0 to 2.</para>
<para>Touch only the yaml file in this exercise.</para>
<para>Match the expected output described in <computeroutput>ex8.h5dump</computeroutput>.</para>
<para>Here is an example: <programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>matrix:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>[8,8]}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>datasets:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrix:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>[3,<sp/>8,<sp/>8]}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory_selection:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/>[8,<sp/>8]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataset_selection:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/>[1,<sp/>8,<sp/>8]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start:<sp/>[$ii,<sp/>0,<sp/>0]</highlight></codeline>
</programlisting></para>
<para>And the graphical representation:</para>
<para><image type="html" name="PDI_hdf5_selection_advanced.jpg">graphical representation</image>
 <image type="latex" name="PDI_hdf5_selection_advanced.jpg">graphical representation</image>
 <image type="rtf" name="PDI_hdf5_selection_advanced.jpg">graphical representation</image>
 <image type="docbook" name="PDI_hdf5_selection_advanced.jpg">graphical representation</image>
</para>
</sect2>
<sect2 id="Hands_on_1autotoc_md14">
<title>Ex9. Going parallel</title>
<para>Running the current code in parallel should already work and yield one file per process containing the local data block. In this exercise you will write one single file with parallel HDF5 whose content should be independent from the number of processes used.</para>
<para>The <computeroutput>mpi plugin</computeroutput> was loaded to make sharing MPI communicators possible.</para>
<para>There are several tasks in this exercise:<orderedlist>
<listitem><para>Uncomment the <computeroutput>communicator</computeroutput> directive of the <ulink url="Decl_HDF5_plugin.html">Dec'HDF5 plugin</ulink> to switch to parallel I/O.</para>
</listitem><listitem><para>Change the file name so all processes open the same file.</para>
</listitem><listitem><para>Set the size of <computeroutput>main_field</computeroutput> in <computeroutput>datasets</computeroutput> tree to take the global matrix into account. Hint: use <computeroutput>psize</computeroutput>.</para>
</listitem><listitem><para>Ensure the dataset selection of each process does not overlap with the others. Hint: use <computeroutput>pcoord</computeroutput>.</para>
</listitem></orderedlist>
</para>
<para>Try to match the output from <computeroutput>ex9.out</computeroutput>, that should be independent from the number of processes used.</para>
<para>Touch only the yaml file in this exercise.</para>
<para>Here is graphical representation of the parallel I/O:</para>
<para><image type="html" name="PDI_hdf5_parallel.jpg">graphical representation of the parallel I/O</image>
 <image type="latex" name="PDI_hdf5_parallel.jpg">graphical representation of the parallel I/O</image>
 <image type="rtf" name="PDI_hdf5_parallel.jpg">graphical representation of the parallel I/O</image>
 <image type="docbook" name="PDI_hdf5_parallel.jpg">graphical representation of the parallel I/O</image>
</para>
</sect2>
</sect1>
<sect1 id="Hands_on_1autotoc_md15">
<title>What next ?</title>
<para>You can experiment with other <ulink url="Plugins.html">plugins</ulink>. Have a look at the <ulink url="https://gitlab.maisondelasimulation.fr/pdidev/pdi/-/tree/master/example">PDI examples</ulink>. </para>
</sect1>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Decl_HDF5_plugin" kind="page">
    <compoundname>Decl_HDF5_plugin</compoundname>
    <title>The Decl'HDF5 plugin</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><bold>WARNING</bold> This documentation is a work in progress and does not reflect the full Decl'HDF5 potential.</para>
<para>The Decl'HDF5 plugin enables one to read and write data from HDF5 files in a declarative way. Decl'HDF5 does not support the full HDF5 feature set but offers a simple declarative interface to access a large subset of it.</para>
<sect1 id="Decl_HDF5_plugin_1autotoc_md16">
<title>Configuration grammar</title>
<para>At its root, the Decl'HDF5 configuration is made of either a single <computeroutput>FILE_DESC</computeroutput> or a list of <computeroutput>FILE_DESC</computeroutput>s.</para>
<sect2 id="Decl_HDF5_plugin_1autotoc_md17">
<title>&lt;tt&gt;FILE_DESC&lt;/tt&gt;</title>
<para>A <computeroutput>FILE_DESC</computeroutput> specifies a list of actions to execute in one file. It is specified by a key/value map that contains at least the <computeroutput>file</computeroutput> key. Other keys are optional. The possible values for the keys are as follow:<itemizedlist>
<listitem><para><computeroutput>file</computeroutput>: a string that can contain $-expressions and specified the name of the file this <computeroutput>FILE_DESC</computeroutput> refers to.</para>
</listitem><listitem><para><computeroutput>write</computeroutput>: a <computeroutput>DATA_SECTION</computeroutput> that defaults to an empty one. This <computeroutput>DATA_SECTION</computeroutput> describes writes to execute.</para>
</listitem><listitem><para><computeroutput>write</computeroutput>: a <computeroutput>DATA_SECTION</computeroutput> that defaults to an empty one. This <computeroutput>DATA_SECTION</computeroutput> describes reads to execute.</para>
</listitem><listitem><para><computeroutput>on_event</computeroutput>: a string identifying an event when the whole file is accessed. If not specified, each data is written when it is exposed and the file is opened and closed every time.</para>
</listitem><listitem><para><computeroutput>when</computeroutput>: a $-expression specifying a default condition to test before executing the reads and writes of this <computeroutput>FILE_DESC</computeroutput>. This can be replaced by a more specific condition inside the <computeroutput>DATA_SECTION</computeroutput>.</para>
</listitem><listitem><para><computeroutput>communicator</computeroutput>: a $-expression referencing a MPI communicator to use for HDF5 parallel synchronized reads and writes. It defaults to MPI_COMM_SELF which stands for sequential writes. In case of data-triggered (vs. event-triggered) reads and writes, this can be replaced inside the <computeroutput>DATA_SECTION</computeroutput>.</para>
</listitem><listitem><para><computeroutput>datasets</computeroutput>: a key-value map associating a <ref refid="namespacePDI" kindref="compound">PDI</ref> type to string keys. Each string is the name of a dataset to create in the file on first access, with the type described in the value.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="Decl_HDF5_plugin_1autotoc_md18">
<title>&lt;tt&gt;DATA_SECTION&lt;/tt&gt;</title>
<para>The <computeroutput>DATA_SECTION</computeroutput> describes a set of I/O (read or write) to execute. A data section can take multiple forms:<itemizedlist>
<listitem><para>a list of strings, each being the name of a <ref refid="namespacePDI" kindref="compound">PDI</ref> data to write</para>
</listitem><listitem><para>a key-value map where each key is the name of a <ref refid="namespacePDI" kindref="compound">PDI</ref> data to write and the value is either a single <computeroutput>DATA_IO_DESC</computeroutput> or a list of <computeroutput>DATA_IO_DESC</computeroutput>s describing the I/O (read or write) to execute.</para>
</listitem></itemizedlist>
</para>
<para>The first case behaves as if each data had its <computeroutput>DATA_IO_DESC</computeroutput> specified with all default values.</para>
</sect2>
<sect2 id="Decl_HDF5_plugin_1autotoc_md19">
<title>&lt;tt&gt;DATA_IO_DESC&lt;/tt&gt;</title>
<para>A <computeroutput>DATA_IO_DESC</computeroutput> is a key-velue map describing one I/O (read or write) to execute. All keys are optional and have default values. The possible values for the keys are as follow:<itemizedlist>
<listitem><para><computeroutput>dataset</computeroutput>: a $-expression identifying the name of the dataset to access in the file. If not specified this defaults to the name of the data. On writing, if the dataset does not exist in the file and is not specified in the <computeroutput>FILE_DESC</computeroutput> then a dataset with the same size as the memory selection is automatically created.</para>
</listitem><listitem><para><computeroutput>when</computeroutput>: a $-expression specifying a condition to test before executing the I/O operation (read or write). This defaults to the value specified in the <computeroutput>FILE_DESC</computeroutput> if present or to unconditional I/O otherwise.</para>
</listitem><listitem><para><computeroutput>communicator</computeroutput>: a $-expression referencing a MPI communicator to use for HDF5 parallel synchronized I/O operation (read or write). Specifying communicator at this level is incompatible with event-triggered (vs. data-triggered) This defaults to the value specified in the <computeroutput>FILE_DESC</computeroutput> if present or to sequential (MPI_COMM_SELF) I/O otherwise.</para>
</listitem><listitem><para><computeroutput>memory_selection</computeroutput>: a <computeroutput>SELECTION_DESC</computeroutput> specifying the selection of data in memory to read or write. It defaults to selecting the whole data.</para>
</listitem><listitem><para><computeroutput>dataset_selection</computeroutput>: a <computeroutput>SELECTION_DESC</computeroutput> specifying the selection of data in the file data to write or read. This is only valid if the</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="Decl_HDF5_plugin_1autotoc_md20">
<title>&lt;tt&gt;SELECTION_DESC&lt;/tt&gt;</title>
<para>A <computeroutput>SELECTION_DESC</computeroutput> is a key-value map that describes the selection of a subset of data from a larger set. All keys are optional and have default values. The possible values for the keys are as follow:<itemizedlist>
<listitem><para><computeroutput>size</computeroutput> is either a single $-expression or a list of $-expressions. It describes the size of the selection in each dimension. If not specified, it defaults to the dimension of the whole data.</para>
</listitem><listitem><para><computeroutput>start</computeroutput> is either a single $-expression or a list of $-expressions. It describes the number of point to skip in each dimension. If not specified it defaults to 0 in all dimensions. In practice, it can only be specified if <computeroutput>size</computeroutput> is also.</para>
</listitem></itemizedlist>
</para>
</sect2>
</sect1>
<sect1 id="Decl_HDF5_plugin_1autotoc_md21">
<title>full configuration example</title>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">metadata:<sp/>#<sp/>small<sp/>values<sp/>for<sp/>which<sp/>PDI<sp/>keeps<sp/>a<sp/>copy</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>width:<sp/><sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>per<sp/>proc.<sp/>width<sp/>including<sp/>ghost</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>height:<sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>per<sp/>proc.<sp/>height<sp/>including<sp/>ghost</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pwidth:<sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>nb<sp/>proc.<sp/>in<sp/>the<sp/>x<sp/>dim</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pheight:<sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>nb<sp/>proc.<sp/>in<sp/>the<sp/>y<sp/>dim</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>iter:<sp/><sp/><sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>curent<sp/>iteration<sp/>id</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>coord:<sp/><sp/><sp/>{<sp/>type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>2<sp/>}<sp/>#<sp/>coordinate<sp/>of<sp/>the<sp/>process<sp/>as<sp/>[x,<sp/>y]</highlight></codeline>
<codeline><highlight class="normal">data:<sp/><sp/><sp/><sp/><sp/>#<sp/>values<sp/>that<sp/>are<sp/>not<sp/>copied<sp/>by<sp/>PDI</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>main_field:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>subtype:<sp/>double</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size:<sp/>[$width,<sp/>$height]</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>mpi:<sp/>#<sp/>loading<sp/>MPI_Comm<sp/>predefines<sp/>(e.g.<sp/>$MPI_COMM_WORLD)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>decl_hdf5:<sp/>#<sp/>a<sp/>list<sp/>of<sp/>file<sp/>to<sp/>write<sp/>to<sp/>(can<sp/>be<sp/>a<sp/>single<sp/>element)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>file:<sp/>data${coord[0]}x${coord[1]}.h5<sp/>#<sp/>the<sp/>file<sp/>in<sp/>which<sp/>to<sp/>write<sp/>the<sp/>data<sp/>(required)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_event:<sp/>newiter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>the<sp/>event<sp/>that<sp/>triggers<sp/>these<sp/>actions<sp/>(default:<sp/>trigger<sp/>on<sp/>data<sp/>expose)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>when:<sp/>"$iter&gt;0<sp/>&amp;<sp/>$iter&lt;11"<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>a<sp/>condition<sp/>when<sp/>to<sp/>actually<sp/>trigger<sp/>the<sp/>actions<sp/>(default:<sp/>always<sp/>true)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>communicator:<sp/>$MPI_COMM_SELF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>the<sp/>MPI<sp/>communicator<sp/>used<sp/>for<sp/>HDF5<sp/>parallel<sp/>synchronized<sp/>write<sp/>(default:<sp/>$MPI_COMM_SELF,<sp/>sequential<sp/>write)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>datasets:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>a<sp/>list<sp/>of<sp/>datasets<sp/>inside<sp/>the<sp/>file<sp/>created<sp/>on<sp/>first<sp/>access</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data/array:<sp/>#<sp/>a<sp/>dataset<sp/>name,<sp/>datasets<sp/>referenced<sp/>but<sp/>not<sp/>defined<sp/>are<sp/>created<sp/>just<sp/>big<sp/>enough<sp/>to<sp/>fit<sp/>the<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtype:<sp/>double<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>type<sp/>of<sp/>the<sp/>data<sp/>in<sp/>the<sp/>dataset</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/>[10,<sp/>$width-2,<sp/>$width-2]<sp/>#<sp/>size<sp/>of<sp/>the<sp/>dataset</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>write:<sp/>#<sp/>a<sp/>list<sp/>or<sp/>map<sp/>of<sp/>data<sp/>to<sp/>write<sp/>(default:<sp/>empty)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>main_field:<sp/>#<sp/>name<sp/>of<sp/>the<sp/>data,<sp/>it<sp/>contains<sp/>either<sp/>a<sp/>list<sp/>or<sp/>a<sp/>single<sp/>write<sp/>to<sp/>execute</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>dataset:<sp/>data/array<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>a<sp/>dataset<sp/>name<sp/>(default:<sp/>the<sp/>data<sp/>name)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>when:<sp/>"$iter&gt;0&amp;$iter&lt;11"<sp/>#<sp/>an<sp/>additional<sp/>condition<sp/>when<sp/>to<sp/>actually<sp/>trigger<sp/>the<sp/>actions<sp/>(default:<sp/>always<sp/>true)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>communicator:<sp/>$MPI_COMM_SELF<sp/><sp/><sp/>#<sp/>the<sp/>MPI<sp/>communicator<sp/>used<sp/>for<sp/>HDF5<sp/>parallel<sp/>synchronized<sp/>write<sp/>(default:<sp/>that<sp/>of<sp/>the<sp/>file)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory_selection:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/><sp/>[$width-2,<sp/>$height-2]<sp/>#<sp/>number<sp/>of<sp/>elements<sp/>to<sp/>transfer<sp/>in<sp/>each<sp/>dimension<sp/>(default:<sp/>size<sp/>of<sp/>the<sp/>full<sp/>data)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start:<sp/>[1,<sp/>1]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>coordinate<sp/>of<sp/>the<sp/>start<sp/>point<sp/>in<sp/>memory<sp/>relative<sp/>to<sp/>the<sp/>shared<sp/>data<sp/>(default:<sp/>0<sp/>in<sp/>each<sp/>dimensions)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataset_selection:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/><sp/>[1,<sp/>$width-2,<sp/>$width-2]<sp/>#<sp/>number<sp/>of<sp/>elements<sp/>to<sp/>transfer<sp/>in<sp/>each<sp/>dimension,<sp/>must<sp/>amount<sp/>to<sp/>the<sp/>same<sp/>number<sp/>as<sp/>the<sp/>memory<sp/>selection<sp/>(default:<sp/>size<sp/>of<sp/>memory<sp/>slab)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start:<sp/>[$iter,<sp/>0,<sp/>0]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>coordinate<sp/>of<sp/>the<sp/>start<sp/>point<sp/>in<sp/>the<sp/>file<sp/>relative<sp/>to<sp/>the<sp/>dataset<sp/>(default:<sp/>0<sp/>in<sp/>each<sp/>dimensions)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>read:<sp/>#<sp/>a<sp/>list<sp/>or<sp/>map<sp/>of<sp/>data<sp/>to<sp/>read,<sp/>similar<sp/>to<sp/>write<sp/>(default:<sp/>empty)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>another_value</highlight></codeline>
</programlisting> </para>
</sect1>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="FlowVR_plugin" kind="page">
    <compoundname>FlowVR_plugin</compoundname>
    <title>The FlowVR plugin</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The <ulink url="http://flowvr.sourceforge.net">FlowVR</ulink> plugin lets you write FlowVR modules without knowing any specific FlowVR API calls. Properly created PDI configuration file allows you to care only about proper input/output calls, but this plugin does not support the full FlowVR feature set.</para>
<sect1 id="FlowVR_plugin_1configuration">
<title>Configuration elements</title>
<sect2 id="FlowVR_plugin_1flowvr_tree">
<title>FlowVR plugin tree</title>
<para>The root of FlowVR plugin configuration (named <computeroutput>flowvr</computeroutput>), is a dictionary that contains the following keys:<itemizedlist>
<listitem><para><ref refid="FlowVR_plugin_1component_node" kindref="member">component</ref></para>
</listitem><listitem><para><ref refid="FlowVR_plugin_1wait_on_data_node" kindref="member">wait_on_data</ref> (<emphasis>recommended</emphasis>)</para>
</listitem><listitem><para><ref refid="FlowVR_plugin_1wait_on_node" kindref="member">wait_on</ref> (<emphasis>optional</emphasis>)</para>
</listitem><listitem><para><ref refid="FlowVR_plugin_1status_node" kindref="member">status</ref> (<emphasis>optional</emphasis>)</para>
</listitem><listitem><para><ref refid="FlowVR_plugin_1abort_on_node" kindref="member">abort_on</ref> (<emphasis>optional</emphasis>)</para>
</listitem><listitem><para><ref refid="FlowVR_plugin_1init_on_node" kindref="member">init_on</ref> (<emphasis>optional</emphasis>)</para>
</listitem><listitem><para><ref refid="FlowVR_plugin_1input_ports" kindref="member">input_ports</ref> (<emphasis>optional</emphasis>)</para>
</listitem><listitem><para><ref refid="FlowVR_plugin_1output_ports" kindref="member">output_ports</ref> (<emphasis>optional</emphasis>)</para>
</listitem></itemizedlist>
</para>
<sect3 id="FlowVR_plugin_1component_node">
<title>component</title>
<para>For now only available component is <computeroutput>module</computeroutput>, but this can be expanded to <computeroutput>filter</computeroutput> and <computeroutput>synchronizer</computeroutput> in the future. Configuration example:</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>component:<sp/>module</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="FlowVR_plugin_1wait_on_data_node">
<title>wait_on_data</title>
<para>The plugin will call <computeroutput>wait</computeroutput> funciton every time given descriptors will be shared with <computeroutput>PDI_IN</computeroutput> access direction. This descriptor must be an integer type and the status returned from this call will be written as a response. Configuration example:</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wait_desc:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on_data:<sp/>wait_desc</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="FlowVR_plugin_1wait_on_node">
<title>wait_on</title>
<para>Defines on which events the plugin calls the <computeroutput>wait</computeroutput> function. The value can be either single event name or the array of events names (both examples presented below). This method of calling <computeroutput>wait</computeroutput> should be avoided if possible, because it's not returning the wait status. Configuration examples:</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on:<sp/>"wait_event"</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on:<sp/>["wait_event_1",<sp/>"wait_event_2"]</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="FlowVR_plugin_1status_node">
<title>status</title>
<para>PDI will copy the status of the module to the given descriptor. The same as the <computeroutput>wait_on</computeroutput> it can be a single name or an array of names. Configuration example:</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wait_desc:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>status_desc:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on_data:<sp/>wait_desc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>status:<sp/>status_desc</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="FlowVR_plugin_1abort_on_node">
<title>abort_on</title>
<para>Defines on which events the plugin calls the <computeroutput>abort</computeroutput> function which will stop the flowvr application. The value can be either single event name or the array of events names. Configuration examples:</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wait_desc:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on_data:<sp/>wait_desc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>abort_on:<sp/>"abort_event"</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="FlowVR_plugin_1init_on_node">
<title>init_on</title>
<para>Defining this subtree tells PDI that the plugin should be initialized not on <computeroutput>PDI_init</computeroutput>, but on given event.</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wait_desc:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on_data:<sp/>wait_desc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>init_on:<sp/>"init_event"</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="FlowVR_plugin_1parallel_node">
<title>parallel</title>
<para>This node can be for reading rank and size of the world, but also can be for setting this values. <computeroutput>get_rank</computeroutput> will copy process's rank to given descriptor on share, <computeroutput>get_size</computeroutput> will save the world size the same way. Example: <programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wait_desc:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rank_desc:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_desc:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on_data:<sp/>wait_desc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>parallel:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>get_rank:<sp/>rank_desc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>get_size:<sp/>size_desc</highlight></codeline>
</programlisting></para>
<para>Values (use <computeroutput>$</computeroutput> expression) from descriptors defined in <computeroutput>set_rank</computeroutput> and <computeroutput>set_size</computeroutput> will be passed to flowvr and set the environment. Setting this parameters must occur before plugin initialization. For this you need to use <computeroutput>init_on</computeroutput> event and call this event after setting rank and size.</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wait_desc:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rank_desc:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_desc:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on_data:<sp/>wait_desc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>parallel:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_rank:<sp/>$rank_desc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_size:<sp/>$size_desc</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="FlowVR_plugin_1several_modules">
<title>Several modules</title>
<para>Single program can run several modules at once. To make it work just create array of modules in <computeroutput>flowvr</computeroutput> tree. Configuration example:</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wait_1:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wait_2:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on_data:<sp/>wait_1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>component:<sp/>module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wait_on_data:<sp/>wait_2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
</programlisting></para>
</sect3>
</sect2>
<sect2 id="FlowVR_plugin_1ports">
<title>Ports</title>
<sect3 id="FlowVR_plugin_1input_ports">
<title>input_ports</title>
<para>Input ports are defined in <computeroutput>input_ports</computeroutput> tree. Each port is defined by name and <ref refid="FlowVR_plugin_1message" kindref="member">Message</ref> it will receive. You can add <computeroutput>event_port: true</computeroutput> to define this as event port (non-blocking).</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>input_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name_1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name_2:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_port:<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="FlowVR_plugin_1output_ports">
<title>output_ports</title>
<para>Output ports are defined in <computeroutput>output_ports</computeroutput> tree. Each port is defined by name and <ref refid="FlowVR_plugin_1message" kindref="member">Message</ref> it will send. <programlisting filename=".yaml"><codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name_1:<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name_2:<sp/>...</highlight></codeline>
</programlisting></para>
</sect3>
</sect2>
<sect2 id="FlowVR_plugin_1message">
<title>Message</title>
<para>Flowvr message consists of payload and stamps. The <computeroutput>payload</computeroutput> is defined by user by a specific key in port definition:</para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>message type  </para>
</entry></row>
<row>
<entry thead="no"><para>"data" </para>
</entry><entry thead="no"><para><ref refid="FlowVR_plugin_1data_payload" kindref="member">Data payload</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>"chunks" </para>
</entry><entry thead="no"><para><ref refid="FlowVR_plugin_1chunks_payload" kindref="member">Chunk payload</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>"event_button" </para>
</entry><entry thead="no"><para><ref refid="FlowVR_plugin_1button_payload" kindref="member">Event button payload</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para>"event_mouse" </para>
</entry><entry thead="no"><para><ref refid="FlowVR_plugin_1mouse_payload" kindref="member">Event mouse payload</ref>  </para>
</entry></row>
</table>
</para>
<para>If none of the message type will be given, plugin will create a STAMP port (message has no payload). <computeroutput>stamps</computeroutput> are described in <ref refid="FlowVR_plugin_1stamp" kindref="member">Stamp</ref> section.</para>
<sect3 id="FlowVR_plugin_1data_payload">
<title>Data payload</title>
<para>Requires <computeroutput>data</computeroutput> key in a port tree. This configuration means that module will send simple buffer. The plugin doesn't know the type of sending data. The value of <computeroutput>data</computeroutput> key is the name of the descriptor where:</para>
<para><itemizedlist>
<listitem><para>for input port - FlowVR plugin will write to received data</para>
</listitem><listitem><para>for output port - FlowVR plugin will read from to send data</para>
</listitem></itemizedlist>
</para>
<para>Example of <computeroutput>data</computeroutput> in output port:</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data_desc:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>32}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>data_desc</highlight></codeline>
</programlisting></para>
<para>The user can not always predict how many data will receive. In this case <computeroutput>size</computeroutput> node type must be a name of metadata where to write the size of received payload. This metadata will hold the size of received array. The <computeroutput>size</computeroutput> property of descriptor should be divided by size of single element. Example of receiving unknown payload size:</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>received_size<sp/>:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data_descriptor_name:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>$received_size/4}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>input_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>port_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>data_descriptor_name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/>received_size</highlight></codeline>
</programlisting></para>
<para>In case that you want to send only a part of the data from descriptor you can specify it in <computeroutput>copy_data_selection</computeroutput> tree defining datatype the same way as for descriptors. Simple example:</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data_descriptor_name:<sp/><sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>[32,<sp/>32]}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>data_descriptor_name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copy_data_selection:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtype:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/>[32,<sp/>32]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subsize:<sp/>[30,<sp/>30]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start:<sp/>[1,<sp/>1]</highlight></codeline>
</programlisting></para>
</sect3>
</sect2>
<sect2 id="FlowVR_plugin_1chunks_payload">
<title>Chunk payload</title>
<para>Requires <computeroutput>chunks</computeroutput> key in a port tree. This configuration means that module will send several buffers in one payload. Value of the <computeroutput>chunks</computeroutput> key is the list of <ref refid="FlowVR_plugin_1data_payload" kindref="member">Data payload</ref>.</para>
<para><hruler/>
 WARNING</para>
<para>After each wait, the first access to the any descriptor (that belongs to the chunks) will allocate the memory for the all descriptors. This means that all sizes (if stored as metadata) should be set before first access to any of the descriptors.</para>
<para><hruler/>
</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>chunk_1_name:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>chunk_2_name:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>255}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>chunk_3_name:<sp/>float</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chunks:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>data:<sp/>chunk_1_name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>data:<sp/>chunk_2_name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>data:<sp/>chunk_3_name</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="FlowVR_plugin_1button_payload">
<title>Event button payload</title>
<para>Requires <computeroutput>event_button</computeroutput> key in a port tree. The payload holds the values of the keyboard keys pressed during iteration.</para>
<para>The full list of predefined keys:</para>
<para><table rows="22" cols="2"><row>
<entry thead="yes"><para>key in configuration </para>
</entry><entry thead="yes"><para>key on keyboard  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_F1 </para>
</entry><entry thead="no"><para>F1  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_F2 </para>
</entry><entry thead="no"><para>F2  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_F3 </para>
</entry><entry thead="no"><para>F3  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_F4 </para>
</entry><entry thead="no"><para>F4  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_F5 </para>
</entry><entry thead="no"><para>F5  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_F6 </para>
</entry><entry thead="no"><para>F6  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_F7 </para>
</entry><entry thead="no"><para>F7  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_F8 </para>
</entry><entry thead="no"><para>F8  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_F9 </para>
</entry><entry thead="no"><para>F9  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_F10 </para>
</entry><entry thead="no"><para>F10  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_F11 </para>
</entry><entry thead="no"><para>F11  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_F12 </para>
</entry><entry thead="no"><para>F12  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_UP </para>
</entry><entry thead="no"><para>Up Arrow  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_DOWN </para>
</entry><entry thead="no"><para>Down Arrow  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_LEFT </para>
</entry><entry thead="no"><para>Left Arrow  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_RIGHT </para>
</entry><entry thead="no"><para>Right Arrow  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_PAGE_UP </para>
</entry><entry thead="no"><para>Page Up  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_PAGE_DOWN </para>
</entry><entry thead="no"><para>Page Down  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_HOME </para>
</entry><entry thead="no"><para>Home  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_END </para>
</entry><entry thead="no"><para>End  </para>
</entry></row>
<row>
<entry thead="no"><para>KEY_INSERT </para>
</entry><entry thead="no"><para>Insert  </para>
</entry></row>
</table>
</para>
<para>Value for each key in configuration is a descriptor of integer type. You need to make sure that you are setting this descriptors with correct values on each iteration. Example of configuration with arrow buttons:</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>up:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>down:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>left:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>right:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_button:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY_UP:<sp/>up</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY_DOWN:<sp/>down</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY_LEFT:<sp/>left</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY_RIGHT:<sp/>right</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="FlowVR_plugin_1mouse_payload">
<title>Event mouse payload</title>
<para>Requires <computeroutput>event_mouse</computeroutput> key in a port tree. The payload holds the values of the mouse keys pressed and cursor position during iteration. The button state is saved in descriptors of integer type and a cursor position in an array of 2 floats.</para>
<para>Available keys in <computeroutput>event_mouse</computeroutput> tree: <table rows="5" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>description  </para>
</entry></row>
<row>
<entry thead="no"><para>POS_XY </para>
</entry><entry thead="no"><para>cursor position  </para>
</entry></row>
<row>
<entry thead="no"><para>LEFT_BUTTON </para>
</entry><entry thead="no"><para>left mouse button  </para>
</entry></row>
<row>
<entry thead="no"><para>MIDDLE_BUTTON </para>
</entry><entry thead="no"><para>middle mouse button  </para>
</entry></row>
<row>
<entry thead="no"><para>RIGHT_BUTTON </para>
</entry><entry thead="no"><para>right mouse button  </para>
</entry></row>
</table>
</para>
<para>Example of configuration with all keys defined:</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pos_xy:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>float,<sp/>size:<sp/>2}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>left_button:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>right_button:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>middle_button:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_mouse:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POS_XY:<sp/>pos_xy</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEFT_BUTTON:<sp/>left_button</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RIGHT_BUTTON:<sp/>right_button</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MIDDLE_BUTTON:<sp/>middle_button</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="FlowVR_plugin_1stamp">
<title>Stamp</title>
<para>The <computeroutput>stamps</computeroutput> key must be defined in a port tree. The value of <computeroutput>stamps</computeroutput> is simply a map with the stamp name and descriptor name. The given descriptor must have a valid PDI type, limited to:</para>
<para><itemizedlist>
<listitem><para><computeroutput>int</computeroutput></para>
</listitem><listitem><para><computeroutput>float</computeroutput></para>
</listitem><listitem><para><computeroutput>array of ints</computeroutput></para>
</listitem><listitem><para><computeroutput>array of floats</computeroutput></para>
</listitem><listitem><para><computeroutput>array of chars</computeroutput></para>
</listitem></itemizedlist>
</para>
<para>Example of message with <ref refid="FlowVR_plugin_1data_payload" kindref="member">Data payload</ref> and 2 stamps:</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data_desc:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>256}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>stamp_1_desc:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>stamp_2_desc:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>float,<sp/>size:<sp/>2}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>data_desc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stamps:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stamp_1_name:<sp/>stamp_1_desc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stamp_2_name:<sp/>stamp_2_desc</highlight></codeline>
</programlisting></para>
<para>For output port stamp can be also define as an expression, but stamp will need type definition in this case. Example of expression stamp:</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>value_desc:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">flowvr:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>port_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stamps:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stamp_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expression:<sp/>($value_desc/2)<sp/>*<sp/>3</highlight></codeline>
</programlisting></para>
<para>For now only int and string stamps are supported as expression.</para>
</sect2>
</sect1>
<sect1 id="FlowVR_plugin_1c_api">
<title>Reading and writing data examples</title>
<para>FlowVR plugin uses 2 ways to handle data reading and writing:</para>
<para><orderedlist>
<listitem><para>Access the shared memory - the fastest way, user operates on flowvr shared memory.</para>
</listitem><listitem><para>Copy the data from shared memory to descriptor - needs the data copy (convenient for small messages or sparse data types).</para>
</listitem></orderedlist>
</para>
<sect2 id="FlowVR_plugin_1read_shared">
<title>Read data from FlowVR message by access the shared memory</title>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>text_shr:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>4}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>input_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>text_shr</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>text_shr;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__annotation_1ga8dcd0c81d7697ea473a55bd57efb717d" kindref="member">PDI_access</ref>(</highlight><highlight class="stringliteral">"text_shr"</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;text_shr,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a70fa3cd94e02b997794d9eaaea34b0b6" kindref="member">PDI_IN</ref>);</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="comment">//<sp/>do<sp/>something<sp/>with<sp/>text_shr<sp/>or<sp/>copy<sp/>data<sp/>to<sp/>local<sp/>buffer</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><ref refid="group__annotation_1ga001117ae897dd4e4a25c312b5d00c43a" kindref="member">PDI_release</ref>(</highlight><highlight class="stringliteral">"text_shr"</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>really<sp/>important<sp/>to<sp/>release<sp/>descriptors</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="FlowVR_plugin_1write_shared">
<title>Write data from FlowVR message by access the shared memory</title>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>text_shr:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>4}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>text_shr</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>text_shr;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__annotation_1ga8dcd0c81d7697ea473a55bd57efb717d" kindref="member">PDI_access</ref>(</highlight><highlight class="stringliteral">"text_shr"</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;text_shr,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="comment">//<sp/>do<sp/>something<sp/>with<sp/>text_shr<sp/>or<sp/>copy<sp/>data<sp/>from<sp/>local<sp/>buffer</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><ref refid="group__annotation_1ga001117ae897dd4e4a25c312b5d00c43a" kindref="member">PDI_release</ref>(</highlight><highlight class="stringliteral">"text_shr"</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>really<sp/>important<sp/>to<sp/>release<sp/>descriptors</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="FlowVR_plugin_1read_copy">
<title>Read data from FlowVR message by copy from the shared memory</title>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>text:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>4}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>input_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>text</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>text[4];</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"text"</highlight><highlight class="normal">,<sp/>text,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a70fa3cd94e02b997794d9eaaea34b0b6" kindref="member">PDI_IN</ref>);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="FlowVR_plugin_1write_copy">
<title>Write data to FlowVR message by copy to the shared memory</title>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>text:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>char,<sp/>size:<sp/>4}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>text</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>text[4];</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"text"</highlight><highlight class="normal">,<sp/>text,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="FlowVR_plugin_1wrtie_sparse">
<title>Write data to FlowVR message by copy the subset of data to the shared memory</title>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_array:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>[20,<sp/>20]}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>my_array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_data_selection:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>[20,<sp/>20],<sp/>subsize:<sp/>[10,<sp/>10],<sp/>start:<sp/>[0,<sp/>0]}</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>my_array[400];</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"my_array"</highlight><highlight class="normal">,<sp/>my_array,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);<sp/></highlight><highlight class="comment">//<sp/>copies<sp/>only<sp/>100<sp/>elements</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="FlowVR_plugin_1Reading">
<title>and writing stamps examples</title>
<para>Stamps are always copied from descriptor to flowvr message.</para>
<sect2 id="FlowVR_plugin_1read_stamp">
<title>Read stamp from FlowVR message</title>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>stamp_it:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>input_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stamps:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it:<sp/>stamp_it</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stamp_it<sp/>=<sp/>some_value;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"stamp_it"</highlight><highlight class="normal">,<sp/>&amp;stamp_it,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a70fa3cd94e02b997794d9eaaea34b0b6" kindref="member">PDI_IN</ref>);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="FlowVR_plugin_1write_stamp">
<title>Write stamp from FlowVR message</title>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>user_stamp:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stamps:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user_defined_stamp:<sp/>user_stamp</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>user_stamp<sp/>=<sp/>some_value;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"user_stamp"</highlight><highlight class="normal">,<sp/>&amp;user_stamp,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="FlowVR_plugin_1mouse_button_event">
<title>Reading and writing mouse and button event examples</title>
<sect2 id="FlowVR_plugin_1write_mouse">
<title>Write mouse event from FlowVR message</title>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pos_xy:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>float,<sp/>size:<sp/>2}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>left_button:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>keysOut:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event_mouse:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POS_XY:<sp/>pos_xy</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEFT_BUTTON:<sp/>left_button</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pos_xy[2]<sp/>=<sp/>{x_pos,<sp/>y_pos};</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"pos_xy"</highlight><highlight class="normal">,<sp/>&amp;pos_xy,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left_button<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"left_button"</highlight><highlight class="normal">,<sp/>&amp;left_button,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="FlowVR_plugin_1read_mouse">
<title>Read mouse event from FlowVR message</title>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pos_xy:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>float,<sp/>size:<sp/>2}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>left_button:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">input_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>keysIn:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>event_mouse:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>POS_XY:<sp/>pos_xy</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LEFT_BUTTON:<sp/>left_button</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pos_xy;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"pos_xy"</highlight><highlight class="normal">,<sp/>&amp;pos_xy,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a70fa3cd94e02b997794d9eaaea34b0b6" kindref="member">PDI_IN</ref>);</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left_button;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"left_button"</highlight><highlight class="normal">,<sp/>&amp;left_button,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a70fa3cd94e02b997794d9eaaea34b0b6" kindref="member">PDI_IN</ref>);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="FlowVR_plugin_1write_button">
<title>Write button event from FlowVR message</title>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>up:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>down:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>keysOut:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event_button:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY_UP:<sp/>up</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY_DOWN:<sp/>down</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>up_state<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"up"</highlight><highlight class="normal">,<sp/>&amp;up_state,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>down_state<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"down"</highlight><highlight class="normal">,<sp/>&amp;down_state,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="FlowVR_plugin_1read_button">
<title>Read button event from FlowVR message</title>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>up:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>down:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>input_ports:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>keysIn:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event_button:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY_UP:<sp/>up</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY_DOWN:<sp/>down</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>up_state;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"up"</highlight><highlight class="normal">,<sp/>&amp;up_state,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a70fa3cd94e02b997794d9eaaea34b0b6" kindref="member">PDI_IN</ref>);</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>down_state;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"down"</highlight><highlight class="normal">,<sp/>&amp;down_state,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a70fa3cd94e02b997794d9eaaea34b0b6" kindref="member">PDI_IN</ref>);</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="FlowVR_plugin_1flowvr_examples">
<title>FlowVR examples reworked for %PDI</title>
<para>Path to the examples:</para>
<para><programlisting filename=".path"><codeline><highlight class="normal">pdi/build/pdi_plugin-flowvr/src/FLOWVR_PLUGIN-build/examples/</highlight></codeline>
</programlisting></para>
<para>Original flowvr source files are in directories <computeroutput>flowvr_original</computeroutput>.</para>
<sect2 id="FlowVR_plugin_1run_app">
<title>Running the application</title>
<para><orderedlist>
<listitem><para>Go to examples folder: <computeroutput>cd pdi_plugin-flowvr/src/FLOWVR_PLUGIN-build/examples</computeroutput></para>
</listitem><listitem><para>Run <computeroutput>source flowvr-config.sh</computeroutput>. Now your environment is ready.</para>
</listitem><listitem><para>Run flowvr daemon on your system (best in new terminal, repeat 1. and 2.): <computeroutput>flowvrd --top</computeroutput></para>
</listitem><listitem><para>Inside <computeroutput>$example_name</computeroutput> directory generate the flowvr configuration files by: <computeroutput>python $example_name.py</computeroutput> and run example by: <computeroutput>flowvr $example_name</computeroutput></para>
</listitem></orderedlist>
</para>
</sect2>
<sect2 id="FlowVR_plugin_1tictac">
<title>Tictac example</title>
<para>Consists of 2 modules:</para>
<para><itemizedlist>
<listitem><para><computeroutput>put</computeroutput><itemizedlist>
<listitem><para>source file: <computeroutput>put.cxx</computeroutput></para>
</listitem><listitem><para>configuration file: <computeroutput>put.yml</computeroutput></para>
</listitem><listitem><para>has <computeroutput>output port</computeroutput> named <computeroutput>text</computeroutput></para>
</listitem><listitem><para>sends message with:<itemizedlist>
<listitem><para>data: <computeroutput>type: {type: array, subtype: char, size: 4} #"tic" or "tac"</computeroutput></para>
</listitem><listitem><para>stamps:<itemizedlist>
<listitem><para>it (predefined flowvr stamp): <computeroutput>type: int</computeroutput></para>
</listitem><listitem><para>my_stamp (user define int array stamp): <computeroutput>type: {type: array, subtype: int, size: 2}</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>get</computeroutput><itemizedlist>
<listitem><para>source file: <computeroutput>get.cxx</computeroutput></para>
</listitem><listitem><para>configuration file: <computeroutput>get.yml</computeroutput></para>
</listitem><listitem><para>has <computeroutput>input port</computeroutput> named <computeroutput>text</computeroutput></para>
</listitem><listitem><para>receive message sent by <computeroutput>put</computeroutput> module</para>
</listitem><listitem><para>additionally has defined <computeroutput>stamp</computeroutput>:<itemizedlist>
<listitem><para>source (predefined flowvr stamp): <computeroutput>type: {type: array, subtype: char, size: 256}</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para><bold>Network of the application:</bold></para>
<para><image type="html" name="tictac_net.jpg"/>
</para>
<sect3 id="FlowVR_plugin_1bundle">
<title>Bundle example</title>
<para>Consists of 3 modules:</para>
<para><itemizedlist>
<listitem><para>2x <computeroutput>putMulitple</computeroutput><itemizedlist>
<listitem><para>source file: <computeroutput>putMulitple.cxx</computeroutput></para>
</listitem><listitem><para>configuration file: <computeroutput>putMulitple.yml</computeroutput></para>
</listitem><listitem><para>first one has <computeroutput>output port</computeroutput> named <computeroutput>text</computeroutput>, second <computeroutput>text2</computeroutput></para>
</listitem><listitem><para>sends message with:<itemizedlist>
<listitem><para>data: <computeroutput>type: {type: array, subtype: char, size: 4} # first "tic" or "tac", second "TIC" or "TAC"</computeroutput></para>
</listitem><listitem><para>stamps:<itemizedlist>
<listitem><para><computeroutput>it</computeroutput> (predefined flowvr stamp): <computeroutput>type: int</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>getMulitple</computeroutput><itemizedlist>
<listitem><para>source file: <computeroutput>getMulitple.cxx</computeroutput></para>
</listitem><listitem><para>configuration file: <computeroutput>getMulitple.yml</computeroutput></para>
</listitem><listitem><para>has <computeroutput>input ports</computeroutput> named <computeroutput>text</computeroutput> and <computeroutput>text2</computeroutput></para>
</listitem><listitem><para>receive message sent by <computeroutput>putMulitple</computeroutput> modules</para>
</listitem><listitem><para>additionally has defined <computeroutput>stamp</computeroutput>:<itemizedlist>
<listitem><para>source (predefined flowvr stamp): <computeroutput>type: {type: array, subtype: char, size: 256}</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para><bold>Network of the application:</bold></para>
<para><image type="html" name="bundle_net.jpg"/>
</para>
</sect3>
</sect2>
<sect2 id="FlowVR_plugin_1primes">
<title>Primes example</title>
<para>Consists of 3 modules:</para>
<para><itemizedlist>
<listitem><para><computeroutput>capture</computeroutput><itemizedlist>
<listitem><para>source file: <computeroutput>capture.cxx</computeroutput></para>
</listitem><listitem><para>configuration file: <computeroutput>capture.yml</computeroutput></para>
</listitem><listitem><para>has <computeroutput>output port</computeroutput> named <computeroutput>keysOut</computeroutput></para>
</listitem><listitem><para>sends message with:<itemizedlist>
<listitem><para><computeroutput>event_button</computeroutput> (payload):<itemizedlist>
<listitem><para>KEY_UP: up <linebreak/>
</para>
</listitem><listitem><para>KEY_DOWN: down</para>
</listitem><listitem><para>KEY_LEFT: left</para>
</listitem><listitem><para>KEY_RIGHT: right</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>compute</computeroutput><itemizedlist>
<listitem><para>source file: <computeroutput>compute.cxx</computeroutput></para>
</listitem><listitem><para>configuration file: <computeroutput>compute.yml</computeroutput></para>
</listitem><listitem><para>has <computeroutput>output port</computeroutput> named <computeroutput>primesOut</computeroutput></para>
</listitem><listitem><para>sends message with:<itemizedlist>
<listitem><para>data (payload): <computeroutput>type: {type: array, subtype: int, size: $tempPrimeNumbersMaxCount}</computeroutput></para>
</listitem><listitem><para>stamps:<itemizedlist>
<listitem><para>computationTimeIt: <computeroutput>type: int</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>visu</computeroutput><itemizedlist>
<listitem><para>source file: <computeroutput>visu.cxx</computeroutput></para>
</listitem><listitem><para>configuration file: <computeroutput>visu.yml</computeroutput></para>
</listitem><listitem><para>has <computeroutput>input ports</computeroutput> named <computeroutput>primesIn</computeroutput> and <computeroutput>keysIn</computeroutput></para>
</listitem><listitem><para>receive message sent by <computeroutput>capture</computeroutput> and <computeroutput>compute</computeroutput> modules</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para><bold>Network of the application:</bold></para>
<para><image type="html" name="primes_net.jpg"/>
</para>
</sect2>
<sect2 id="FlowVR_plugin_1fluid">
<title>Fluid example</title>
<para>Consists of 2 modules:</para>
<para><itemizedlist>
<listitem><para><computeroutput>fluid</computeroutput><itemizedlist>
<listitem><para>source file: <computeroutput>fluid.cxx</computeroutput></para>
</listitem><listitem><para>configuration file: <computeroutput>fluid.yml</computeroutput></para>
</listitem><listitem><para>has <computeroutput>input port</computeroutput> named <computeroutput>position</computeroutput></para>
</listitem><listitem><para>received message sent by <computeroutput>gldens</computeroutput> module</para>
</listitem><listitem><para>has <computeroutput>output ports</computeroutput> named <computeroutput>velocity</computeroutput> and <computeroutput>density</computeroutput></para>
</listitem><listitem><para><computeroutput>velocity</computeroutput> and <computeroutput>density</computeroutput> both sends message with:<itemizedlist>
<listitem><para>data (payload): <computeroutput>type: {type: array, subtype: char, size: [$NX * 2, $NY]} # where NX and NY is metadata</computeroutput></para>
</listitem><listitem><para>stamps:<itemizedlist>
<listitem><para>P: <computeroutput>type: {type: array, subtype: int, size: 2}</computeroutput></para>
</listitem><listitem><para>N: <computeroutput>type: {type: array, subtype: int, size: 2}</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>gldens</computeroutput><itemizedlist>
<listitem><para>source file: <computeroutput>gldens.cxx</computeroutput></para>
</listitem><listitem><para>configuration file: <computeroutput>gldens.yml</computeroutput></para>
</listitem><listitem><para>has <computeroutput>input ports</computeroutput> named <computeroutput>velocity</computeroutput> and <computeroutput>density</computeroutput></para>
</listitem><listitem><para>received message sent by <computeroutput>fluid</computeroutput> module</para>
</listitem><listitem><para>has <computeroutput>output port</computeroutput> named <computeroutput>position</computeroutput></para>
</listitem><listitem><para>sends message with:<itemizedlist>
<listitem><para>data (payload): <computeroutput>type: {type: array, subtype: float, size: 3}</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>very important is how to get a number of elements received by <computeroutput>velocity</computeroutput> and <computeroutput>density</computeroutput> ports:<itemizedlist>
<listitem><para><computeroutput>type: {type: array, subtype: char, size: $velocitySize} # velocitySize is defined as metadata</computeroutput> Here <computeroutput>velocitySize</computeroutput> must be preceded with <computeroutput>$</computeroutput> to let plugin to write the size there. The <computeroutput>velocitySize</computeroutput> descriptor will store a valid size <bold>after</bold> accessing the <computeroutput>velocity</computeroutput> descriptor, because only then plugin will write size.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para><bold>Network of the application:</bold></para>
<para><image type="html" name="fluid_net.jpg"/>
 </para>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="FTI_plugin" kind="page">
    <compoundname>FTI_plugin</compoundname>
    <title>FTI plugin</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><bold>WARNING</bold> This documentation is a work in progress and does not reflect the full FTI plugin potential.</para>
<para>The FTI plugin enables one to perform checkpoints using FTI. FTI plugin does not support the full FTI feature set but offers a simple declarative interface to access a large subset of it.</para>
<sect2 id="FTI_plugin_1autotoc_md24">
<title>Features and requirements</title>
<sect3 id="FTI_plugin_1autotoc_md25">
<title>Dependencies</title>
<para>FTI plugin uses a <computeroutput>MPI_Comm</computeroutput> datatype and <computeroutput>MPI_COMM_WORLD</computeroutput> descriptor, which are defined in <computeroutput>mpi</computeroutput> plugin. For now it must be loaded alongside FTI plugin (as shown below).</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">pdi:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>...</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/>plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mpi:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fti:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="FTI_plugin_1autotoc_md26">
<title>Initialization</title>
<para>FTI initialization in FTI plugin is based on several rules.<itemizedlist>
<listitem><para>if <computeroutput>init_on</computeroutput> is specified, FTI plugin will initialize FTI on that exact event and expects the communicator and file name to be correctly available or fail otherwise,</para>
</listitem><listitem><para>if <computeroutput>init_on</computeroutput> is not specified and the communicator isavailable on plugin initialization (e.g. when using <computeroutput>MPI_COMM_WORLD</computeroutput> predefine from <computeroutput>mpi</computeroutput> plugin), FTI plugin will try to initialize FTI (on plugin initialization) and expects file name to be correctly available or fail otherwise,</para>
</listitem><listitem><para>if <computeroutput>init_on</computeroutput> is not specified and the communicator is not available on plugin initialization, FTI plugin will try to initialize FTI on communicators descriptor exposure and expects file name to be correctly available or fail otherwise.</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="FTI_plugin_1autotoc_md27">
<title>Predefined descriptors</title>
<para>FTI plugin loads a predefined descriptor named <computeroutput>FTI_COMM_WORLD</computeroutput> (<computeroutput>FTI_COMM_WORLD_F</computeroutput> for Fortran) after a successfull initialization of FTI. This descriptor is treated asmetadata. Its content can be accessed using <computeroutput>PDI_access</computeroutput>.</para>
</sect3>
</sect2>
<sect2 id="FTI_plugin_1autotoc_md28">
<title>Configuration grammar</title>
<para>At its root, the FTI configuration is made of several nodes: <computeroutput>checkpoint</computeroutput>, <computeroutput>communicator</computeroutput>, <computeroutput>config_file</computeroutput>, <computeroutput>dataset</computeroutput>, <computeroutput>init_on</computeroutput>, <computeroutput>recover_on</computeroutput>, <computeroutput>recover_var</computeroutput>, <computeroutput>send_file</computeroutput>, <computeroutput>snapshot_on</computeroutput> and <computeroutput>status</computeroutput>.</para>
<sect3 id="FTI_plugin_1autotoc_md29">
<title>&lt;tt&gt;checkpoint&lt;/tt&gt;</title>
<para>A <computeroutput>checkpoint</computeroutput> specifies a list of checkpoints to execute. It is specified by a key/value map that may contain following keys: <computeroutput>L1_on</computeroutput>, <computeroutput>L2_on</computeroutput>, <computeroutput>L3_on</computeroutput>, <computeroutput>L4_on</computeroutput>. Each of the keys specifies events names that trigger a specified checkpoint. Value of this key can be either string or a list of strings. <linebreak/>
</para>
<para><itemizedlist>
<listitem><para><computeroutput>L1_on</computeroutput>: executes FTI L1 checkpoint on specified <ref refid="namespacePDI" kindref="compound">PDI</ref> events,</para>
</listitem><listitem><para><computeroutput>L2_on</computeroutput>: executes FTI L2 checkpoint on specified <ref refid="namespacePDI" kindref="compound">PDI</ref> events,</para>
</listitem><listitem><para><computeroutput>L3_on</computeroutput>: executes FTI L3 checkpoint on specified <ref refid="namespacePDI" kindref="compound">PDI</ref> events,</para>
</listitem><listitem><para><computeroutput>L4_on</computeroutput>: executes FTI L4 checkpoint on specified <ref refid="namespacePDI" kindref="compound">PDI</ref> events.</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="FTI_plugin_1autotoc_md30">
<title>&lt;tt&gt;communicator&lt;/tt&gt;</title>
<para>A <computeroutput>communicator</computeroutput> is a string, which specifies name of descriptor containing a MPI communicator to use for FTI initialization. Additionaly, FTI plugin can write <computeroutput>FTI_COMM_WORLD</computeroutput> into this descriptor, if it is shared with write access right. It defaults to <computeroutput>MPI_COMM_WORLD</computeroutput>, which is a predefined descriptor from <computeroutput>mpi</computeroutput> plugin.</para>
</sect3>
<sect3 id="FTI_plugin_1autotoc_md31">
<title>&lt;tt&gt;config_file&lt;/tt&gt;</title>
<para>A <computeroutput>config_file</computeroutput> is a string that can contain $-expressions. Specifies the name of the FTI configuration file.</para>
</sect3>
<sect3 id="FTI_plugin_1autotoc_md32">
<title>&lt;tt&gt;dataset&lt;/tt&gt;</title>
<para>A <computeroutput>dataset</computeroutput> is a key/value map, which keys are integers that specify datasets ids in FTI and values are names of protected descriptors. Alternatively, the map may contain a map with keys <computeroutput>name</computeroutput> and <computeroutput>size</computeroutput>, where <computeroutput>name</computeroutput> is a name of protected descriptor and <computeroutput>size</computeroutput> is a descriptor where FTI plugin will write size of the protected descriptor when shared with write access right.</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">dataset:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>0:<sp/>{name:<sp/>variable,<sp/>size:<sp/>variable_size}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1:<sp/>variable2</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="FTI_plugin_1autotoc_md33">
<title>&lt;tt&gt;init_on&lt;/tt&gt;</title>
<para>A <computeroutput>init_on</computeroutput> is a string or a list of strings that specifies the names of the <ref refid="namespacePDI" kindref="compound">PDI</ref> events that executes recovery of FTI.</para>
</sect3>
<sect3 id="FTI_plugin_1autotoc_md34">
<title>&lt;tt&gt;recover_on&lt;/tt&gt;</title>
<para>A <computeroutput>recover_on</computeroutput> is a string or a list of strings that specifies the names of the <ref refid="namespacePDI" kindref="compound">PDI</ref> events that executes recovery of FTI.</para>
</sect3>
<sect3 id="FTI_plugin_1autotoc_md35">
<title>&lt;tt&gt;recover_var&lt;/tt&gt;</title>
<para><bold>WARNING</bold> This feature is not yet supported.</para>
</sect3>
<sect3 id="FTI_plugin_1autotoc_md36">
<title>&lt;tt&gt;send_file&lt;/tt&gt;</title>
<para><bold>WARNING</bold> This feature is not yet supported. A <computeroutput>send_file</computeroutput> is a key/value map or a list of key/value maps describing source and destination paths of files to send, event or list of events to trigger on and optionally name of descriptor, where will be stored status information when exposed. Example: <programlisting filename=".yaml"><codeline><highlight class="normal">send_file:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>on_even:<sp/>event</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>file:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>src:<sp/>source_path</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dest:<sp/>destination_path</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>status:<sp/>status_descriptor</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="FTI_plugin_1autotoc_md37">
<title>&lt;tt&gt;snapshot_on&lt;/tt&gt;</title>
<para>A <computeroutput>snapshot_on</computeroutput> is a string or a list of strings that specifies the names of the <ref refid="namespacePDI" kindref="compound">PDI</ref> events that executes FTI_Snapshot.</para>
</sect3>
<sect3 id="FTI_plugin_1autotoc_md38">
<title>&lt;tt&gt;status&lt;/tt&gt;</title>
<para>A <computeroutput>status</computeroutput> is a string that specifies the name of a descriptor to which FTI will write FTI_Status code when shared.</para>
</sect3>
</sect2>
<sect2 id="FTI_plugin_1autotoc_md39">
<title>full configuration example</title>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">pdi:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>metadata:<sp/>#<sp/>type<sp/>of<sp/>small<sp/>values<sp/>for<sp/>which<sp/>PDI<sp/>keeps<sp/>a<sp/>copy</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>iter:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size:<sp/><sp/>{<sp/>size:<sp/>2,<sp/>type:<sp/>int<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data:<sp/>#<sp/>type<sp/>of<sp/>values<sp/>for<sp/>which<sp/>PDI<sp/>does<sp/>not<sp/>keep<sp/>a<sp/>copy</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fti_status:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>array_size:<sp/>int64</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>file_name:<sp/>{size:<sp/>64,<sp/>type:<sp/>array,<sp/>subtype:<sp/>char}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>file_status:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>file1_status:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>file2_status:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>main_array:<sp/>{<sp/>size:<sp/>['$size[0]',<sp/>'$size[1]'],<sp/>type:<sp/>array,<sp/>subtype:<sp/>double<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mpi:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fti:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>config_file:<sp/>fti_config.ini</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>communicator:<sp/>MPI_COMM_WORLD</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>init_on:<sp/>fti_init_event</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status:<sp/>fti_status</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataset:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0:<sp/>{name:<sp/>main_array,<sp/>size:<sp/>array_size}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1:<sp/>iter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snapshot_on:<sp/>snapshot_event</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recover_on:<sp/>recover_event</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>checkpoint:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L1_on:<sp/>ckpt_l1_event</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L2_on:<sp/>[ckpt_l2_1_event,<sp/>ckpt_l2_2_event]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L3_on:<sp/>[ckpt_l3_1_event,<sp/>ckpt_l3_2_event]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L4_on:<sp/>ckpt_l4_event</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>send_file:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>on_event:<sp/>send_one_file</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src:<sp/>./$file_name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest:<sp/>./somewhere_else/$file_name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status:<sp/>file_status</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>on_event:<sp/>[send_two_files_first_event,<sp/>send_two_files_second_event]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>src:<sp/>./file1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest:<sp/>./somewhere_else/file1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status:<sp/>file1_status</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>src:<sp/>./file2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest:<sp/>./somewhere_else/file2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status:<sp/>file2_status</highlight></codeline>
</programlisting> </para>
</sect2>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="trace_plugin" kind="page">
    <compoundname>trace_plugin</compoundname>
    <title>Trace plugin</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The trace plugin is intended to generate a trace of what happens in <ref refid="Concepts_1Data_store" kindref="member">PDI data store</ref>.</para>
<para>The plugin is very simple; just list its name in the <ref refid="Concepts_1Specification_tree" kindref="member">specification tree</ref> and you're done.</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">data:<sp/>#...</highlight></codeline>
<codeline><highlight class="normal">metadata:<sp/>#...</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>trace:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#...</highlight></codeline>
</programlisting></para>
<para>The plugin then generates a (somewhat verbose) trace on the standard error.</para>
<para>For example: <programlisting><codeline><highlight class="normal">[PDI][Test-plugin][00:00:00]<sp/>***<sp/>info:<sp/>Welcome!</highlight></codeline>
<codeline><highlight class="normal">[PDI][Test-plugin][00:00:00]<sp/>***<sp/>info:<sp/>=&gt;&gt;<sp/><sp/><sp/>data<sp/>becoming<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>my_data</highlight></codeline>
<codeline><highlight class="normal">[PDI][Test-plugin][00:00:00]<sp/>***<sp/>info:<sp/>&lt;&lt;=<sp/>data<sp/>stop<sp/>being<sp/>available<sp/>in<sp/>the<sp/>store:<sp/>my_data</highlight></codeline>
<codeline><highlight class="normal">[PDI][Test-plugin][00:00:00]<sp/>***<sp/>info:<sp/>!!!<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>event:<sp/>my_event</highlight></codeline>
<codeline><highlight class="normal">[PDI][Test-plugin][00:00:00]<sp/>***<sp/>info:<sp/>Goodbye!</highlight></codeline>
</programlisting></para>
<para>Each line starting by <computeroutput>=&gt;&gt; data becoming available in the store</computeroutput> means a new piece of data has been shared.</para>
<para>Each line starting by <computeroutput>&lt;&lt;= data stop being available in the store</computeroutput> means a piece of data is being removed from the store.</para>
<para>Each line starting by <computeroutput>!!! named event</computeroutput> means a named event has been emitted. </para>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="user_code_plugin" kind="page">
    <compoundname>user_code_plugin</compoundname>
    <title>The user-code plugin</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The <computeroutput>user-code</computeroutput> plugin enables one to call a user-defined function when a specified event occur or certain data becomes available.</para>
<sect1 id="user_code_plugin_1important_notes_node">
<title>Important notes</title>
<para><itemizedlist>
<listitem><para>Make sure to compile your program with <computeroutput>Wl,--export-dynamic</computeroutput> or <computeroutput>-rdynamic</computeroutput> flag (in CMake set <computeroutput>ENABLE_EXPORTS</computeroutput> to <computeroutput>TRUE</computeroutput> using <computeroutput>set_target_properties</computeroutput> command) in order to generate necessary symbols.</para>
</listitem><listitem><para>Make sure you use the proper access rights in your function in <ref refid="group__annotation_1ga8dcd0c81d7697ea473a55bd57efb717d" kindref="member">PDI_access</ref> (PDI_IN for reading, PDI_OUT for writing).</para>
</listitem><listitem><para>Descriptor aliases enables one to use different descriptors without the need to recompile the code.</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="user_code_plugin_1dependencies_node">
<title>Dependencies between the code and the specification tree</title>
<para>To ensure proper work of the <computeroutput>user-code</computeroutput> plugin, there are several conventions to follow in the application code and the specification tree.</para>
<para>First, each function name in specification tree must be a valid function name (watch out for <ulink url="https://en.wikipedia.org/wiki/Name_mangling">name mangling</ulink>).</para>
<para>Second, these functions <bold>can not</bold> take any arguments or return any value (i.e. their type must be <computeroutput>void(void)</computeroutput>). Use descriptors for passing input/output variables instead.</para>
<para>Third, function's symbols <bold>must</bold> be exported to make them accessible by <computeroutput>user-code</computeroutput> plugin. To do this, compile your program as described in <ref refid="user_code_plugin_1important_notes_node" kindref="member">Important notes</ref>.</para>
</sect1>
<sect1 id="user_code_plugin_1use_examples_node">
<title>Use examples</title>
<para>This section shows a simple examples with the use of a <computeroutput>user-code</computeroutput> plugin.</para>
<sect2 id="user_code_plugin_1hello_world_node">
<title>Hello world!</title>
<para>First, we will call simple function without the use of descriptors to print "Hello world!" on "print" event.</para>
<para>hello_world.c: <programlisting filename=".C"><codeline><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hello_world(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">"Hello<sp/>world!\n"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PC_tree_t<sp/>conf<sp/>=<sp/>PC_parse_path(</highlight><highlight class="stringliteral">"hello_world.yml"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga3dc660be40c93c169337e3d2692b2ed0" kindref="member">PDI_init</ref>(conf);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1gab21d59fd8d6532f6b8d7a4ac69a2388b" kindref="member">PDI_event</ref>(</highlight><highlight class="stringliteral">"print"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga7995fbda2099950ed4ffc7fd4c0bb969" kindref="member">PDI_finalize</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>hello_world.yml: <programlisting filename=".yaml"><codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>user_code:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hello_world:<sp/>{}</highlight></codeline>
</programlisting></para>
<para>output: <programlisting filename=".console"><codeline><highlight class="normal">[PDI][User-code][13:40:55]<sp/>***<sp/>info:<sp/>Plugin<sp/>loaded<sp/>successfully</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:40:55]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">Hello<sp/>world!</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:40:55]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
<codeline><highlight class="normal">[PDI][User-code][13:40:55]<sp/>***<sp/>info:<sp/>Closing<sp/>plugin</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="user_code_plugin_1handling_input_node">
<title>Handling input</title>
<para>Now we will pass some input data to the function.</para>
<para>print_number.c: <programlisting filename=".C"><codeline><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_number(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>input;<sp/><ref refid="group__annotation_1ga8dcd0c81d7697ea473a55bd57efb717d" kindref="member">PDI_access</ref>(</highlight><highlight class="stringliteral">"input"</highlight><highlight class="normal">,<sp/>&amp;input,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a70fa3cd94e02b997794d9eaaea34b0b6" kindref="member">PDI_IN</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">"I've<sp/>got<sp/>number<sp/>%d.\n"</highlight><highlight class="normal">,<sp/>*((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)input));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1ga001117ae897dd4e4a25c312b5d00c43a" kindref="member">PDI_release</ref>(</highlight><highlight class="stringliteral">"input"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PC_tree_t<sp/>conf<sp/>=<sp/>PC_parse_path(</highlight><highlight class="stringliteral">"print_number.yml"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga3dc660be40c93c169337e3d2692b2ed0" kindref="member">PDI_init</ref>(conf);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number<sp/>=<sp/>42;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1ga34e34cede8627c47c07e6ede997e37fe" kindref="member">PDI_share</ref>(</highlight><highlight class="stringliteral">"number"</highlight><highlight class="normal">,<sp/>&amp;number,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1gab21d59fd8d6532f6b8d7a4ac69a2388b" kindref="member">PDI_event</ref>(</highlight><highlight class="stringliteral">"print"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1gabf58b7c146cbf7e3341245f60cec0f7e" kindref="member">PDI_reclaim</ref>(</highlight><highlight class="stringliteral">"number"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga7995fbda2099950ed4ffc7fd4c0bb969" kindref="member">PDI_finalize</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>print_number.yml: <programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>number:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>user_code:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_number:<sp/>{input:<sp/>$number}</highlight></codeline>
</programlisting></para>
<para>output: <programlisting filename=".console"><codeline><highlight class="normal">[PDI][User-code][13:49:30]<sp/>***<sp/>info:<sp/>Plugin<sp/>loaded<sp/>successfully</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:49:30]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">I've<sp/>got<sp/>number<sp/>42.</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:49:30]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
<codeline><highlight class="normal">[PDI][User-code][13:49:30]<sp/>***<sp/>info:<sp/>Closing<sp/>plugin</highlight></codeline>
</programlisting></para>
<para>We can simplify this example by using <computeroutput>on_data</computeroutput> to print value of number when it is shared to PDI.</para>
<para>print_number.c: <programlisting filename=".C"><codeline><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_number(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>input;<sp/><ref refid="group__annotation_1ga8dcd0c81d7697ea473a55bd57efb717d" kindref="member">PDI_access</ref>(</highlight><highlight class="stringliteral">"input"</highlight><highlight class="normal">,<sp/>&amp;input,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a70fa3cd94e02b997794d9eaaea34b0b6" kindref="member">PDI_IN</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">"I've<sp/>got<sp/>number<sp/>%d.\n"</highlight><highlight class="normal">,<sp/>*((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)input));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1ga001117ae897dd4e4a25c312b5d00c43a" kindref="member">PDI_release</ref>(</highlight><highlight class="stringliteral">"input"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PC_tree_t<sp/>conf<sp/>=<sp/>PC_parse_path(</highlight><highlight class="stringliteral">"print_number.yml"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga3dc660be40c93c169337e3d2692b2ed0" kindref="member">PDI_init</ref>(conf);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number<sp/>=<sp/>42;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"number"</highlight><highlight class="normal">,<sp/>&amp;number,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//PDI_event<sp/>is<sp/>no<sp/>longer<sp/>necessary<sp/>and<sp/>PDI_share/PDI_reclaim<sp/>can<sp/>be<sp/>simplified<sp/>to<sp/>PDI_expose</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga7995fbda2099950ed4ffc7fd4c0bb969" kindref="member">PDI_finalize</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>print_number.yml: <programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>number:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>user_code:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_number:<sp/>{input:<sp/>$number}</highlight></codeline>
</programlisting></para>
<para>output does not change: <programlisting filename=".console"><codeline><highlight class="normal">[PDI][User-code][13:52:15]<sp/>***<sp/>info:<sp/>Plugin<sp/>loaded<sp/>successfully</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:52:15]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">I've<sp/>got<sp/>number<sp/>42.</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:52:15]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
<codeline><highlight class="normal">[PDI][User-code][13:52:15]<sp/>***<sp/>info:<sp/>Closing<sp/>plugin</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="user_code_plugin_1handling_output_node">
<title>Handling output</title>
<para>Output handling is very similar to the input handling, the only difference are the access rights. In this example we will call <computeroutput>add_ten</computeroutput> function when <computeroutput>number</computeroutput> is shared to PDI.</para>
<para>adding_to_number.c: <programlisting filename=".C"><codeline><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_ten(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>input;<sp/><ref refid="group__annotation_1ga8dcd0c81d7697ea473a55bd57efb717d" kindref="member">PDI_access</ref>(</highlight><highlight class="stringliteral">"input"</highlight><highlight class="normal">,<sp/>&amp;input,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)input)<sp/>+=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1ga001117ae897dd4e4a25c312b5d00c43a" kindref="member">PDI_release</ref>(</highlight><highlight class="stringliteral">"input"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PC_tree_t<sp/>conf<sp/>=<sp/>PC_parse_path(</highlight><highlight class="stringliteral">"adding_to_number.yml"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga3dc660be40c93c169337e3d2692b2ed0" kindref="member">PDI_init</ref>(conf);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number<sp/>=<sp/>42;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">"Before<sp/>expose,<sp/>number<sp/>=<sp/>%d.\n"</highlight><highlight class="normal">,<sp/>number);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__hl__annotation_1gabf3f81774644eff9a3cf511e57273454" kindref="member">PDI_expose</ref>(</highlight><highlight class="stringliteral">"number"</highlight><highlight class="normal">,<sp/>&amp;number,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a70fa3cd94e02b997794d9eaaea34b0b6" kindref="member">PDI_IN</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">"After<sp/>expose,<sp/>number<sp/>=<sp/>%d.\n"</highlight><highlight class="normal">,<sp/>number);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga7995fbda2099950ed4ffc7fd4c0bb969" kindref="member">PDI_finalize</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>adding_to_number.yml: <programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>number:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>user_code:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_ten:<sp/>{input:<sp/>$number}</highlight></codeline>
</programlisting></para>
<para>output: <programlisting filename=".console"><codeline><highlight class="normal">[PDI][User-code][13:53:51]<sp/>***<sp/>info:<sp/>Plugin<sp/>loaded<sp/>successfully</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:53:51]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">Before<sp/>expose,<sp/>number<sp/>=<sp/>42.</highlight></codeline>
<codeline><highlight class="normal">After<sp/>expose,<sp/>number<sp/>=<sp/>52.</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:53:51]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
<codeline><highlight class="normal">[PDI][User-code][13:53:51]<sp/>***<sp/>info:<sp/>Closing<sp/>plugin</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="user_code_plugin_1multiple_inout_data_node">
<title>Multiple input/output data</title>
<para>In this example we will use multiple data in function. We will add and multiply two given numbers and return the results on event "calculate".</para>
<para>calculate.c: <programlisting filename=".C"><codeline><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="preprocessor">#include<sp/>&lt;pdi.h&gt;</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sum_and_multiply(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>number1;<sp/><ref refid="group__annotation_1ga8dcd0c81d7697ea473a55bd57efb717d" kindref="member">PDI_access</ref>(</highlight><highlight class="stringliteral">"number1"</highlight><highlight class="normal">,<sp/>&amp;number1,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a70fa3cd94e02b997794d9eaaea34b0b6" kindref="member">PDI_IN</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>number2;<sp/><ref refid="group__annotation_1ga8dcd0c81d7697ea473a55bd57efb717d" kindref="member">PDI_access</ref>(</highlight><highlight class="stringliteral">"number2"</highlight><highlight class="normal">,<sp/>&amp;number2,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a70fa3cd94e02b997794d9eaaea34b0b6" kindref="member">PDI_IN</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>sum;<sp/><sp/><sp/><sp/><sp/><ref refid="group__annotation_1ga8dcd0c81d7697ea473a55bd57efb717d" kindref="member">PDI_access</ref>(</highlight><highlight class="stringliteral">"sum"</highlight><highlight class="normal">,<sp/>&amp;sum,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>product;<sp/><ref refid="group__annotation_1ga8dcd0c81d7697ea473a55bd57efb717d" kindref="member">PDI_access</ref>(</highlight><highlight class="stringliteral">"product"</highlight><highlight class="normal">,<sp/>&amp;product,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)sum)<sp/>=<sp/>*((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)number1)<sp/>+<sp/>*((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)number2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)product)<sp/>=<sp/>*((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)number1)<sp/>*<sp/>*((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)number2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1ga001117ae897dd4e4a25c312b5d00c43a" kindref="member">PDI_release</ref>(</highlight><highlight class="stringliteral">"number1"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1ga001117ae897dd4e4a25c312b5d00c43a" kindref="member">PDI_release</ref>(</highlight><highlight class="stringliteral">"number2"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1ga001117ae897dd4e4a25c312b5d00c43a" kindref="member">PDI_release</ref>(</highlight><highlight class="stringliteral">"sum"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__annotation_1ga001117ae897dd4e4a25c312b5d00c43a" kindref="member">PDI_release</ref>(</highlight><highlight class="stringliteral">"product"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PC_tree_t<sp/>conf<sp/>=<sp/>PC_parse_path(</highlight><highlight class="stringliteral">"calculate.yml"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga3dc660be40c93c169337e3d2692b2ed0" kindref="member">PDI_init</ref>(conf);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>foo<sp/>=<sp/>4,<sp/>bar<sp/>=<sp/>5,<sp/>res1<sp/>=<sp/>0,<sp/>res2<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">"Before<sp/>calculation,<sp/>foo<sp/>=<sp/>%d,<sp/>bar<sp/>=<sp/>%d,<sp/>res1<sp/>=<sp/>%d,<sp/>res2<sp/>=<sp/>%d.\n"</highlight><highlight class="normal">,<sp/>foo,<sp/>bar,<sp/>res1,<sp/>res2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__hl__annotation_1gae5c670b378e423e3083122f62c1f0a59" kindref="member">PDI_multi_expose</ref>(</highlight><highlight class="stringliteral">"calculate"</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">"foo"</highlight><highlight class="normal">,<sp/>&amp;foo,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">"bar"</highlight><highlight class="normal">,<sp/>&amp;bar,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a49ed5399cbc2fca8085867ea04d01b6e" kindref="member">PDI_OUT</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">"res1"</highlight><highlight class="normal">,<sp/>&amp;res1,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a70fa3cd94e02b997794d9eaaea34b0b6" kindref="member">PDI_IN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">"res2"</highlight><highlight class="normal">,<sp/>&amp;res2,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a70fa3cd94e02b997794d9eaaea34b0b6" kindref="member">PDI_IN</ref>,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">"After<sp/>calculation,<sp/>foo<sp/>=<sp/>%d,<sp/>bar<sp/>=<sp/>%d,<sp/>res1<sp/>=<sp/>%d,<sp/>res2<sp/>=<sp/>%d.\n"</highlight><highlight class="normal">,<sp/>foo,<sp/>bar,<sp/>res1,<sp/>res2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init__final_1ga7995fbda2099950ed4ffc7fd4c0bb969" kindref="member">PDI_finalize</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>calculate.yml: <programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>foo:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bar:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res1:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res2:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>user_code:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calculate:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_and_multiply:<sp/>{number1:<sp/>$foo,<sp/>number2:<sp/>$bar,<sp/>sum:<sp/>$res1,<sp/>product:<sp/>$res2}</highlight></codeline>
</programlisting></para>
<para>output: <programlisting filename=".console"><codeline><highlight class="normal">[PDI][User-code][13:58:20]<sp/>***<sp/>info:<sp/>Plugin<sp/>loaded<sp/>successfully</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:58:20]<sp/>***<sp/>info:<sp/>Initialization<sp/>successful</highlight></codeline>
<codeline><highlight class="normal">Before<sp/>calculation,<sp/>foo<sp/>=<sp/>4,<sp/>bar<sp/>=<sp/>5,<sp/>res1<sp/>=<sp/>0,<sp/>res2<sp/>=<sp/>0.</highlight></codeline>
<codeline><highlight class="normal">After<sp/>calculation,<sp/>foo<sp/>=<sp/>4,<sp/>bar<sp/>=<sp/>5,<sp/>res1<sp/>=<sp/>9,<sp/>res2<sp/>=<sp/>20.</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:58:20]<sp/>***<sp/>info:<sp/>Finalization</highlight></codeline>
<codeline><highlight class="normal">[PDI][User-code][13:58:20]<sp/>***<sp/>info:<sp/>Closing<sp/>plugin</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="user_code_plugin_1conf_grammar_node">
<title>Configuration grammar</title>
<para>The root of <computeroutput>user-code</computeroutput> plugin is a dictionary that contains the following keys:</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"on_data"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="user_code_plugin_1on_data_node" kindref="member">on_data</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"on_event"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="user_code_plugin_1on_event_node" kindref="member">on_event</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>".*"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para><emphasis>anything</emphasis>  </para>
</entry></row>
</table>
</para>
<para><itemizedlist>
<listitem><para>the <computeroutput>on_data</computeroutput> key specifies the list of descriptors that, when they become available, will cause the specified functions to be called,</para>
</listitem><listitem><para>the <computeroutput>on_event</computeroutput> key specifies the list of events on which to call the specified functions,</para>
</listitem><listitem><para>additional keys are ignored.</para>
</listitem></itemizedlist>
</para>
<sect2 id="user_code_plugin_1on_data_node">
<title>on_data</title>
<para>A <ref refid="user_code_plugin_1on_data_node" kindref="member">on_data</ref> is a dictionary that contains the following keys:</para>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>".*"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="user_code_plugin_1function_list_node" kindref="member">function_list</ref>  </para>
</entry></row>
</table>
</para>
<para><itemizedlist>
<listitem><para>each key identifies the name of a descriptor, which will trigger specified functions when it becomes available.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="user_code_plugin_1on_event_node">
<title>on_event</title>
<para>A <ref refid="user_code_plugin_1on_event_node" kindref="member">on_event</ref> is a dictionary that contains the following keys:</para>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>".*"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="user_code_plugin_1function_list_node" kindref="member">function_list</ref>  </para>
</entry></row>
</table>
</para>
<para><itemizedlist>
<listitem><para>each key identifies the name of an event, which will trigger specified functions when it occurs.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="user_code_plugin_1function_list_node">
<title>function_list</title>
<para>A <ref refid="user_code_plugin_1function_list_node" kindref="member">function_list</ref> is a dictionary that contains the following keys:</para>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>".*"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="user_code_plugin_1function_param_list_node" kindref="member">function_param_list</ref>  </para>
</entry></row>
</table>
</para>
<para><itemizedlist>
<listitem><para>each key identifies the name of a function, which will be called on specified event or data,</para>
</listitem><listitem><para><bold>NOTE</bold>: these functions <bold>can not</bold> take any arguments or return any value (i.e. their type must be <computeroutput>void(void)</computeroutput>).</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="user_code_plugin_1function_param_list_node">
<title>function_param_list</title>
<para>A <ref refid="user_code_plugin_1function_param_list_node" kindref="member">function_param_list</ref> is a dictionary that contains the following keys:</para>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>".*"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a $-expression referencing a data  </para>
</entry></row>
</table>
</para>
<para><itemizedlist>
<listitem><para>each key identifies the name of a descriptor alias, which will be available during function execution.</para>
</listitem></itemizedlist>
</para>
</sect2>
</sect1>
<sect1 id="user_code_plugin_1full_spec_tree_example_node">
<title>Specification tree example</title>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>desc1:<sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>desc2:<sp/>float<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>desc3:<sp/>double<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">plugins:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>user_code:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_data:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc1:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fun1:<sp/>{in:<sp/>$desc2,<sp/>out:<sp/>$desc3}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc2:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fun2:<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fun3:<sp/>{out:<sp/>$desc2}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_event:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event1:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fun2:<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event2:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fun4:<sp/>{param1:<sp/>$desc2,<sp/>param2:<sp/>$desc1,<sp/>param3:<sp/>$desc3}</highlight></codeline>
</programlisting> </para>
</sect1>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="pycall_plugin" kind="page">
    <compoundname>pycall_plugin</compoundname>
    <title>Pycall plugin</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The Pycall plugin allows calling python scripts from yaml file, that can work either if wanted data was shared or program calls specific event.</para>
<sect1 id="pycall_plugin_1pycall_configuration">
<title>Configuration</title>
<para>Simple plugin build: <programlisting filename=".yaml"><codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pycall:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>name<sp/>of<sp/>plugin</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_event:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>run<sp/>script<sp/>on<sp/>event<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>testing:<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>name<sp/>of<sp/>an<sp/>event</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>data<sp/>alias</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exec:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>python<sp/>code<sp/>which<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>the<sp/>event<sp/>is<sp/>called</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_data:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>run<sp/>script<sp/>on<sp/>data<sp/>share</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_name:<sp/><sp/><sp/><sp/>//<sp/>python<sp/>code<sp/>which<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>data_name<sp/>is<sp/>shared</highlight></codeline>
</programlisting></para>
<sect2 id="pycall_plugin_1pycall_plugin_tree">
<title>Plugin tree</title>
<para>The root of plugin configuration (named <computeroutput>pycall</computeroutput>), is a dictionary that contains the following keys:<itemizedlist>
<listitem><para>on_event</para>
</listitem><listitem><para>on_data</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="pycall_plugin_1pycall_on_event">
<title>on_event</title>
<para>This option allows to execute written python code when specific event is called.</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:<sp/>{a:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>3}}</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pycall:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>testing:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with:<sp/>{<sp/>a_python:<sp/>$a<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exec:<sp/>\"print('<sp/>*<sp/>[P]<sp/>I<sp/>received<sp/><sp/><sp/><sp/>$a<sp/>=',a_python);<sp/>a_python[1]=7;<sp/>print('<sp/>*<sp/>[P]<sp/>changed<sp/>it<sp/>to<sp/>$a<sp/>=',a_python);\"</highlight></codeline>
</programlisting></para>
<para>In this example pycall will run script on <computeroutput>testing</computeroutput> event. In the next step in <computeroutput>with</computeroutput> section alias name for data is generated. <computeroutput>a</computeroutput> will be <computeroutput>a_python</computeroutput> for execusion of the python code. Finally <computeroutput>exec</computeroutput> contains python code that will be executed on <computeroutput>testing</computeroutput> event.</para>
<para>There is also an option to set a list of executions: <programlisting filename=".yaml"><codeline><highlight class="normal">data:<sp/>{a:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>3}}</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pycall:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>testing:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>exec:<sp/>#some_python_script</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with:<sp/>{<sp/>a:<sp/>$a<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>exec:<sp/>#some_other_python_script</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with:<sp/>{<sp/>b:<sp/>$a<sp/>}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="pycall_plugin_1pycall_on_data">
<title>on_data</title>
<para>This option allows to execute written python code when specific data is shared.</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:<sp/>{a:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>3}}</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pycall:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a:<sp/>print('<sp/>*<sp/>[P]<sp/>I<sp/>received<sp/><sp/><sp/><sp/>$a<sp/>=',a);<sp/>a[1]=7;<sp/>print('<sp/>*<sp/>[P]<sp/>changed<sp/>it<sp/>to<sp/>$a<sp/>=',a);\"</highlight></codeline>
</programlisting></para>
<para>The <computeroutput>on_data</computeroutput> is a dictionary that contains data name with the python script that will be executed on share.</para>
</sect2>
</sect1>
<sect1 id="pycall_plugin_1pycall_ex">
<title>Examples</title>
<para>Full example of pycall plugin. For siplicity yaml file was included with c code in one file instead of creating separate files.</para>
<para>Yaml file named your_file: <programlisting filename=".yaml"><codeline><highlight class="normal">logging:<sp/>trace<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>data:<sp/>{a:<sp/>{type:<sp/>array,<sp/>subtype:<sp/>int,<sp/>size:<sp/>3}}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pycall:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with:<sp/>{<sp/>a_python:<sp/>$a<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exec:<sp/>\"print('<sp/>*<sp/>[P]<sp/>I<sp/>received<sp/><sp/><sp/><sp/>$a<sp/>=',a_python);<sp/>a_python[1]=7;<sp/>print('<sp/>*<sp/>[P]<sp/>changed<sp/>it<sp/>to<sp/>$a<sp/>=',a_python);\"</highlight></codeline>
</programlisting></para>
<para>C++ code: <programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[3]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">"<sp/>*<sp/>[C]<sp/>starting<sp/>with<sp/>$a<sp/>=<sp/>[%d<sp/>%d<sp/>%d]\n"</highlight><highlight class="normal">,<sp/>a[0],<sp/>a[1],<sp/>a[2]);</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><ref refid="group__annotation_1ga34e34cede8627c47c07e6ede997e37fe" kindref="member">PDI_share</ref>(</highlight><highlight class="stringliteral">"a"</highlight><highlight class="normal">,<sp/>a,<sp/><ref refid="group__annotation_1ggafa02617bd8d016f3f931adc107b38027a5cf752cb5cd43b4ae3d7590af61c9939" kindref="member">PDI_INOUT</ref>);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__annotation_1gab21d59fd8d6532f6b8d7a4ac69a2388b" kindref="member">PDI_event</ref>(</highlight><highlight class="stringliteral">"testing"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__annotation_1gabf58b7c146cbf7e3341245f60cec0f7e" kindref="member">PDI_reclaim</ref>(</highlight><highlight class="stringliteral">"a"</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">"<sp/>*<sp/>[C]<sp/>now<sp/>I<sp/>see<sp/><sp/><sp/><sp/><sp/>$a<sp/>=<sp/>[%d<sp/>%d<sp/>%d]\n"</highlight><highlight class="normal">,<sp/>a[0],<sp/>a[1],<sp/>a[2]);</highlight></codeline>
</programlisting></para>
<para>Output from the program: <programlisting><codeline><highlight class="normal"><sp/>*<sp/>[C]<sp/>starting<sp/>with<sp/>$a<sp/>=<sp/>[1<sp/>2<sp/>3]</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:51:26]<sp/>***<sp/>trace:<sp/>Sharing<sp/>`a'<sp/>Ref<sp/>with<sp/>rights:<sp/>R<sp/>=<sp/>true,<sp/>W<sp/>=<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:51:26]<sp/>***<sp/>trace:<sp/>Calling<sp/>`a'<sp/>share.<sp/>Callbacks<sp/>to<sp/>call:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[PDI][13:51:26]<sp/>***<sp/>trace:<sp/>Calling<sp/>`testing'<sp/>event.<sp/>Callbacks<sp/>to<sp/>call:<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>[P]<sp/>I<sp/>received<sp/><sp/><sp/><sp/>$a<sp/>=<sp/>[1<sp/>2<sp/>3]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>[P]<sp/>changed<sp/>it<sp/>to<sp/>$a<sp/>=<sp/>[1<sp/>7<sp/>3]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>[C]<sp/>now<sp/>I<sp/>see<sp/><sp/><sp/><sp/><sp/>$a<sp/>=<sp/>[1<sp/>7<sp/>3]</highlight></codeline>
</programlisting> </para>
</sect1>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="set_value_plugin" kind="page">
    <compoundname>set_value_plugin</compoundname>
    <title>Set_value plugin</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The Set_value plugin allows setting values to data and metadata descriptors from the yaml file.</para>
<para>There are 3 main features:<orderedlist>
<listitem><para>Share data - plugin will share new allocated data with given values</para>
</listitem><listitem><para>Expose data - plugin will expose new allocated data with given values</para>
</listitem><listitem><para>Set data - plugin will set given values to the already shared data</para>
</listitem></orderedlist>
</para>
<sect1 id="set_value_plugin_1set_value_configuration">
<title>Configuration grammar</title>
<para>At its root, the Set_value configuration is made of:</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"on_init"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a list of <ref refid="set_value_plugin_1value_operation" kindref="member">value operation</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"on_event"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>an <ref refid="set_value_plugin_1on_event_map_node" kindref="member">on_event</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"on_data"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>an <ref refid="set_value_plugin_1on_data_map_node" kindref="member">on_data</ref>  </para>
</entry></row>
</table>
</para>
<sect2 id="set_value_plugin_1on_init_list_node">
<title>on_init</title>
<para>Specifies a list of operation to do in <ref refid="group__init__final_1ga3dc660be40c93c169337e3d2692b2ed0" kindref="member">PDI_init</ref> function. <computeroutput>on_init</computeroutput> is a list of <ref refid="set_value_plugin_1value_operation" kindref="member">value operation</ref> s.</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_init:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>set:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>share:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="set_value_plugin_1on_event_map_node">
<title>on_event</title>
<para>Specifies a map of events that will trigger the values set. <computeroutput>on_event</computeroutput> is a map with event name as a key and <ref refid="set_value_plugin_1value_operation" kindref="member">value operation</ref> list as map value.</para>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>".*"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a list of <ref refid="set_value_plugin_1value_operation" kindref="member">value operation</ref>  </para>
</entry></row>
</table>
</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_1_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>set:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>share:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_2_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>set:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>share:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="set_value_plugin_1on_data_map_node">
<title>on_data</title>
<para>Specifies a map of data that on share will trigger the values set. <computeroutput>on_data</computeroutput> is a map with data/metadata name as a key and <ref refid="set_value_plugin_1value_operation" kindref="member">value operation</ref> as map value.</para>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>".*"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a list of <ref refid="set_value_plugin_1value_operation" kindref="member">value operation</ref>  </para>
</entry></row>
</table>
</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>metadata_1_name:<sp/>...<sp/>#<sp/>metadata_type</highlight></codeline>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data_1_name:<sp/>...<sp/><sp/>#<sp/>data_type</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_1_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>set:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>share:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>metadata_1_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>set:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>share:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:<sp/>...<sp/>#<sp/>value_list</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="set_value_plugin_1value_operation">
<title>value operation</title>
<para>Defines what operation to do with given <ref refid="set_value_plugin_1value_list" kindref="member">value list</ref>. The order of the operation is important and will be called in the same order as defined in yaml file.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"set"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="set_value_plugin_1value_list" kindref="member">value list</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"share"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="set_value_plugin_1value_list" kindref="member">value list</ref>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>"expose"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a <ref refid="set_value_plugin_1value_list" kindref="member">value list</ref>  </para>
</entry></row>
</table>
</para>
<para><bold>Share warning</bold> <linebreak/>
</para>
<para>Share is always done with read and write rights. Plugin allocates memory by <computeroutput>malloc</computeroutput>. If you reclaim the data, you should free it with <computeroutput>free</computeroutput> instruction. If you don't reclaim or release data, plugin will try to release all descriptors that has shared before (failure is not an error, so user can reclaim the shared data).</para>
</sect2>
<sect2 id="set_value_plugin_1value_list">
<title>value list</title>
<para>Is a list of the<itemizedlist>
<listitem><para><ref refid="set_value_plugin_1scalar_value" kindref="member">scalar value</ref>,</para>
</listitem><listitem><para><ref refid="set_value_plugin_1array_value" kindref="member">array value</ref>,</para>
</listitem><listitem><para><ref refid="set_value_plugin_1record_value" kindref="member">record value</ref> <linebreak/>
</para>
</listitem></itemizedlist>
</para>
<para>as elements. The order of the elements is important. The descriptors will be set in the same order as given in the yaml file.</para>
</sect2>
<sect2 id="set_value_plugin_1scalar_value">
<title>scalar value</title>
<para>Is a map of descriptor name as a key, and a value to set as a value:</para>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>".*"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a scalar value to set  </para>
</entry></row>
</table>
</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scalar_name:<sp/>int</highlight></codeline>
<codeline><highlight class="normal">set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>on_init:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>expose:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>scalar_name:<sp/>42</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="set_value_plugin_1array_value">
<title>array value</title>
<para>Is a map of descriptor name as a key, and a list of values to set as a value:</para>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>".*"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a list of value to set  </para>
</entry></row>
</table>
</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>array_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size:<sp/>4</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>subtype:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_init:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>array_name:<sp/>[2,<sp/>3,<sp/>4,<sp/>5]</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="set_value_plugin_1record_value">
<title>record value</title>
<para>Is a map of descriptor name as a key, and a list of members to set as a value. Each member consist of an inner <computeroutput>value_list</computeroutput>. The order of the members is unrestricted, but the plugin will set the values to the members in the same order.</para>
<para><table rows="2" cols="2"><row>
<entry thead="yes"><para>key </para>
</entry><entry thead="yes"><para>value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>".*"</computeroutput> (<emphasis>optional</emphasis>) </para>
</entry><entry thead="no"><para>a map with member name as key and a value to set as value  </para>
</entry></row>
</table>
</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>record_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>record</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>buffersize:<sp/>16</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>members:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>member_1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disp:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtype:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>member_2:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disp:<sp/>12</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>on_init:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>expose:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>record_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>member_2:<sp/>3<sp/>#<sp/>int<sp/>member</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>member_1:<sp/>[1,<sp/>2,<sp/>3]<sp/>#<sp/>array<sp/>of<sp/>ints<sp/>member</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="set_value_plugin_1full_config">
<title>full configuration example</title>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>array_size:<sp/>int64</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>record_data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>record</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>buffersize:<sp/>36</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>members:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scalar_data:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disp:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>array_data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disp:<sp/>4</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size:<sp/>$array_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtype:<sp/>int</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_init:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>array_size:<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>share:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>record_data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>scalar_data:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>array_data:<sp/>[0,<sp/>0,<sp/>0]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_1_name:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>set:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>record_data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>scalar_data:<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>array_data:<sp/>[1,<sp/>2,<sp/>3]</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="set_value_plugin_1old_to_new">
<title>Using old values to set new</title>
<sect2 id="set_value_plugin_1increment">
<title>Increment value</title>
<para>The set_value plugin allows to use the old values to set new values, you can use even the same descriptor, for example to increment a scalar.</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">data:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>value_int:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int_array:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size:<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>subtype:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>init:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>share:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>value_int:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>int_array:<sp/>[1,<sp/>2,<sp/>3]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>increment:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>set:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>value_int:<sp/>"$value_int<sp/>+<sp/>1"</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>int_array:<sp/>["$int_array[0]<sp/>+<sp/>1",<sp/>"$int_array[1]<sp/>+<sp/>1",<sp/>"$int_array[2]<sp/>+<sp/>1"]</highlight></codeline>
</programlisting></para>
<para>After calling <computeroutput>init</computeroutput> and <computeroutput>increment</computeroutput> event, <computeroutput>value_int</computeroutput> will be equal 1, and <computeroutput>int_array</computeroutput> to [2, 3, 4].</para>
</sect2>
<sect2 id="set_value_plugin_1increment_in_array">
<title>Getting old value</title>
<para>The new value is set at the end of processing the whole descriptors. This means, that if you want to update the array element depending on other element, the old value will be set:</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int_array:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size:<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>subtype:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>init:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>int_array:<sp/>[0,<sp/>0,<sp/>0]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>increment:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>int_array:<sp/>["$int_array[0]<sp/>+<sp/>1",<sp/>"$int_array[0]<sp/>+<sp/>1",<sp/>"$int_array[1]<sp/>+<sp/>1"]</highlight></codeline>
</programlisting></para>
<para>After calling <computeroutput>init</computeroutput> and <computeroutput>increment</computeroutput> event, all values in <computeroutput>int_array</computeroutput> will equal <computeroutput>1</computeroutput>. This is because the <computeroutput>int_array[0]</computeroutput> was updated after setting all the elements.</para>
</sect2>
<sect2 id="set_value_plugin_1update_array_after_scalar">
<title>Getting new value</title>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">metadata:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int_scalar:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int_array:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size:<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>subtype:<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/>array</highlight></codeline>
<codeline><highlight class="normal">plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>on_event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>init:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>int_scalar:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>int_array:<sp/>[0,<sp/>0,<sp/>0]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>increment:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>expose:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>int_scalar:<sp/>$int_scalar+1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>int_array:<sp/>["$int_scalar",<sp/>"$int_scalar",<sp/>"$int_scalar"]</highlight></codeline>
</programlisting></para>
<para>After calling <computeroutput>init</computeroutput> and <computeroutput>increment</computeroutput> event, all values in <computeroutput>int_array</computeroutput> will equal <computeroutput>1</computeroutput>. This is because the <computeroutput>int_scalar</computeroutput> is set and then the <computeroutput>int_array</computeroutput> is updated after the <computeroutput>int_scalar</computeroutput> has a new value. </para>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="deprecated" kind="page">
    <compoundname>deprecated</compoundname>
    <title>Deprecated List</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><variablelist>
<varlistentry><term>Member <ref refid="classPDI_1_1Ref__any_1ad3b23b81d198eabcf570e16baa162834" kindref="member">PDI::Ref_any&lt; R, W &gt;::Ref_any</ref>  (Ref other, size_t offset, Datatype_uptr type)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000003"/>offset/type will be replace by datatype access sequence </para>
</listitem>
<varlistentry><term>Member <ref refid="group__hl__annotation_1ga39bceccdb0528be91cc79df784a161bc" kindref="member">PDI_transaction_begin</ref>  (const char *name)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000001"/>the transaction part of the API is deprecated, the PDI_multi_expose function should be used instead. </para>
</listitem>
<varlistentry><term>Member <ref refid="group__hl__annotation_1gac11c4c2885e34660a40f789f049d3d34" kindref="member">PDI_transaction_end</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000002"/>the transaction part of the API is deprecated, the PDI_multi_expose function should be used instead.</para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_62583a4eecf96e857c5d9caf0767e42d" kind="dir">
    <compoundname>build</compoundname>
    <innerdir refid="dir_e5dd6dff1c81fa0f292c3dcf02585389">pdi</innerdir>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/build/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_7715199e86712e799bf3be6474c82d54" kind="dir">
    <compoundname>decl_hdf5</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/anarky/data/projets/pdi/pdi/plugins/decl_hdf5/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_cfafba98a580ce4b62f8a6fa96d7cbb0" kind="dir">
    <compoundname>example</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/anarky/data/projets/pdi/pdi/example/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_9874f40e562ab0875ac9bdc69356706e" kind="dir">
    <compoundname>flowvr</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/anarky/data/projets/pdi/pdi/plugins/flowvr/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_5c00ef7d5a73f6cb78844f7e34e71f38" kind="dir">
    <compoundname>fti</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/anarky/data/projets/pdi/pdi/plugins/fti/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_6b4379a32979fa9f4310591bafbccd4f" kind="dir">
    <compoundname>include</compoundname>
    <innerdir refid="dir_3feab0661e1f71ee8e14ace9ce07c6cd">pdi</innerdir>
    <innerfile refid="pdi_8h">pdi.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_e5dd6dff1c81fa0f292c3dcf02585389" kind="dir">
    <compoundname>pdi</compoundname>
    <innerfile refid="export_8h">export.h</innerfile>
    <innerfile refid="version_8h">version.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/build/pdi/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_3feab0661e1f71ee8e14ace9ce07c6cd" kind="dir">
    <compoundname>pdi</compoundname>
    <innerfile refid="array__datatype_8h">array_datatype.h</innerfile>
    <innerfile refid="context_8h">context.h</innerfile>
    <innerfile refid="context__proxy_8h">context_proxy.h</innerfile>
    <innerfile refid="data__descriptor_8h">data_descriptor.h</innerfile>
    <innerfile refid="datatype_8h">datatype.h</innerfile>
    <innerfile refid="datatype__template_8h">datatype_template.h</innerfile>
    <innerfile refid="error_8h">error.h</innerfile>
    <innerfile refid="expression_8h">expression.h</innerfile>
    <innerfile refid="logger_8h">logger.h</innerfile>
    <innerfile refid="paraconf__wrapper_8h">paraconf_wrapper.h</innerfile>
    <innerfile refid="pdi__fwd_8h">pdi_fwd.h</innerfile>
    <innerfile refid="plugin_8h">plugin.h</innerfile>
    <innerfile refid="pointer__datatype_8h">pointer_datatype.h</innerfile>
    <innerfile refid="record__datatype_8h">record_datatype.h</innerfile>
    <innerfile refid="ref__any_8h">ref_any.h</innerfile>
    <innerfile refid="scalar__datatype_8h">scalar_datatype.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/anarky/data/projets/pdi/pdi/pdi/include/pdi/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_38c8d24aef3972a7f87b834274e76e31" kind="dir">
    <compoundname>plugins</compoundname>
    <innerdir refid="dir_7715199e86712e799bf3be6474c82d54">decl_hdf5</innerdir>
    <innerdir refid="dir_9874f40e562ab0875ac9bdc69356706e">flowvr</innerdir>
    <innerdir refid="dir_5c00ef7d5a73f6cb78844f7e34e71f38">fti</innerdir>
    <innerdir refid="dir_51c1b28d9d51340a1aa0d9ce037eb27a">pycall</innerdir>
    <innerdir refid="dir_3c9653dc95278abc6228d448e34e3710">set_value</innerdir>
    <innerdir refid="dir_34da3714567c07da504ea01b093cbd03">trace</innerdir>
    <innerdir refid="dir_236c71c8ac6ee6cc9381eb4f6d6f5269">user_code</innerdir>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/anarky/data/projets/pdi/pdi/plugins/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_51c1b28d9d51340a1aa0d9ce037eb27a" kind="dir">
    <compoundname>pycall</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/anarky/data/projets/pdi/pdi/plugins/pycall/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_3c9653dc95278abc6228d448e34e3710" kind="dir">
    <compoundname>set_value</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/anarky/data/projets/pdi/pdi/plugins/set_value/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_34da3714567c07da504ea01b093cbd03" kind="dir">
    <compoundname>trace</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/anarky/data/projets/pdi/pdi/plugins/trace/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_07c2df013bb20677b8e65a9f18968d2c" kind="dir">
    <compoundname>tutorial</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/anarky/data/projets/pdi/pdi/tutorial/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_236c71c8ac6ee6cc9381eb4f6d6f5269" kind="dir">
    <compoundname>user_code</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/anarky/data/projets/pdi/pdi/plugins/user_code/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>About</title>
    <innerpage refid="Installation">Installation of %PDI source distribution</innerpage>
    <innerpage refid="Concepts">Core Concepts</innerpage>
    <innerpage refid="First_steps">First steps with %PDI</innerpage>
    <innerpage refid="PDI_example">%PDI example</innerpage>
    <innerpage refid="Specification_tree_ref">Specification tree Reference</innerpage>
    <innerpage refid="Plugins">Plugins</innerpage>
    <innerpage refid="how_to_create_plugin">How to create a plugin</innerpage>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>PDI supports <ulink url="https://en.wikipedia.org/wiki/Loose_coupling">loose coupling</ulink> of simulation codes with libraries:<itemizedlist>
<listitem><para>the simulation code is annotated in a library-agnostic way,</para>
</listitem><listitem><para>libraries are used from the <ref refid="Concepts_1Specification_tree" kindref="member">specification tree</ref>.</para>
</listitem></itemizedlist>
</para>
<para>This approach works well for a number of concerns including: parameters reading, data initialization, post-processing, result storage to disk, visualization, fault tolerance, logging, inclusion as part of code-coupling, inclusion as part of an ensemble run, etc.</para>
<sect1 id="index_1autotoc_md0">
<title>User documentation</title>
<para><orderedlist>
<listitem><para><ref refid="Installation" kindref="compound">Installation</ref></para>
</listitem><listitem><para><ref refid="Concepts" kindref="compound">Core concepts</ref></para>
</listitem><listitem><para><ref refid="First_steps" kindref="compound">First steps</ref></para>
</listitem><listitem><para><ref refid="Hands_on" kindref="compound">Tutorial</ref></para>
</listitem><listitem><para><ref refid="PDI_example" kindref="compound">PDI example</ref></para>
</listitem><listitem><para><ulink url="modules.html">C API reference</ulink></para>
</listitem><listitem><para><ref refid="Specification_tree_ref" kindref="compound">Specification tree reference</ref></para>
</listitem><listitem><para><ref refid="Plugins" kindref="compound">List of PDI plugins</ref></para>
</listitem></orderedlist>
</para>
</sect1>
<sect1 id="index_1autotoc_md1">
<title>Developer documentation</title>
<para><orderedlist>
<listitem><para><ref refid="how_to_create_plugin" kindref="compound">Plugin creation tutorial</ref></para>
</listitem><listitem><para><ref refid="namespacePDI" kindref="compound">API for plugin developers</ref></para>
</listitem></orderedlist>
</para>
</sect1>
<sect1 id="index_1autotoc_md2">
<title>Get support</title>
<para>If you have any problem with installation, running or understanding <ref refid="namespacePDI" kindref="compound">PDI</ref>, please contact us on our <ulink url="https://join.slack.com/t/pdidev/shared_invite/enQtNDk5OTY2MDA0Nzg0LTlkM2U1MGQwZmM3OGM1MjA0M2VlMzUyNWNjODhkNmI4MjMwZmQxMTM1ODc2ODI4MjY4ODNmNDhmY2QzOWI4Nzk"><bold>Slack channel</bold> https://bit.ly/2OPmhA9</ulink>. We will be happy to help ( ဖ‿ဖ)人(စ‿စ )</para>
</sect1>
<sect1 id="index_1autotoc_md3">
<title>Join the team</title>
<para>You can work with us to make a better PDI:<itemizedlist>
<listitem><para>a 3-years engineer position: <ulink url="http://www.maisondelasimulation.fr/en/emploi/3-years-engineer-position-improvement-and-integration-of-the-pdi-library-for-high-performance-code-coupling-2/">"Improvement and integration of the PDI library for High-performance code coupling"</ulink>,</para>
</listitem><listitem><para>a 2-years post-doc position: <ulink url="http://www.maisondelasimulation.fr/en/emploi/2-years-post-doc-position-data-driven-code-coupling-at-exascale-2/">"Data-driven code-coupling at Exascale"</ulink>,</para>
</listitem><listitem><para>and we are always looking for people interested in an internship, <ulink url="mailto:julien.bigot@cea.fr">drop an email if you are insterested</ulink>. </para>
</listitem></itemizedlist>
</para>
</sect1>
    </detaileddescription>
  </compounddef></doxygen>